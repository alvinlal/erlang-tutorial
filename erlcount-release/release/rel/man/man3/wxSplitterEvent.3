.TH wxSplitterEvent 3 "wx 2.2.2" "wxWidgets team." "Erlang Module Definition"
.SH NAME
wxSplitterEvent \- Functions for wxSplitterEvent class
.SH DESCRIPTION
.LP
This class represents the events generated by a splitter control\&.
.LP
Also there is only one event class, the data associated to the different events is not the same and so not all accessor functions may be called for each event\&. The documentation mentions the kind of event(s) for which the given accessor function makes sense: calling it for other types of events will result in assert failure (in debug mode) and will return meaningless results\&.
.LP
See: \fIwxSplitterWindow\fR\&, Overview events 
.LP
This class is derived (and can use functions) from: \fIwxNotifyEvent\fR\& \fIwxCommandEvent\fR\& \fIwxEvent\fR\&
.LP
wxWidgets docs: wxSplitterEvent
.SH "EVENTS"

.LP
Use \fIwxEvtHandler:connect/3\fR\& with \fIwxSplitterEventType\fR\& to subscribe to events of this type\&.
.SH DATA TYPES
.nf

\fBwxSplitterEvent()\fR\& = wx:wx_object()
.br
.fi
.nf

\fBwxSplitter()\fR\& = 
.br
    #wxSplitter{type = wxSplitterEvent:wxSplitterEventType()}
.br
.fi
.nf

\fBwxSplitterEventType()\fR\& = 
.br
    command_splitter_sash_pos_changed |
.br
    command_splitter_sash_pos_changing |
.br
    command_splitter_doubleclicked | command_splitter_unsplit
.br
.fi
.SH EXPORTS
.LP
.nf

.B
getSashPosition(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSplitterEvent()
.br
.RE
.RE
.RS
.LP
Returns the new sash position\&.
.LP
May only be called while processing \fIwxEVT_SPLITTER_SASH_POS_CHANGING\fR\& and \fIwxEVT_SPLITTER_SASH_POS_CHANGED\fR\& events\&.
.RE
.LP
.nf

.B
getX(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSplitterEvent()
.br
.RE
.RE
.RS
.LP
Returns the x coordinate of the double-click point\&.
.LP
May only be called while processing \fIwxEVT_SPLITTER_DOUBLECLICKED\fR\& events\&.
.RE
.LP
.nf

.B
getY(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSplitterEvent()
.br
.RE
.RE
.RS
.LP
Returns the y coordinate of the double-click point\&.
.LP
May only be called while processing \fIwxEVT_SPLITTER_DOUBLECLICKED\fR\& events\&.
.RE
.LP
.nf

.B
getWindowBeingRemoved(This) -> wxWindow:wxWindow()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSplitterEvent()
.br
.RE
.RE
.RS
.LP
Returns a pointer to the window being removed when a splitter window is unsplit\&.
.LP
May only be called while processing \fIwxEVT_SPLITTER_UNSPLIT\fR\& events\&.
.RE
.LP
.nf

.B
setSashPosition(This, Pos) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSplitterEvent()
.br
Pos = integer()
.br
.RE
.RE
.RS
.LP
In the case of \fIwxEVT_SPLITTER_SASH_POS_CHANGED\fR\& events, sets the new sash position\&.
.LP
In the case of \fIwxEVT_SPLITTER_SASH_POS_CHANGING\fR\& events, sets the new tracking bar position so visual feedback during dragging will represent that change that will actually take place\&. Set to -1 from the event handler code to prevent repositioning\&.
.LP
May only be called while processing \fIwxEVT_SPLITTER_SASH_POS_CHANGING\fR\& and \fIwxEVT_SPLITTER_SASH_POS_CHANGED\fR\& events\&.
.RE