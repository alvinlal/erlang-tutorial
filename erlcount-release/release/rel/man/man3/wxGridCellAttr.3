.TH wxGridCellAttr 3 "wx 2.2.2" "wxWidgets team." "Erlang Module Definition"
.SH NAME
wxGridCellAttr \- Functions for wxGridCellAttr class
.SH DESCRIPTION
.LP
This class can be used to alter the cells\&' appearance in the grid by changing their attributes from the defaults\&. An object of this class may be returned by \fIwxGridTableBase::GetAttr()\fR\& (not implemented in wx)\&.
.LP
Note that objects of this class are reference-counted and it\&'s recommended to use wxGridCellAttrPtr smart pointer class when working with them to avoid memory leaks\&.
.LP
wxWidgets docs: wxGridCellAttr
.SH DATA TYPES
.nf

\fBwxGridCellAttr()\fR\& = wx:wx_object()
.br
.fi
.SH EXPORTS
.LP
.nf

.B
setTextColour(This, ColText) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridCellAttr()
.br
ColText = wx:wx_colour()
.br
.RE
.RE
.RS
.LP
Sets the text colour\&.
.RE
.LP
.nf

.B
setBackgroundColour(This, ColBack) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridCellAttr()
.br
ColBack = wx:wx_colour()
.br
.RE
.RE
.RS
.LP
Sets the background colour\&.
.RE
.LP
.nf

.B
setFont(This, Font) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridCellAttr()
.br
Font = wxFont:wxFont()
.br
.RE
.RE
.RS
.LP
Sets the font\&.
.RE
.LP
.nf

.B
setAlignment(This, HAlign, VAlign) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridCellAttr()
.br
HAlign = VAlign = integer()
.br
.RE
.RE
.RS
.LP
Sets the alignment\&.
.LP
\fIhAlign\fR\& can be one of \fIwxALIGN_LEFT\fR\&, \fIwxALIGN_CENTRE\fR\& or \fIwxALIGN_RIGHT\fR\& and \fIvAlign\fR\& can be one of \fIwxALIGN_TOP\fR\&, \fIwxALIGN_CENTRE\fR\& or \fIwxALIGN_BOTTOM\fR\&\&.
.RE
.LP
.nf

.B
setReadOnly(This) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridCellAttr()
.br
.RE
.RE
.LP
.nf

.B
setReadOnly(This, Options :: [Option]) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridCellAttr()
.br
Option = {isReadOnly, boolean()}
.br
.RE
.RE
.RS
.LP
Sets the cell as read-only\&.
.RE
.LP
.nf

.B
setRenderer(This, Renderer) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridCellAttr()
.br
Renderer = wxGridCellRenderer:wxGridCellRenderer()
.br
.RE
.RE
.RS
.LP
Sets the renderer to be used for cells with this attribute\&.
.LP
Takes ownership of the pointer\&.
.RE
.LP
.nf

.B
setEditor(This, Editor) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridCellAttr()
.br
Editor = wxGridCellEditor:wxGridCellEditor()
.br
.RE
.RE
.RS
.LP
Sets the editor to be used with the cells with this attribute\&.
.RE
.LP
.nf

.B
hasTextColour(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridCellAttr()
.br
.RE
.RE
.RS
.LP
Returns true if this attribute has a valid text colour set\&.
.RE
.LP
.nf

.B
hasBackgroundColour(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridCellAttr()
.br
.RE
.RE
.RS
.LP
Returns true if this attribute has a valid background colour set\&.
.RE
.LP
.nf

.B
hasFont(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridCellAttr()
.br
.RE
.RE
.RS
.LP
Returns true if this attribute has a valid font set\&.
.RE
.LP
.nf

.B
hasAlignment(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridCellAttr()
.br
.RE
.RE
.RS
.LP
Returns true if this attribute has a valid alignment set\&.
.RE
.LP
.nf

.B
hasRenderer(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridCellAttr()
.br
.RE
.RE
.RS
.LP
Returns true if this attribute has a valid cell renderer set\&.
.RE
.LP
.nf

.B
hasEditor(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridCellAttr()
.br
.RE
.RE
.RS
.LP
Returns true if this attribute has a valid cell editor set\&.
.RE
.LP
.nf

.B
getTextColour(This) -> wx:wx_colour4()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridCellAttr()
.br
.RE
.RE
.RS
.LP
Returns the text colour\&.
.RE
.LP
.nf

.B
getBackgroundColour(This) -> wx:wx_colour4()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridCellAttr()
.br
.RE
.RE
.RS
.LP
Returns the background colour\&.
.RE
.LP
.nf

.B
getFont(This) -> wxFont:wxFont()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridCellAttr()
.br
.RE
.RE
.RS
.LP
Returns the font\&.
.RE
.LP
.nf

.B
getAlignment(This) -> {HAlign :: integer(), VAlign :: integer()}
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridCellAttr()
.br
.RE
.RE
.RS
.LP
Get the alignment to use for the cell with the given attribute\&.
.LP
If this attribute doesn\&'t specify any alignment, the default attribute alignment is used (which can be changed using \fIwxGrid:setDefaultCellAlignment/3\fR\& but is left and top by default)\&.
.LP
Notice that \fIhAlign\fR\& and \fIvAlign\fR\& values are always overwritten by this function, use \fIGetNonDefaultAlignment()\fR\& (not implemented in wx) if this is not desirable\&.
.RE
.LP
.nf

.B
getRenderer(This, Grid, Row, Col) ->
.B
               wxGridCellRenderer:wxGridCellRenderer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridCellAttr()
.br
Grid = wxGrid:wxGrid()
.br
Row = Col = integer()
.br
.RE
.RE
.RS
.LP
Returns the cell renderer\&.
.LP
The caller is responsible for calling \fIDecRef()\fR\& (not implemented in wx) on the returned pointer, use \fIGetRendererPtr()\fR\& (not implemented in wx) to do it automatically\&.
.RE
.LP
.nf

.B
getEditor(This, Grid, Row, Col) ->
.B
             wxGridCellEditor:wxGridCellEditor()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridCellAttr()
.br
Grid = wxGrid:wxGrid()
.br
Row = Col = integer()
.br
.RE
.RE
.RS
.LP
Returns the cell editor\&.
.LP
The caller is responsible for calling \fIDecRef()\fR\& (not implemented in wx) on the returned pointer, use \fIGetEditorPtr()\fR\& (not implemented in wx) to do it automatically\&.
.RE
.LP
.nf

.B
isReadOnly(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridCellAttr()
.br
.RE
.RE
.RS
.LP
Returns true if this cell is set as read-only\&.
.RE
.LP
.nf

.B
setDefAttr(This, DefAttr) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = DefAttr = wxGridCellAttr()
.br
.RE
.RE
.RS
.RE