.TH wxControlWithItems 3 "wx 2.2.2" "wxWidgets team." "Erlang Module Definition"
.SH NAME
wxControlWithItems \- Functions for wxControlWithItems class
.SH DESCRIPTION
.LP
This is convenience class that derives from both \fIwxControl\fR\& and \fIwxItemContainer\fR\& (not implemented in wx)\&. It is used as basis for some wxWidgets controls (\fIwxChoice\fR\& and \fIwxListBox\fR\&)\&.
.LP
See: \fIwxItemContainer\fR\& (not implemented in wx), \fIwxItemContainerImmutable\fR\& (not implemented in wx)
.LP
This class is derived (and can use functions) from: \fIwxControl\fR\& \fIwxWindow\fR\& \fIwxEvtHandler\fR\&
.LP
wxWidgets docs: wxControlWithItems
.SH DATA TYPES
.nf

\fBwxControlWithItems()\fR\& = wx:wx_object()
.br
.fi
.SH EXPORTS
.LP
.nf

.B
append(This, Item) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxControlWithItems()
.br
Item = unicode:chardata()
.br
.RE
.RE
.RS
.LP
Appends item into the control\&.
.LP
Return: The return value is the index of the newly inserted item\&. Note that this may be different from the last one if the control is sorted (e\&.g\&. has \fIwxLB_SORT\fR\& or \fIwxCB_SORT\fR\& style)\&.
.RE
.LP
.nf

.B
append(This, Item, ClientData) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxControlWithItems()
.br
Item = unicode:chardata()
.br
ClientData = term()
.br
.RE
.RE
.RS
.LP
Appends item into the control\&.
.LP
Return: The return value is the index of the newly inserted item\&. Note that this may be different from the last one if the control is sorted (e\&.g\&. has \fIwxLB_SORT\fR\& or \fIwxCB_SORT\fR\& style)\&.
.RE
.LP
.nf

.B
appendStrings(This, Items) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxControlWithItems()
.br
Items = [unicode:chardata()]
.br
.RE
.RE
.RS
.LP
Appends several items at once into the control\&.
.LP
Notice that calling this method is usually much faster than appending them one by one if you need to add a lot of items\&.
.RE
.LP
.nf

.B
appendStrings(This, Items, ClientsData) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxControlWithItems()
.br
Items = [unicode:chardata()]
.br
ClientsData = [term()]
.br
.RE
.RE
.RS
.LP
Appends several items at once into the control\&.
.LP
Notice that calling this method is usually much faster than appending them one by one if you need to add a lot of items\&.
.RE
.LP
.nf

.B
clear(This) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxControlWithItems()
.br
.RE
.RE
.RS
.LP
Removes all items from the control\&.
.LP
\fIclear/1\fR\& also deletes the client data of the existing items if it is owned by the control\&.
.RE
.LP
.nf

.B
delete(This, N) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxControlWithItems()
.br
N = integer()
.br
.RE
.RE
.RS
.LP
Deletes an item from the control\&.
.LP
The client data associated with the item will be also deleted if it is owned by the control\&. Note that it is an error (signalled by an assert failure in debug builds) to remove an item with the index negative or greater or equal than the number of items in the control\&.
.LP
If there is a currently selected item below the item being deleted, i\&.e\&. if \fIgetSelection/1\fR\& returns a valid index greater than or equal to \fIn\fR\&, the selection is invalidated when this function is called\&. However if the selected item appears before the item being deleted, the selection is preserved unchanged\&.
.LP
See: \fIclear/1\fR\& 
.RE
.LP
.nf

.B
findString(This, String) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxControlWithItems()
.br
String = unicode:chardata()
.br
.RE
.RE
.LP
.nf

.B
findString(This, String, Options :: [Option]) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxControlWithItems()
.br
String = unicode:chardata()
.br
Option = {bCase, boolean()}
.br
.RE
.RE
.RS
.LP
Finds an item whose label matches the given string\&.
.LP
Return: The zero-based position of the item, or wxNOT_FOUND if the string was not found\&.
.RE
.LP
.nf

.B
getClientData(This, N) -> term()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxControlWithItems()
.br
N = integer()
.br
.RE
.RE
.RS
.LP
Returns a pointer to the client data associated with the given item (if any)\&.
.LP
It is an error to call this function for a control which doesn\&'t have typed client data at all although it is OK to call it even if the given item doesn\&'t have any client data associated with it (but other items do)\&.
.LP
Notice that the returned pointer is still owned by the control and will be deleted by it, use \fIDetachClientObject()\fR\& (not implemented in wx) if you want to remove the pointer from the control\&.
.LP
Return: A pointer to the client data, or NULL if not present\&.
.RE
.LP
.nf

.B
setClientData(This, N, Data) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxControlWithItems()
.br
N = integer()
.br
Data = term()
.br
.RE
.RE
.RS
.LP
Associates the given typed client data pointer with the given item: the \fIdata\fR\& object will be deleted when the item is deleted (either explicitly by using \fIdelete/2\fR\& or implicitly when the control itself is destroyed)\&.
.LP
Note that it is an error to call this function if any untyped client data pointers had been associated with the control items before\&.
.RE
.LP
.nf

.B
getCount(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxControlWithItems()
.br
.RE
.RE
.RS
.LP
Returns the number of items in the control\&.
.LP
See: \fIisEmpty/1\fR\& 
.RE
.LP
.nf

.B
getSelection(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxControlWithItems()
.br
.RE
.RE
.RS
.LP
Returns the index of the selected item or \fIwxNOT_FOUND\fR\& if no item is selected\&.
.LP
Return: The position of the current selection\&.
.LP
Remark: This method can be used with single selection list boxes only, you should use \fIwxListBox:getSelections/1\fR\& for the list boxes with wxLB_MULTIPLE style\&.
.LP
See: \fIsetSelection/2\fR\&, \fIgetStringSelection/1\fR\& 
.RE
.LP
.nf

.B
getString(This, N) -> unicode:charlist()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxControlWithItems()
.br
N = integer()
.br
.RE
.RE
.RS
.LP
Returns the label of the item with the given index\&.
.LP
Return: The label of the item or an empty string if the position was invalid\&.
.RE
.LP
.nf

.B
getStringSelection(This) -> unicode:charlist()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxControlWithItems()
.br
.RE
.RE
.RS
.LP
Returns the label of the selected item or an empty string if no item is selected\&.
.LP
See: \fIgetSelection/1\fR\& 
.RE
.LP
.nf

.B
insert(This, Item, Pos) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxControlWithItems()
.br
Item = unicode:chardata()
.br
Pos = integer()
.br
.RE
.RE
.RS
.LP
Inserts item into the control\&.
.LP
Return: The return value is the index of the newly inserted item\&. If the insertion failed for some reason, -1 is returned\&.
.RE
.LP
.nf

.B
insert(This, Item, Pos, ClientData) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxControlWithItems()
.br
Item = unicode:chardata()
.br
Pos = integer()
.br
ClientData = term()
.br
.RE
.RE
.RS
.LP
Inserts item into the control\&.
.LP
Return: The return value is the index of the newly inserted item\&. If the insertion failed for some reason, -1 is returned\&.
.RE
.LP
.nf

.B
insertStrings(This, Items, Pos) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxControlWithItems()
.br
Items = [unicode:chardata()]
.br
Pos = integer()
.br
.RE
.RE
.RS
.LP
Inserts several items at once into the control\&.
.LP
Notice that calling this method is usually much faster than inserting them one by one if you need to insert a lot of items\&.
.LP
Return: The return value is the index of the last inserted item\&. If the insertion failed for some reason, -1 is returned\&.
.RE
.LP
.nf

.B
insertStrings(This, Items, Pos, ClientsData) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxControlWithItems()
.br
Items = [unicode:chardata()]
.br
Pos = integer()
.br
ClientsData = [term()]
.br
.RE
.RE
.RS
.LP
Inserts several items at once into the control\&.
.LP
Notice that calling this method is usually much faster than inserting them one by one if you need to insert a lot of items\&.
.LP
Return: The return value is the index of the last inserted item\&. If the insertion failed for some reason, -1 is returned\&.
.RE
.LP
.nf

.B
isEmpty(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxControlWithItems()
.br
.RE
.RE
.RS
.LP
Returns true if the control is empty or false if it has some items\&.
.LP
See: \fIgetCount/1\fR\& 
.RE
.LP
.nf

.B
select(This, N) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxControlWithItems()
.br
N = integer()
.br
.RE
.RE
.RS
.LP
This is the same as \fIsetSelection/2\fR\& and exists only because it is slightly more natural for controls which support multiple selection\&.
.RE
.LP
.nf

.B
setSelection(This, N) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxControlWithItems()
.br
N = integer()
.br
.RE
.RE
.RS
.LP
Sets the selection to the given item \fIn\fR\& or removes the selection entirely if \fIn\fR\& == \fIwxNOT_FOUND\fR\&\&.
.LP
Note that this does not cause any command events to be emitted nor does it deselect any other items in the controls which support multiple selections\&.
.LP
See: \fIsetString/3\fR\&, \fIsetStringSelection/2\fR\& 
.RE
.LP
.nf

.B
setString(This, N, String) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxControlWithItems()
.br
N = integer()
.br
String = unicode:chardata()
.br
.RE
.RE
.RS
.LP
Sets the label for the given item\&.
.RE
.LP
.nf

.B
setStringSelection(This, String) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxControlWithItems()
.br
String = unicode:chardata()
.br
.RE
.RE
.RS
.LP
Selects the item with the specified string in the control\&.
.LP
This method doesn\&'t cause any command events to be emitted\&.
.LP
Notice that this method is case-insensitive, i\&.e\&. the string is compared with all the elements of the control case-insensitively and the first matching entry is selected, even if it doesn\&'t have exactly the same case as this string and there is an exact match afterwards\&.
.LP
Return: true if the specified string has been selected, false if it wasn\&'t found in the control\&.
.RE