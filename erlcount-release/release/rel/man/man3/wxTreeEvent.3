.TH wxTreeEvent 3 "wx 2.2.2" "wxWidgets team." "Erlang Module Definition"
.SH NAME
wxTreeEvent \- Functions for wxTreeEvent class
.SH DESCRIPTION
.LP
A tree event holds information about events associated with \fIwxTreeCtrl\fR\& objects\&.
.LP
To process input from a tree control, use these event handler macros to direct input to member functions that take a \fIwxTreeEvent\fR\& argument\&.
.LP
See: \fIwxTreeCtrl\fR\& 
.LP
This class is derived (and can use functions) from: \fIwxNotifyEvent\fR\& \fIwxCommandEvent\fR\& \fIwxEvent\fR\&
.LP
wxWidgets docs: wxTreeEvent
.SH "EVENTS"

.LP
Use \fIwxEvtHandler:connect/3\fR\& with \fIwxTreeEventType\fR\& to subscribe to events of this type\&.
.SH DATA TYPES
.nf

\fBwxTreeEvent()\fR\& = wx:wx_object()
.br
.fi
.nf

\fBwxTree()\fR\& = 
.br
    #wxTree{type = wxTreeEvent:wxTreeEventType(),
.br
            item = integer(),
.br
            itemOld = integer(),
.br
            pointDrag = {X :: integer(), Y :: integer()}}
.br
.fi
.nf

\fBwxTreeEventType()\fR\& = 
.br
    command_tree_begin_drag | command_tree_begin_rdrag |
.br
    command_tree_begin_label_edit | command_tree_end_label_edit |
.br
    command_tree_delete_item | command_tree_get_info |
.br
    command_tree_set_info | command_tree_item_expanded |
.br
    command_tree_item_expanding | command_tree_item_collapsed |
.br
    command_tree_item_collapsing | command_tree_sel_changed |
.br
    command_tree_sel_changing | command_tree_key_down |
.br
    command_tree_item_activated | command_tree_item_right_click |
.br
    command_tree_item_middle_click | command_tree_end_drag |
.br
    command_tree_state_image_click |
.br
    command_tree_item_gettooltip | command_tree_item_menu |
.br
    dirctrl_selectionchanged | dirctrl_fileactivated
.br
.fi
.SH EXPORTS
.LP
.nf

.B
getKeyCode(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTreeEvent()
.br
.RE
.RE
.RS
.LP
Returns the key code if the event is a key event\&.
.LP
Use \fIgetKeyEvent/1\fR\& to get the values of the modifier keys for this event (i\&.e\&. Shift or Ctrl)\&.
.RE
.LP
.nf

.B
getItem(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTreeEvent()
.br
.RE
.RE
.RS
.LP
Returns the item (valid for all events)\&.
.RE
.LP
.nf

.B
getKeyEvent(This) -> wxKeyEvent:wxKeyEvent()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTreeEvent()
.br
.RE
.RE
.RS
.LP
Returns the key event for \fIEVT_TREE_KEY_DOWN\fR\& events\&.
.RE
.LP
.nf

.B
getLabel(This) -> unicode:charlist()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTreeEvent()
.br
.RE
.RE
.RS
.LP
Returns the label if the event is a begin or end edit label event\&.
.RE
.LP
.nf

.B
getOldItem(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTreeEvent()
.br
.RE
.RE
.RS
.LP
Returns the old item index (valid for \fIEVT_TREE_SEL_CHANGING\fR\& and \fIEVT_TREE_SEL_CHANGED\fR\& events)\&.
.RE
.LP
.nf

.B
getPoint(This) -> {X :: integer(), Y :: integer()}
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTreeEvent()
.br
.RE
.RE
.RS
.LP
Returns the position of the mouse pointer if the event is a drag or menu-context event\&.
.LP
In both cases the position is in client coordinates - i\&.e\&. relative to the \fIwxTreeCtrl\fR\& window (so that you can pass it directly to e\&.g\&. \fIwxWindow:popupMenu/4\fR\&)\&.
.RE
.LP
.nf

.B
isEditCancelled(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTreeEvent()
.br
.RE
.RE
.RS
.LP
Returns true if the label edit was cancelled\&.
.LP
This should be called from within an \fIEVT_TREE_END_LABEL_EDIT\fR\& handler\&.
.RE
.LP
.nf

.B
setToolTip(This, Tooltip) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTreeEvent()
.br
Tooltip = unicode:chardata()
.br
.RE
.RE
.RS
.LP
Set the tooltip for the item (valid for \fIEVT_TREE_ITEM_GETTOOLTIP\fR\& events)\&.
.LP
Windows only\&.
.RE