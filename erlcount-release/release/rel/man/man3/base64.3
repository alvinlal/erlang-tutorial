.TH base64 3 "stdlib 4.3.1" "Ericsson AB" "Erlang Module Definition"
.SH NAME
base64 \- Provides base64 encode and decode, see
    RFC 2045.
.SH DESCRIPTION
.LP
Provides base64 encode and decode, see RFC 2045\&.
.SH DATA TYPES
.nf

\fBbase64_alphabet()\fR\& = 65\&.\&.90 | 97\&.\&.122 | 48\&.\&.57 | 43 | 47 | 61
.br
.fi
.RS
.LP
Base 64 Encoding alphabet, see RFC 4648\&.
.RE
.nf

\fBbase64_string()\fR\& = [base64_alphabet()]
.br
.fi
.RS
.LP
Base 64 encoded string\&.
.RE
.nf

\fBbase64_binary()\fR\& = binary()
.br
.fi
.RS
.LP
Base 64 encoded binary\&.
.RE
.nf

\fBbyte_string()\fR\& = [byte()]
.br
.fi
.RS
.LP
Arbitrary sequences of octets\&.
.RE
.SH EXPORTS
.LP
.nf

.B
decode(Base64) -> Data
.br
.fi
.br
.nf

.B
decode_to_string(Base64) -> DataString
.br
.fi
.br
.nf

.B
mime_decode(Base64) -> Data
.br
.fi
.br
.nf

.B
mime_decode_to_string(Base64) -> DataString
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Base64 = base64_string() | base64_binary()
.br
Data = binary()
.br
DataString = byte_string()
.br
.RE
.RE
.RS
.LP
Decodes a base64-encoded string to plain ASCII\&. See RFC 4648\&.
.LP
\fImime_decode/1\fR\& and \fImime_decode_to_string/1\fR\& strip away illegal characters, while \fIdecode/1\fR\& and \fIdecode_to_string/1\fR\& only strip away whitespace characters\&.
.RE
.LP
.nf

.B
encode(Data) -> Base64
.br
.fi
.br
.nf

.B
encode_to_string(Data) -> Base64String
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Data = byte_string() | binary()
.br
Base64 = base64_binary()
.br
Base64String = base64_string()
.br
.RE
.RE
.RS
.LP
Encodes a plain ASCII string into base64\&. The result is 33% larger than the data\&.
.RE