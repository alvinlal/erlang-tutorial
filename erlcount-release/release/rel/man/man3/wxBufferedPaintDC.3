.TH wxBufferedPaintDC 3 "wx 2.2.2" "wxWidgets team." "Erlang Module Definition"
.SH NAME
wxBufferedPaintDC \- Functions for wxBufferedPaintDC class
.SH DESCRIPTION
.LP
This is a subclass of \fIwxBufferedDC\fR\& which can be used inside of an \fIEVT_PAINT()\fR\& event handler to achieve double-buffered drawing\&. Just use this class instead of \fIwxPaintDC\fR\& and make sure \fIwxWindow:setBackgroundStyle/2\fR\& is called with wxBG_STYLE_PAINT somewhere in the class initialization code, and that\&'s all you have to do to (mostly) avoid flicker\&. The only thing to watch out for is that if you are using this class together with \fIwxScrolled\fR\& (not implemented in wx), you probably do \fInot\fR\& want to call \fIwxScrolledWindow:prepareDC/2\fR\& on it as it already does this internally for the real underlying \fIwxPaintDC\fR\&\&.
.LP
See: \fIwxDC\fR\&, \fIwxBufferedDC\fR\&, \fIwxAutoBufferedPaintDC\fR\& (not implemented in wx), \fIwxPaintDC\fR\& 
.LP
This class is derived (and can use functions) from: \fIwxBufferedDC\fR\& \fIwxMemoryDC\fR\& \fIwxDC\fR\&
.LP
wxWidgets docs: wxBufferedPaintDC
.SH DATA TYPES
.nf

\fBwxBufferedPaintDC()\fR\& = wx:wx_object()
.br
.fi
.SH EXPORTS
.LP
.nf

.B
new(Window) -> wxBufferedPaintDC()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Window = wxWindow:wxWindow()
.br
.RE
.RE
.LP
.nf

.B
new(Window, Buffer) -> wxBufferedPaintDC()
.br
.fi
.br
.nf

.B
new(Window, Buffer :: [Option]) -> wxBufferedPaintDC()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Window = wxWindow:wxWindow()
.br
Option = {style, integer()}
.br
.RE
.RE
.RS
.RE
.LP
.nf

.B
new(Window, Buffer, Options :: [Option]) -> wxBufferedPaintDC()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Window = wxWindow:wxWindow()
.br
Buffer = wxBitmap:wxBitmap()
.br
Option = {style, integer()}
.br
.RE
.RE
.RS
.LP
As with \fIwxBufferedDC\fR\&, you may either provide the bitmap to be used for buffering or let this object create one internally (in the latter case, the size of the client part of the window is used)\&.
.LP
Pass wxBUFFER_CLIENT_AREA for the \fIstyle\fR\& parameter to indicate that just the client area of the window is buffered, or wxBUFFER_VIRTUAL_AREA to indicate that the buffer bitmap covers the virtual area\&.
.RE
.LP
.nf

.B
destroy(This :: wxBufferedPaintDC()) -> ok
.br
.fi
.br
.RS
.LP
Copies everything drawn on the DC so far to the window associated with this object, using a \fIwxPaintDC\fR\&\&.
.RE