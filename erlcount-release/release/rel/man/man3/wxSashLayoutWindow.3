.TH wxSashLayoutWindow 3 "wx 2.2.2" "wxWidgets team." "Erlang Module Definition"
.SH NAME
wxSashLayoutWindow \- Functions for wxSashLayoutWindow class
.SH DESCRIPTION
.LP
\fIwxSashLayoutWindow\fR\& responds to OnCalculateLayout events generated by \fIwxLayoutAlgorithm\fR\&\&. It allows the application to use simple accessors to specify how the window should be laid out, rather than having to respond to events\&.
.LP
The fact that the class derives from \fIwxSashWindow\fR\& allows sashes to be used if required, to allow the windows to be user-resizable\&.
.LP
The documentation for \fIwxLayoutAlgorithm\fR\& explains the purpose of this class in more detail\&.
.LP
For the window styles see \fIwxSashWindow\fR\&\&.
.LP
This class handles the EVT_QUERY_LAYOUT_INFO and EVT_CALCULATE_LAYOUT events for you\&. However, if you use sashes, see \fIwxSashWindow\fR\& for relevant event information\&. See also \fIwxLayoutAlgorithm\fR\& for information about the layout events\&.
.LP
See: \fIwxLayoutAlgorithm\fR\&, \fIwxSashWindow\fR\&, Overview events 
.LP
This class is derived (and can use functions) from: \fIwxSashWindow\fR\& \fIwxWindow\fR\& \fIwxEvtHandler\fR\&
.LP
wxWidgets docs: wxSashLayoutWindow
.SH DATA TYPES
.nf

\fBwxSashLayoutWindow()\fR\& = wx:wx_object()
.br
.fi
.SH EXPORTS
.LP
.nf

.B
new() -> wxSashLayoutWindow()
.br
.fi
.br
.RS
.LP
Default ctor\&.
.RE
.LP
.nf

.B
new(Parent) -> wxSashLayoutWindow()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Parent = wxWindow:wxWindow()
.br
.RE
.RE
.LP
.nf

.B
new(Parent, Options :: [Option]) -> wxSashLayoutWindow()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Parent = wxWindow:wxWindow()
.br
Option = 
.br
    {id, integer()} |
.br
    {pos, {X :: integer(), Y :: integer()}} |
.br
    {size, {W :: integer(), H :: integer()}} |
.br
    {style, integer()}
.br
.RE
.RE
.RS
.LP
Constructs a sash layout window, which can be a child of a frame, dialog or any other non-control window\&.
.RE
.LP
.nf

.B
create(This, Parent) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSashLayoutWindow()
.br
Parent = wxWindow:wxWindow()
.br
.RE
.RE
.LP
.nf

.B
create(This, Parent, Options :: [Option]) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSashLayoutWindow()
.br
Parent = wxWindow:wxWindow()
.br
Option = 
.br
    {id, integer()} |
.br
    {pos, {X :: integer(), Y :: integer()}} |
.br
    {size, {W :: integer(), H :: integer()}} |
.br
    {style, integer()}
.br
.RE
.RE
.RS
.LP
Initializes a sash layout window, which can be a child of a frame, dialog or any other non-control window\&.
.RE
.LP
.nf

.B
getAlignment(This) -> wx:wx_enum()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSashLayoutWindow()
.br
.RE
.RE
.RS
.LP
Returns the alignment of the window: one of wxLAYOUT_TOP, wxLAYOUT_LEFT, wxLAYOUT_RIGHT, wxLAYOUT_BOTTOM\&.
.RE
.LP
.nf

.B
getOrientation(This) -> wx:wx_enum()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSashLayoutWindow()
.br
.RE
.RE
.RS
.LP
Returns the orientation of the window: one of wxLAYOUT_HORIZONTAL, wxLAYOUT_VERTICAL\&.
.RE
.LP
.nf

.B
setAlignment(This, Alignment) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSashLayoutWindow()
.br
Alignment = wx:wx_enum()
.br
.RE
.RE
.RS
.LP
Sets the alignment of the window (which edge of the available parent client area the window is attached to)\&.
.LP
\fIalignment\fR\& is one of wxLAYOUT_TOP, wxLAYOUT_LEFT, wxLAYOUT_RIGHT, wxLAYOUT_BOTTOM\&.
.RE
.LP
.nf

.B
setDefaultSize(This, Size) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSashLayoutWindow()
.br
Size = {W :: integer(), H :: integer()}
.br
.RE
.RE
.RS
.LP
Sets the default dimensions of the window\&.
.LP
The dimension other than the orientation will be fixed to this value, and the orientation dimension will be ignored and the window stretched to fit the available space\&.
.RE
.LP
.nf

.B
setOrientation(This, Orientation) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSashLayoutWindow()
.br
Orientation = wx:wx_enum()
.br
.RE
.RE
.RS
.LP
Sets the orientation of the window (the direction the window will stretch in, to fill the available parent client area)\&.
.LP
\fIorientation\fR\& is one of wxLAYOUT_HORIZONTAL, wxLAYOUT_VERTICAL\&.
.RE
.LP
.nf

.B
destroy(This :: wxSashLayoutWindow()) -> ok
.br
.fi
.br
.RS
.LP
Destroys the object\&.
.RE