.TH wxEvtHandler 3 "wx 2.2.2" "wxWidgets team." "Erlang Module Definition"
.SH NAME
wxEvtHandler \- Functions for wxEvtHandler class
.SH DESCRIPTION
.LP
A class that can handle events from the windowing system\&. \fIwxWindow\fR\& is (and therefore all window classes are) derived from this class\&.
.LP
To get events from wxwidgets objects you subscribe to them by calling \fIconnect/3\fR\&\&.
.LP
If the \fIcallback\fR\& option is not supplied events are sent as messages\&.
.LP
These messages will be \fI#wx{}\fR\& where \fIEventRecord\fR\& is a record that depends on the \fIwxEventType\fR\&\&. The records are defined in: \fIwx/include/wx\&.hrl\fR\&\&.
.LP
If a callback was supplied to connect, the callback will be invoked (in another process) to handle the event\&. The callback should be of arity 2\&.
.LP
\fIfun Callback (EventRecord::wx(), EventObject::wxObject())\&. \fR\& 
.LP
Note: The callback will be in executed in new process each time\&.
.LP
See: Overview events 
.LP
wxWidgets docs: wxEvtHandler
.SH DATA TYPES
.nf

\fBwxEvtHandler()\fR\& = wx:wx_object()
.br
.fi
.nf

\fBwxEventType()\fR\& = 
.br
    wxActivateEvent:wxActivateEventType() |
.br
    wxAuiManagerEvent:wxAuiManagerEventType() |
.br
    wxAuiNotebookEvent:wxAuiNotebookEventType() |
.br
    wxBookCtrlEvent:wxBookCtrlEventType() |
.br
    wxCalendarEvent:wxCalendarEventType() |
.br
    wxChildFocusEvent:wxChildFocusEventType() |
.br
    wxClipboardTextEvent:wxClipboardTextEventType() |
.br
    wxCloseEvent:wxCloseEventType() |
.br
    wxColourPickerEvent:wxColourPickerEventType() |
.br
    wxCommandEvent:wxCommandEventType() |
.br
    wxContextMenuEvent:wxContextMenuEventType() |
.br
    wxDateEvent:wxDateEventType() |
.br
    wxDisplayChangedEvent:wxDisplayChangedEventType() |
.br
    wxDropFilesEvent:wxDropFilesEventType() |
.br
    wxEraseEvent:wxEraseEventType() |
.br
    wxFileDirPickerEvent:wxFileDirPickerEventType() |
.br
    wxFocusEvent:wxFocusEventType() |
.br
    wxFontPickerEvent:wxFontPickerEventType() |
.br
    wxGridEvent:wxGridEventType() |
.br
    wxHelpEvent:wxHelpEventType() |
.br
    wxHtmlLinkEvent:wxHtmlLinkEventType() |
.br
    wxIconizeEvent:wxIconizeEventType() |
.br
    wxIdleEvent:wxIdleEventType() |
.br
    wxInitDialogEvent:wxInitDialogEventType() |
.br
    wxJoystickEvent:wxJoystickEventType() |
.br
    wxKeyEvent:wxKeyEventType() |
.br
    wxListEvent:wxListEventType() |
.br
    wxMaximizeEvent:wxMaximizeEventType() |
.br
    wxMenuEvent:wxMenuEventType() |
.br
    wxMouseCaptureChangedEvent:wxMouseCaptureChangedEventType() |
.br
    wxMouseCaptureLostEvent:wxMouseCaptureLostEventType() |
.br
    wxMouseEvent:wxMouseEventType() |
.br
    wxMoveEvent:wxMoveEventType() |
.br
    wxNavigationKeyEvent:wxNavigationKeyEventType() |
.br
    wxPaintEvent:wxPaintEventType() |
.br
    wxPaletteChangedEvent:wxPaletteChangedEventType() |
.br
    wxQueryNewPaletteEvent:wxQueryNewPaletteEventType() |
.br
    wxSashEvent:wxSashEventType() |
.br
    wxScrollEvent:wxScrollEventType() |
.br
    wxScrollWinEvent:wxScrollWinEventType() |
.br
    wxSetCursorEvent:wxSetCursorEventType() |
.br
    wxShowEvent:wxShowEventType() |
.br
    wxSizeEvent:wxSizeEventType() |
.br
    wxSpinEvent:wxSpinEventType() |
.br
    wxSplitterEvent:wxSplitterEventType() |
.br
    wxStyledTextEvent:wxStyledTextEventType() |
.br
    wxSysColourChangedEvent:wxSysColourChangedEventType() |
.br
    wxTaskBarIconEvent:wxTaskBarIconEventType() |
.br
    wxTreeEvent:wxTreeEventType() |
.br
    wxUpdateUIEvent:wxUpdateUIEventType() |
.br
    wxWebViewEvent:wxWebViewEventType() |
.br
    wxWindowCreateEvent:wxWindowCreateEventType() |
.br
    wxWindowDestroyEvent:wxWindowDestroyEventType()
.br
.fi
.nf

\fBwx()\fR\& = 
.br
    #wx{id = integer(),
.br
        obj = wx:wx_object(),
.br
        userData = term(),
.br
        event = event()}
.br
.fi
.nf

\fBevent()\fR\& = 
.br
    wxActivateEvent:wxActivate() |
.br
    wxAuiManagerEvent:wxAuiManager() |
.br
    wxAuiNotebookEvent:wxAuiNotebook() |
.br
    wxBookCtrlEvent:wxBookCtrl() |
.br
    wxCalendarEvent:wxCalendar() |
.br
    wxChildFocusEvent:wxChildFocus() |
.br
    wxClipboardTextEvent:wxClipboardText() |
.br
    wxCloseEvent:wxClose() |
.br
    wxColourPickerEvent:wxColourPicker() |
.br
    wxCommandEvent:wxCommand() |
.br
    wxContextMenuEvent:wxContextMenu() |
.br
    wxDateEvent:wxDate() |
.br
    wxDisplayChangedEvent:wxDisplayChanged() |
.br
    wxDropFilesEvent:wxDropFiles() |
.br
    wxEraseEvent:wxErase() |
.br
    wxFileDirPickerEvent:wxFileDirPicker() |
.br
    wxFocusEvent:wxFocus() |
.br
    wxFontPickerEvent:wxFontPicker() |
.br
    wxGridEvent:wxGrid() |
.br
    wxHelpEvent:wxHelp() |
.br
    wxHtmlLinkEvent:wxHtmlLink() |
.br
    wxIconizeEvent:wxIconize() |
.br
    wxIdleEvent:wxIdle() |
.br
    wxInitDialogEvent:wxInitDialog() |
.br
    wxJoystickEvent:wxJoystick() |
.br
    wxKeyEvent:wxKey() |
.br
    wxListEvent:wxList() |
.br
    wxMaximizeEvent:wxMaximize() |
.br
    wxMenuEvent:wxMenu() |
.br
    wxMouseCaptureChangedEvent:wxMouseCaptureChanged() |
.br
    wxMouseCaptureLostEvent:wxMouseCaptureLost() |
.br
    wxMouseEvent:wxMouse() |
.br
    wxMoveEvent:wxMove() |
.br
    wxNavigationKeyEvent:wxNavigationKey() |
.br
    wxPaintEvent:wxPaint() |
.br
    wxPaletteChangedEvent:wxPaletteChanged() |
.br
    wxQueryNewPaletteEvent:wxQueryNewPalette() |
.br
    wxSashEvent:wxSash() |
.br
    wxScrollEvent:wxScroll() |
.br
    wxScrollWinEvent:wxScrollWin() |
.br
    wxSetCursorEvent:wxSetCursor() |
.br
    wxShowEvent:wxShow() |
.br
    wxSizeEvent:wxSize() |
.br
    wxSpinEvent:wxSpin() |
.br
    wxSplitterEvent:wxSplitter() |
.br
    wxStyledTextEvent:wxStyledText() |
.br
    wxSysColourChangedEvent:wxSysColourChanged() |
.br
    wxTaskBarIconEvent:wxTaskBarIcon() |
.br
    wxTreeEvent:wxTree() |
.br
    wxUpdateUIEvent:wxUpdateUI() |
.br
    wxWebViewEvent:wxWebView() |
.br
    wxWindowCreateEvent:wxWindowCreate() |
.br
    wxWindowDestroyEvent:wxWindowDestroy()
.br
.fi
.SH EXPORTS
.LP
.nf

.B
connect(This :: wxEvtHandler(), EventType :: wxEventType()) -> ok
.br
.fi
.br
.LP
.nf

.B
connect(This :: wxEvtHandler(),
.B
        EventType :: wxEventType(),
.B
        Options :: [Option]) ->
.B
           ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Option = 
.br
    {id, integer()} |
.br
    {lastId, integer()} |
.br
    {skip, boolean()} |
.br
    callback |
.br
    {callback, function()} |
.br
    {userData, term()}
.br
.RE
.RE
.RS
.LP
This function subscribes to events\&.
.LP
Subscribes to events of type \fIEventType\fR\&, in the range \fIid\fR\&, \fIlastId\fR\&\&.
.LP
The events will be received as messages if no callback is supplied\&.
.LP
Options
.LP
id:\fI{id, integer()} \fR\& The identifier (or first of the identifier range) to be associated with this event handler\&. Default is ?wxID_ANY
.LP
lastid:\fI{lastId,integer()} \fR\& The second part of the identifier range\&. If used \&'id\&' must be set as the starting identifier range\&. Default is ?wxID_ANY
.LP
skip:\fI{skip,boolean()} \fR\& If skip is true further event_handlers will be called\&. This is not used if the \&'callback\&' option is used\&. Default is \fIfalse\fR\&\&.
.LP
callback:\fI{callback,function()} \fR\& Use a callback\fIfun(EventRecord::wx(),EventObject::wxObject()) \fR\& to process the event\&. Default not specified i\&.e\&. a message will be delivered to the process calling this function\&.
.LP
userData:\fI{userData,term()} \fR\& An erlang term that will be sent with the event\&. Default: []\&.
.RE
.LP
.nf

.B
disconnect(This :: wxEvtHandler()) -> boolean()
.br
.fi
.br
.RS
.RE
.LP
.nf

.B
disconnect(This :: wxEvtHandler(), EventType :: wxEventType()) ->
.B
              boolean()
.br
.fi
.br
.RS
.RE
.LP
.nf

.B
disconnect(This :: wxEvtHandler(),
.B
           EventType :: wxEventType(),
.B
           Opts :: [Option]) ->
.B
              boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Option = 
.br
    {id, integer()} | {lastId, integer()} | {callback, function()}
.br
.RE
.RE
.RS
.LP
This function unsubscribes the process or callback fun from the event handler\&.
.LP
EventType may be the atom \&'null\&' to match any eventtype\&. Notice that the options skip and userdata is not used to match the eventhandler\&.
.RE