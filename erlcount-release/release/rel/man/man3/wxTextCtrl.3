.TH wxTextCtrl 3 "wx 2.2.2" "wxWidgets team." "Erlang Module Definition"
.SH NAME
wxTextCtrl \- Functions for wxTextCtrl class
.SH DESCRIPTION
.LP
A text control allows text to be displayed and edited\&.
.LP
It may be single line or multi-line\&. Notice that a lot of methods of the text controls are found in the base \fIwxTextEntry\fR\& (not implemented in wx) class which is a common base class for \fIwxTextCtrl\fR\& and other controls using a single line text entry field (e\&.g\&. \fIwxComboBox\fR\&)\&.
.LP
Styles
.LP
This class supports the following styles:
.LP
wxTextCtrl Text Format
.LP
The multiline text controls always store the text as a sequence of lines separated by \fI\&'\\n\&'\fR\& characters, i\&.e\&. in the Unix text format even on non-Unix platforms\&. This allows the user code to ignore the differences between the platforms but at a price: the indices in the control such as those returned by \fIgetInsertionPoint/1\fR\& or \fIgetSelection/1\fR\& can \fInot\fR\& be used as indices into the string returned by \fIgetValue/1\fR\& as they\&'re going to be slightly off for platforms using \fI"\\\\r\\\\n"\fR\& as separator (as Windows does)\&.
.LP
Instead, if you need to obtain a substring between the 2 indices obtained from the control with the help of the functions mentioned above, you should use \fIgetRange/3\fR\&\&. And the indices themselves can only be passed to other methods, for example \fIsetInsertionPoint/2\fR\& or \fIsetSelection/3\fR\&\&.
.LP
To summarize: never use the indices returned by (multiline) \fIwxTextCtrl\fR\& as indices into the string it contains, but only as arguments to be passed back to the other \fIwxTextCtrl\fR\& methods\&. This problem doesn\&'t arise for single-line platforms however where the indices in the control do correspond to the positions in the value string\&.
.LP
wxTextCtrl Positions and Coordinates
.LP
It is possible to use either linear positions, i\&.e\&. roughly (but \fInot\fR\& always exactly, as explained in the previous section) the index of the character in the text contained in the control or X-Y coordinates, i\&.e\&. column and line of the character when working with this class and it provides the functions \fIpositionToXY/2\fR\& and \fIxYToPosition/3\fR\& to convert between the two\&.
.LP
Additionally, a position in the control can be converted to its coordinates in pixels using \fIPositionToCoords()\fR\& (not implemented in wx) which can be useful to e\&.g\&. show a popup menu near the given character\&. And, in the other direction, \fIHitTest()\fR\& (not implemented in wx) can be used to find the character under, or near, the given pixel coordinates\&.
.LP
To be more precise, positions actually refer to the gaps between characters and not the characters themselves\&. Thus, position 0 is the one before the very first character in the control and so is a valid position even when the control is empty\&. And if the control contains a single character, it has two valid positions: 0 before this character and 1 - after it\&. This, when the documentation of various functions mentions "invalid position", it doesn\&'t consider the position just after the last character of the line to be invalid, only the positions beyond that one (e\&.g\&. 2 and greater in the single character example) are actually invalid\&.
.LP
wxTextCtrl Styles\&.
.LP
Multi-line text controls support styling, i\&.e\&. provide a possibility to set colours and font for individual characters in it (note that under Windows \fIwxTE_RICH\fR\& style is required for style support)\&. To use the styles you can either call \fIsetDefaultStyle/2\fR\& before inserting the text or call \fIsetStyle/4\fR\& later to change the style of the text already in the control (the first solution is much more efficient)\&.
.LP
In either case, if the style doesn\&'t specify some of the attributes (for example you only want to set the text colour but without changing the font nor the text background), the values of the default style will be used for them\&. If there is no default style, the attributes of the text control itself are used\&.
.LP
So the following code correctly describes what it does: the second call to \fIsetDefaultStyle/2\fR\& doesn\&'t change the text foreground colour (which stays red) while the last one doesn\&'t change the background colour (which stays grey):
.LP
wxTextCtrl and C++ Streams
.LP
This class multiply-inherits from \fIstd::streambuf\fR\& (except for some really old compilers using non-standard iostream library), allowing code such as the following:
.LP
Note that even if your build of wxWidgets doesn\&'t support this (the symbol \fIwxHAS_TEXT_WINDOW_STREAM\fR\& has value of 0 then) you can still use \fIwxTextCtrl\fR\& itself in a stream-like manner:
.LP
However the possibility to create a \fIstd::ostream\fR\& associated with \fIwxTextCtrl\fR\& may be useful if you need to redirect the output of a function taking a \fIstd::ostream\fR\& as parameter to a text control\&.
.LP
Another commonly requested need is to redirect \fIstd::cout\fR\& to the text control\&. This may be done in the following way:
.LP
But wxWidgets provides a convenient class to make it even simpler so instead you may just do
.LP
See \fIwxStreamToTextRedirector\fR\& (not implemented in wx) for more details\&.
.LP
Event Handling\&.
.LP
The following commands are processed by default event handlers in \fIwxTextCtrl\fR\&: \fIwxID_CUT\fR\&, \fIwxID_COPY\fR\&, \fIwxID_PASTE\fR\&, \fIwxID_UNDO\fR\&, \fIwxID_REDO\fR\&\&. The associated UI update events are also processed automatically, when the control has the focus\&.
.LP
See: \fIcreate/4\fR\&, \fIwxValidator\fR\& (not implemented in wx)
.LP
This class is derived (and can use functions) from: \fIwxControl\fR\& \fIwxWindow\fR\& \fIwxEvtHandler\fR\&
.LP
wxWidgets docs: wxTextCtrl
.SH "EVENTS"

.LP
Event types emitted from this class: \fIcommand_text_updated\fR\&, \fIcommand_text_enter\fR\&, \fItext_maxlen\fR\&
.SH DATA TYPES
.nf

\fBwxTextCtrl()\fR\& = wx:wx_object()
.br
.fi
.SH EXPORTS
.LP
.nf

.B
new() -> wxTextCtrl()
.br
.fi
.br
.RS
.LP
Default ctor\&.
.RE
.LP
.nf

.B
new(Parent, Id) -> wxTextCtrl()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Parent = wxWindow:wxWindow()
.br
Id = integer()
.br
.RE
.RE
.LP
.nf

.B
new(Parent, Id, Options :: [Option]) -> wxTextCtrl()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Parent = wxWindow:wxWindow()
.br
Id = integer()
.br
Option = 
.br
    {value, unicode:chardata()} |
.br
    {pos, {X :: integer(), Y :: integer()}} |
.br
    {size, {W :: integer(), H :: integer()}} |
.br
    {style, integer()} |
.br
    {validator, wx:wx_object()}
.br
.RE
.RE
.RS
.LP
Constructor, creating and showing a text control\&.
.LP
Remark: The horizontal scrollbar (wxHSCROLL style flag) will only be created for multi-line text controls\&. Without a horizontal scrollbar, text lines that don\&'t fit in the control\&'s size will be wrapped (but no newline character is inserted)\&. Single line controls don\&'t have a horizontal scrollbar, the text is automatically scrolled so that the insertion point is always visible\&.
.LP
See: \fIcreate/4\fR\&, \fIwxValidator\fR\& (not implemented in wx)
.RE
.LP
.nf

.B
destroy(This :: wxTextCtrl()) -> ok
.br
.fi
.br
.RS
.LP
Destructor, destroying the text control\&.
.RE
.LP
.nf

.B
appendText(This, Text) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Text = unicode:chardata()
.br
.RE
.RE
.RS
.LP
Appends the text to the end of the text control\&.
.LP
Remark: After the text is appended, the insertion point will be at the end of the text control\&. If this behaviour is not desired, the programmer should use \fIgetInsertionPoint/1\fR\& and \fIsetInsertionPoint/2\fR\&\&.
.LP
See: \fIwriteText/2\fR\& 
.RE
.LP
.nf

.B
canCopy(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
Returns true if the selection can be copied to the clipboard\&.
.RE
.LP
.nf

.B
canCut(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
Returns true if the selection can be cut to the clipboard\&.
.RE
.LP
.nf

.B
canPaste(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
Returns true if the contents of the clipboard can be pasted into the text control\&.
.LP
On some platforms (Motif, GTK) this is an approximation and returns true if the control is editable, false otherwise\&.
.RE
.LP
.nf

.B
canRedo(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
Returns true if there is a redo facility available and the last operation can be redone\&.
.RE
.LP
.nf

.B
canUndo(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
Returns true if there is an undo facility available and the last operation can be undone\&.
.RE
.LP
.nf

.B
clear(This) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
Clears the text in the control\&.
.LP
Note that this function will generate a \fIwxEVT_TEXT\fR\& event, i\&.e\&. its effect is identical to calling \fISetValue\fR\&("")\&.
.RE
.LP
.nf

.B
copy(This) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
Copies the selected text to the clipboard\&.
.RE
.LP
.nf

.B
create(This, Parent, Id) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Parent = wxWindow:wxWindow()
.br
Id = integer()
.br
.RE
.RE
.LP
.nf

.B
create(This, Parent, Id, Options :: [Option]) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Parent = wxWindow:wxWindow()
.br
Id = integer()
.br
Option = 
.br
    {value, unicode:chardata()} |
.br
    {pos, {X :: integer(), Y :: integer()}} |
.br
    {size, {W :: integer(), H :: integer()}} |
.br
    {style, integer()} |
.br
    {validator, wx:wx_object()}
.br
.RE
.RE
.RS
.LP
Creates the text control for two-step construction\&.
.LP
This method should be called if the default constructor was used for the control creation\&. Its parameters have the same meaning as for the non-default constructor\&.
.RE
.LP
.nf

.B
cut(This) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
Copies the selected text to the clipboard and removes it from the control\&.
.RE
.LP
.nf

.B
discardEdits(This) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
Resets the internal modified flag as if the current changes had been saved\&.
.RE
.LP
.nf

.B
changeValue(This, Value) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Value = unicode:chardata()
.br
.RE
.RE
.RS
.LP
Sets the new text control value\&.
.LP
It also marks the control as not-modified which means that IsModified() would return false immediately after the call to \fIchangeValue/2\fR\&\&.
.LP
The insertion point is set to the start of the control (i\&.e\&. position 0) by this function\&.
.LP
This functions does not generate the \fIwxEVT_TEXT\fR\& event but otherwise is identical to \fIsetValue/2\fR\&\&.
.LP
See overview_events_prog for more information\&.
.LP
Since: 2\&.7\&.1
.RE
.LP
.nf

.B
emulateKeyPress(This, Event) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Event = wxKeyEvent:wxKeyEvent()
.br
.RE
.RE
.RS
.LP
This function inserts into the control the character which would have been inserted if the given key event had occurred in the text control\&.
.LP
The \fIevent\fR\& object should be the same as the one passed to \fIEVT_KEY_DOWN\fR\& handler previously by wxWidgets\&. Please note that this function doesn\&'t currently work correctly for all keys under any platform but MSW\&.
.LP
Return: true if the event resulted in a change to the control, false otherwise\&.
.RE
.LP
.nf

.B
getDefaultStyle(This) -> wxTextAttr:wxTextAttr()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
Returns the style currently used for the new text\&.
.LP
See: \fIsetDefaultStyle/2\fR\& 
.RE
.LP
.nf

.B
getInsertionPoint(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
Returns the insertion point, or cursor, position\&.
.LP
This is defined as the zero based index of the character position to the right of the insertion point\&. For example, if the insertion point is at the end of the single-line text control, it is equal to \fIgetLastPosition/1\fR\&\&.
.LP
Notice that insertion position is, in general, different from the index of the character the cursor position at in the string returned by \fIgetValue/1\fR\&\&. While this is always the case for the single line controls, multi-line controls can use two characters \fI"\\\\r\\\\n"\fR\& as line separator (this is notably the case under MSW) meaning that indices in the control and its string value are offset by 1 for every line\&.
.LP
Hence to correctly get the character at the current cursor position, taking into account that there can be none if the cursor is at the end of the string, you could do the following:
.RE
.LP
.nf

.B
getLastPosition(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
Returns the zero based index of the last position in the text control, which is equal to the number of characters in the control\&.
.RE
.LP
.nf

.B
getLineLength(This, LineNo) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
LineNo = integer()
.br
.RE
.RE
.RS
.LP
Gets the length of the specified line, not including any trailing newline character(s)\&.
.LP
Return: The length of the line, or -1 if \fIlineNo\fR\& was invalid\&.
.RE
.LP
.nf

.B
getLineText(This, LineNo) -> unicode:charlist()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
LineNo = integer()
.br
.RE
.RE
.RS
.LP
Returns the contents of a given line in the text control, not including any trailing newline character(s)\&.
.LP
Return: The contents of the line\&.
.RE
.LP
.nf

.B
getNumberOfLines(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
Returns the number of lines in the text control buffer\&.
.LP
The returned number is the number of logical lines, i\&.e\&. just the count of the number of newline characters in the control + 1, for wxGTK and wxOSX/Cocoa ports while it is the number of physical lines, i\&.e\&. the count of lines actually shown in the control, in wxMSW\&. Because of this discrepancy, it is not recommended to use this function\&.
.LP
Remark: Note that even empty text controls have one line (where the insertion point is), so \fIgetNumberOfLines/1\fR\& never returns 0\&.
.RE
.LP
.nf

.B
getRange(This, From, To) -> unicode:charlist()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
From = To = integer()
.br
.RE
.RE
.RS
.LP
Returns the string containing the text starting in the positions \fIfrom\fR\& and up to \fIto\fR\& in the control\&.
.LP
The positions must have been returned by another \fIwxTextCtrl\fR\& method\&. Please note that the positions in a multiline \fIwxTextCtrl\fR\& do \fInot\fR\& correspond to the indices in the string returned by \fIgetValue/1\fR\& because of the different new line representations (\fICR\fR\& or \fICR\fR\& LF) and so this method should be used to obtain the correct results instead of extracting parts of the entire value\&. It may also be more efficient, especially if the control contains a lot of data\&.
.RE
.LP
.nf

.B
getSelection(This) -> {From :: integer(), To :: integer()}
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
Gets the current selection span\&.
.LP
If the returned values are equal, there was no selection\&. Please note that the indices returned may be used with the other \fIwxTextCtrl\fR\& methods but don\&'t necessarily represent the correct indices into the string returned by \fIgetValue/1\fR\& for multiline controls under Windows (at least,) you should use \fIgetStringSelection/1\fR\& to get the selected text\&.
.RE
.LP
.nf

.B
getStringSelection(This) -> unicode:charlist()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
Gets the text currently selected in the control\&.
.LP
If there is no selection, the returned string is empty\&.
.RE
.LP
.nf

.B
getStyle(This, Position, Style) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Position = integer()
.br
Style = wxTextAttr:wxTextAttr()
.br
.RE
.RE
.RS
.LP
Returns the style at this position in the text control\&.
.LP
Not all platforms support this function\&.
.LP
Return: true on success, false if an error occurred (this may also mean that the styles are not supported under this platform)\&.
.LP
See: \fIsetStyle/4\fR\&, \fIwxTextAttr\fR\& 
.RE
.LP
.nf

.B
getValue(This) -> unicode:charlist()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
Gets the contents of the control\&.
.LP
Notice that for a multiline text control, the lines will be separated by (Unix-style) \fI\\n\fR\& characters, even under Windows where they are separated by a \fI\\r\\n\fR\& sequence in the native control\&.
.RE
.LP
.nf

.B
isEditable(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
Returns true if the controls contents may be edited by user (note that it always can be changed by the program)\&.
.LP
In other words, this functions returns true if the control hasn\&'t been put in read-only mode by a previous call to \fIsetEditable/2\fR\&\&.
.RE
.LP
.nf

.B
isModified(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
Returns true if the text has been modified by user\&.
.LP
Note that calling \fIsetValue/2\fR\& doesn\&'t make the control modified\&.
.LP
See: \fImarkDirty/1\fR\& 
.RE
.LP
.nf

.B
isMultiLine(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
Returns true if this is a multi line edit control and false otherwise\&.
.LP
See: \fIisSingleLine/1\fR\& 
.RE
.LP
.nf

.B
isSingleLine(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
Returns true if this is a single line edit control and false otherwise\&.
.LP
See: \fIisSingleLine/1\fR\&, \fIisMultiLine/1\fR\& 
.RE
.LP
.nf

.B
loadFile(This, Filename) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Filename = unicode:chardata()
.br
.RE
.RE
.LP
.nf

.B
loadFile(This, Filename, Options :: [Option]) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Filename = unicode:chardata()
.br
Option = {fileType, integer()}
.br
.RE
.RE
.RS
.LP
Loads and displays the named file, if it exists\&.
.LP
Return: true if successful, false otherwise\&.
.RE
.LP
.nf

.B
markDirty(This) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
Mark text as modified (dirty)\&.
.LP
See: \fIisModified/1\fR\& 
.RE
.LP
.nf

.B
paste(This) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
Pastes text from the clipboard to the text item\&.
.RE
.LP
.nf

.B
positionToXY(This, Pos) -> Result
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Result = {Res :: boolean(), X :: integer(), Y :: integer()}
.br
This = wxTextCtrl()
.br
Pos = integer()
.br
.RE
.RE
.RS
.LP
Converts given position to a zero-based column, line number pair\&.
.LP
Return: true on success, false on failure (most likely due to a too large position parameter)\&.
.LP
See: \fIxYToPosition/3\fR\& 
.RE
.LP
.nf

.B
redo(This) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
If there is a redo facility and the last operation can be redone, redoes the last operation\&.
.LP
Does nothing if there is no redo facility\&.
.RE
.LP
.nf

.B
remove(This, From, To) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
From = To = integer()
.br
.RE
.RE
.RS
.LP
Removes the text starting at the first given position up to (but not including) the character at the last position\&.
.LP
This function puts the current insertion point position at \fIto\fR\& as a side effect\&.
.RE
.LP
.nf

.B
replace(This, From, To, Value) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
From = To = integer()
.br
Value = unicode:chardata()
.br
.RE
.RE
.RS
.LP
Replaces the text starting at the first position up to (but not including) the character at the last position with the given text\&.
.LP
This function puts the current insertion point position at \fIto\fR\& as a side effect\&.
.RE
.LP
.nf

.B
saveFile(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.LP
.nf

.B
saveFile(This, Options :: [Option]) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Option = {file, unicode:chardata()} | {fileType, integer()}
.br
.RE
.RE
.RS
.LP
Saves the contents of the control in a text file\&.
.LP
Return: true if the operation was successful, false otherwise\&.
.RE
.LP
.nf

.B
setDefaultStyle(This, Style) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Style = wxTextAttr:wxTextAttr()
.br
.RE
.RE
.RS
.LP
Changes the default style to use for the new text which is going to be added to the control\&.
.LP
This applies both to the text added programmatically using \fIwriteText/2\fR\& or \fIappendText/2\fR\& and to the text entered by the user interactively\&.
.LP
If either of the font, foreground, or background colour is not set in \fIstyle\fR\&, the values of the previous default style are used for them\&. If the previous default style didn\&'t set them neither, the global font or colours of the text control itself are used as fall back\&.
.LP
However if the \fIstyle\fR\& parameter is the default \fIwxTextAttr\fR\&, then the default style is just reset (instead of being combined with the new style which wouldn\&'t change it at all)\&.
.LP
Return: true on success, false if an error occurred (this may also mean that the styles are not supported under this platform)\&.
.LP
See: \fIgetDefaultStyle/1\fR\& 
.RE
.LP
.nf

.B
setEditable(This, Editable) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Editable = boolean()
.br
.RE
.RE
.RS
.LP
Makes the text item editable or read-only, overriding the \fIwxTE_READONLY\fR\& flag\&.
.LP
See: \fIisEditable/1\fR\& 
.RE
.LP
.nf

.B
setInsertionPoint(This, Pos) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Pos = integer()
.br
.RE
.RE
.RS
.LP
Sets the insertion point at the given position\&.
.RE
.LP
.nf

.B
setInsertionPointEnd(This) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
Sets the insertion point at the end of the text control\&.
.LP
This is equivalent to calling \fIsetInsertionPoint/2\fR\& with \fIgetLastPosition/1\fR\& argument\&.
.RE
.LP
.nf

.B
setMaxLength(This, Len) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Len = integer()
.br
.RE
.RE
.RS
.LP
This function sets the maximum number of characters the user can enter into the control\&.
.LP
In other words, it allows limiting the text value length to \fIlen\fR\& not counting the terminating \fINUL\fR\& character\&.
.LP
If \fIlen\fR\& is 0, the previously set max length limit, if any, is discarded and the user may enter as much text as the underlying native text control widget supports (typically at least 32Kb)\&. If the user tries to enter more characters into the text control when it already is filled up to the maximal length, a \fIwxEVT_TEXT_MAXLEN\fR\& event is sent to notify the program about it (giving it the possibility to show an explanatory message, for example) and the extra input is discarded\&.
.LP
Note that in wxGTK this function may only be used with single line text controls\&.
.RE
.LP
.nf

.B
setSelection(This, From, To) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
From = To = integer()
.br
.RE
.RE
.RS
.LP
Selects the text starting at the first position up to (but not including) the character at the last position\&.
.LP
If both parameters are equal to -1 all text in the control is selected\&.
.LP
Notice that the insertion point will be moved to \fIfrom\fR\& by this function\&.
.LP
See: \fISelectAll()\fR\& (not implemented in wx)
.RE
.LP
.nf

.B
setStyle(This, Start, End, Style) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Start = End = integer()
.br
Style = wxTextAttr:wxTextAttr()
.br
.RE
.RE
.RS
.LP
Changes the style of the given range\&.
.LP
If any attribute within \fIstyle\fR\& is not set, the corresponding attribute from \fIgetDefaultStyle/1\fR\& is used\&.
.LP
Return: true on success, false if an error occurred (this may also mean that the styles are not supported under this platform)\&.
.LP
See: \fIgetStyle/3\fR\&, \fIwxTextAttr\fR\& 
.RE
.LP
.nf

.B
setValue(This, Value) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Value = unicode:chardata()
.br
.RE
.RE
.RS
.LP
Sets the new text control value\&.
.LP
It also marks the control as not-modified which means that IsModified() would return false immediately after the call to \fIsetValue/2\fR\&\&.
.LP
The insertion point is set to the start of the control (i\&.e\&. position 0) by this function unless the control value doesn\&'t change at all, in which case the insertion point is left at its original position\&.
.LP
Note that, unlike most other functions changing the controls values, this function generates a \fIwxEVT_TEXT\fR\& event\&. To avoid this you can use \fIchangeValue/2\fR\& instead\&.
.RE
.LP
.nf

.B
showPosition(This, Pos) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Pos = integer()
.br
.RE
.RE
.RS
.LP
Makes the line containing the given position visible\&.
.RE
.LP
.nf

.B
undo(This) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
If there is an undo facility and the last operation can be undone, undoes the last operation\&.
.LP
Does nothing if there is no undo facility\&.
.RE
.LP
.nf

.B
writeText(This, Text) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Text = unicode:chardata()
.br
.RE
.RE
.RS
.LP
Writes the text into the text control at the current insertion position\&.
.LP
Remark: Newlines in the text string are the only control characters allowed, and they will cause appropriate line breaks\&. See operator<<() and \fIappendText/2\fR\& for more convenient ways of writing to the window\&. After the write operation, the insertion point will be at the end of the inserted text, so subsequent write operations will be appended\&. To append text after the user may have interacted with the control, call \fIsetInsertionPointEnd/1\fR\& before writing\&.
.RE
.LP
.nf

.B
xYToPosition(This, X, Y) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
X = Y = integer()
.br
.RE
.RE
.RS
.LP
Converts the given zero based column and line number to a position\&.
.LP
Return: The position value, or -1 if x or y was invalid\&.
.RE