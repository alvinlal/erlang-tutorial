.TH wxFontPickerCtrl 3 "wx 2.2.2" "wxWidgets team." "Erlang Module Definition"
.SH NAME
wxFontPickerCtrl \- Functions for wxFontPickerCtrl class
.SH DESCRIPTION
.LP
This control allows the user to select a font\&. The generic implementation is a button which brings up a \fIwxFontDialog\fR\& when clicked\&. Native implementation may differ but this is usually a (small) widget which give access to the font-chooser dialog\&. It is only available if \fIwxUSE_FONTPICKERCTRL\fR\& is set to 1 (the default)\&.
.LP
Styles
.LP
This class supports the following styles:
.LP
See: \fIwxFontDialog\fR\&, \fIwxFontPickerEvent\fR\& 
.LP
This class is derived (and can use functions) from: \fIwxPickerBase\fR\& \fIwxControl\fR\& \fIwxWindow\fR\& \fIwxEvtHandler\fR\&
.LP
wxWidgets docs: wxFontPickerCtrl
.SH "EVENTS"

.LP
Event types emitted from this class: \fIcommand_fontpicker_changed\fR\&
.SH DATA TYPES
.nf

\fBwxFontPickerCtrl()\fR\& = wx:wx_object()
.br
.fi
.SH EXPORTS
.LP
.nf

.B
new() -> wxFontPickerCtrl()
.br
.fi
.br
.RS
.RE
.LP
.nf

.B
new(Parent, Id) -> wxFontPickerCtrl()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Parent = wxWindow:wxWindow()
.br
Id = integer()
.br
.RE
.RE
.LP
.nf

.B
new(Parent, Id, Options :: [Option]) -> wxFontPickerCtrl()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Parent = wxWindow:wxWindow()
.br
Id = integer()
.br
Option = 
.br
    {initial, wxFont:wxFont()} |
.br
    {pos, {X :: integer(), Y :: integer()}} |
.br
    {size, {W :: integer(), H :: integer()}} |
.br
    {style, integer()} |
.br
    {validator, wx:wx_object()}
.br
.RE
.RE
.RS
.LP
Initializes the object and calls \fIcreate/4\fR\& with all the parameters\&.
.RE
.LP
.nf

.B
create(This, Parent, Id) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxFontPickerCtrl()
.br
Parent = wxWindow:wxWindow()
.br
Id = integer()
.br
.RE
.RE
.LP
.nf

.B
create(This, Parent, Id, Options :: [Option]) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxFontPickerCtrl()
.br
Parent = wxWindow:wxWindow()
.br
Id = integer()
.br
Option = 
.br
    {initial, wxFont:wxFont()} |
.br
    {pos, {X :: integer(), Y :: integer()}} |
.br
    {size, {W :: integer(), H :: integer()}} |
.br
    {style, integer()} |
.br
    {validator, wx:wx_object()}
.br
.RE
.RE
.RS
.LP
Creates this widget with given parameters\&.
.LP
Return: true if the control was successfully created or false if creation failed\&.
.RE
.LP
.nf

.B
getSelectedFont(This) -> wxFont:wxFont()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxFontPickerCtrl()
.br
.RE
.RE
.RS
.LP
Returns the currently selected font\&.
.LP
Note that this function is completely different from \fIwxWindow:getFont/1\fR\&\&.
.RE
.LP
.nf

.B
setSelectedFont(This, Font) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxFontPickerCtrl()
.br
Font = wxFont:wxFont()
.br
.RE
.RE
.RS
.LP
Sets the currently selected font\&.
.LP
Note that this function is completely different from \fIwxWindow:setFont/2\fR\&\&.
.RE
.LP
.nf

.B
getMaxPointSize(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxFontPickerCtrl()
.br
.RE
.RE
.RS
.LP
Returns the maximum point size value allowed for the user-chosen font\&.
.RE
.LP
.nf

.B
setMaxPointSize(This, Max) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxFontPickerCtrl()
.br
Max = integer()
.br
.RE
.RE
.RS
.LP
Sets the maximum point size value allowed for the user-chosen font\&.
.LP
The default value is 100\&. Note that big fonts can require a lot of memory and CPU time both for creation and for rendering; thus, specially because the user has the option to specify the fontsize through a text control (see wxFNTP_USE_TEXTCTRL), it\&'s a good idea to put a limit to the maximum font size when huge fonts do not make much sense\&.
.RE
.LP
.nf

.B
destroy(This :: wxFontPickerCtrl()) -> ok
.br
.fi
.br
.RS
.LP
Destroys the object\&.
.RE