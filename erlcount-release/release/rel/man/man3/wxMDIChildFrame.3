.TH wxMDIChildFrame 3 "wx 2.2.2" "wxWidgets team." "Erlang Module Definition"
.SH NAME
wxMDIChildFrame \- Functions for wxMDIChildFrame class
.SH DESCRIPTION
.LP
An MDI child frame is a frame that can only exist inside a \fIwxMDIClientWindow\fR\&, which is itself a child of \fIwxMDIParentFrame\fR\&\&.
.LP
Styles
.LP
This class supports the following styles:
.LP
All of the standard \fIwxFrame\fR\& styles can be used but most of them are ignored by TDI-based MDI implementations\&.
.LP
Remark: Although internally an MDI child frame is a child of the MDI client window, in wxWidgets you create it as a child of \fIwxMDIParentFrame\fR\&\&. In fact, you can usually forget that the client window exists\&. MDI child frames are clipped to the area of the MDI client window, and may be iconized on the client window\&. You can associate a menubar with a child frame as usual, although an MDI child doesn\&'t display its menubar under its own title bar\&. The MDI parent frame\&'s menubar will be changed to reflect the currently active child frame\&. If there are currently no children, the parent frame\&'s own menubar will be displayed\&.
.LP
See: \fIwxMDIClientWindow\fR\&, \fIwxMDIParentFrame\fR\&, \fIwxFrame\fR\& 
.LP
This class is derived (and can use functions) from: \fIwxFrame\fR\& \fIwxTopLevelWindow\fR\& \fIwxWindow\fR\& \fIwxEvtHandler\fR\&
.LP
wxWidgets docs: wxMDIChildFrame
.SH DATA TYPES
.nf

\fBwxMDIChildFrame()\fR\& = wx:wx_object()
.br
.fi
.SH EXPORTS
.LP
.nf

.B
new() -> wxMDIChildFrame()
.br
.fi
.br
.RS
.LP
Default constructor\&.
.RE
.LP
.nf

.B
new(Parent, Id, Title) -> wxMDIChildFrame()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Parent = wxMDIParentFrame:wxMDIParentFrame()
.br
Id = integer()
.br
Title = unicode:chardata()
.br
.RE
.RE
.LP
.nf

.B
new(Parent, Id, Title, Options :: [Option]) -> wxMDIChildFrame()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Parent = wxMDIParentFrame:wxMDIParentFrame()
.br
Id = integer()
.br
Title = unicode:chardata()
.br
Option = 
.br
    {pos, {X :: integer(), Y :: integer()}} |
.br
    {size, {W :: integer(), H :: integer()}} |
.br
    {style, integer()}
.br
.RE
.RE
.RS
.LP
Constructor, creating the window\&.
.LP
See: \fIcreate/5\fR\& 
.RE
.LP
.nf

.B
destroy(This :: wxMDIChildFrame()) -> ok
.br
.fi
.br
.RS
.LP
Destructor\&.
.LP
Destroys all child windows and menu bar if present\&.
.RE
.LP
.nf

.B
activate(This) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMDIChildFrame()
.br
.RE
.RE
.RS
.LP
Activates this MDI child frame\&.
.LP
See: \fImaximize/2\fR\&, \fIrestore/1\fR\& 
.RE
.LP
.nf

.B
create(This, Parent, Id, Title) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMDIChildFrame()
.br
Parent = wxMDIParentFrame:wxMDIParentFrame()
.br
Id = integer()
.br
Title = unicode:chardata()
.br
.RE
.RE
.LP
.nf

.B
create(This, Parent, Id, Title, Options :: [Option]) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMDIChildFrame()
.br
Parent = wxMDIParentFrame:wxMDIParentFrame()
.br
Id = integer()
.br
Title = unicode:chardata()
.br
Option = 
.br
    {pos, {X :: integer(), Y :: integer()}} |
.br
    {size, {W :: integer(), H :: integer()}} |
.br
    {style, integer()}
.br
.RE
.RE
.RS
.LP
Used in two-step frame construction\&.
.LP
See \fInew/4\fR\& for further details\&.
.RE
.LP
.nf

.B
maximize(This) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMDIChildFrame()
.br
.RE
.RE
.LP
.nf

.B
maximize(This, Options :: [Option]) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMDIChildFrame()
.br
Option = {maximize, boolean()}
.br
.RE
.RE
.RS
.LP
Maximizes this MDI child frame\&.
.LP
This function doesn\&'t do anything if \fIIsAlwaysMaximized()\fR\& (not implemented in wx) returns true\&.
.LP
See: \fIactivate/1\fR\&, \fIrestore/1\fR\& 
.RE
.LP
.nf

.B
restore(This) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMDIChildFrame()
.br
.RE
.RE
.RS
.LP
Restores this MDI child frame (unmaximizes)\&.
.LP
This function doesn\&'t do anything if \fIIsAlwaysMaximized()\fR\& (not implemented in wx) returns true\&.
.LP
See: \fIactivate/1\fR\&, \fImaximize/2\fR\& 
.RE