.TH wxSashEvent 3 "wx 2.2.2" "wxWidgets team." "Erlang Module Definition"
.SH NAME
wxSashEvent \- Functions for wxSashEvent class
.SH DESCRIPTION
.LP
A sash event is sent when the sash of a \fIwxSashWindow\fR\& has been dragged by the user\&.
.LP
Remark: When a sash belonging to a sash window is dragged by the user, and then released, this event is sent to the window, where it may be processed by an event table entry in a derived class, a plug-in event handler or an ancestor class\&. Note that the \fIwxSashWindow\fR\& doesn\&'t change the window\&'s size itself\&. It relies on the application\&'s event handler to do that\&. This is because the application may have to handle other consequences of the resize, or it may wish to veto it altogether\&. The event handler should look at the drag rectangle: see \fIgetDragRect/1\fR\& to see what the new size of the window would be if the resize were to be applied\&. It should also call \fIgetDragStatus/1\fR\& to see whether the drag was OK or out of the current allowed range\&.
.LP
See: \fIwxSashWindow\fR\&, Overview events 
.LP
This class is derived (and can use functions) from: \fIwxCommandEvent\fR\& \fIwxEvent\fR\&
.LP
wxWidgets docs: wxSashEvent
.SH "EVENTS"

.LP
Use \fIwxEvtHandler:connect/3\fR\& with \fIwxSashEventType\fR\& to subscribe to events of this type\&.
.SH DATA TYPES
.nf

\fBwxSashEvent()\fR\& = wx:wx_object()
.br
.fi
.nf

\fBwxSash()\fR\& = 
.br
    #wxSash{type = wxSashEvent:wxSashEventType(),
.br
            edge = wx:wx_enum(),
.br
            dragRect =
.br
                {X :: integer(),
.br
                 Y :: integer(),
.br
                 W :: integer(),
.br
                 H :: integer()},
.br
            dragStatus = wx:wx_enum()}
.br
.fi
.nf

\fBwxSashEventType()\fR\& = sash_dragged
.br
.fi
.SH EXPORTS
.LP
.nf

.B
getEdge(This) -> wx:wx_enum()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSashEvent()
.br
.RE
.RE
.RS
.LP
Returns the dragged edge\&.
.LP
The return value is one of wxSASH_TOP, wxSASH_RIGHT, wxSASH_BOTTOM, wxSASH_LEFT\&.
.RE
.LP
.nf

.B
getDragRect(This) ->
.B
               {X :: integer(),
.B
                Y :: integer(),
.B
                W :: integer(),
.B
                H :: integer()}
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSashEvent()
.br
.RE
.RE
.RS
.LP
Returns the rectangle representing the new size the window would be if the resize was applied\&.
.LP
It is up to the application to set the window size if required\&.
.RE
.LP
.nf

.B
getDragStatus(This) -> wx:wx_enum()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSashEvent()
.br
.RE
.RE
.RS
.LP
Returns the status of the sash: one of wxSASH_STATUS_OK, wxSASH_STATUS_OUT_OF_RANGE\&.
.LP
If the drag caused the notional bounding box of the window to flip over, for example, the drag will be out of rage\&.
.RE