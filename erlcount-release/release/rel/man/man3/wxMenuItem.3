.TH wxMenuItem 3 "wx 2.2.2" "wxWidgets team." "Erlang Module Definition"
.SH NAME
wxMenuItem \- Functions for wxMenuItem class
.SH DESCRIPTION
.LP
A menu item represents an item in a menu\&.
.LP
Note that you usually don\&'t have to deal with it directly as \fIwxMenu\fR\& methods usually construct an object of this class for you\&.
.LP
Also please note that the methods related to fonts and bitmaps are currently only implemented for Windows, Mac and GTK+\&.
.LP
See: \fIwxMenuBar\fR\&, \fIwxMenu\fR\& 
.LP
wxWidgets docs: wxMenuItem
.SH "EVENTS"

.LP
Event types emitted from this class: \fImenu_open\fR\&, \fImenu_close\fR\&, \fImenu_highlight\fR\&
.SH DATA TYPES
.nf

\fBwxMenuItem()\fR\& = wx:wx_object()
.br
.fi
.SH EXPORTS
.LP
.nf

.B
new() -> wxMenuItem()
.br
.fi
.br
.LP
.nf

.B
new(Options :: [Option]) -> wxMenuItem()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Option = 
.br
    {parentMenu, wxMenu:wxMenu()} |
.br
    {id, integer()} |
.br
    {text, unicode:chardata()} |
.br
    {help, unicode:chardata()} |
.br
    {kind, wx:wx_enum()} |
.br
    {subMenu, wxMenu:wxMenu()}
.br
.RE
.RE
.RS
.LP
Constructs a \fIwxMenuItem\fR\& object\&.
.LP
Menu items can be standard, or "stock menu items", or custom\&. For the standard menu items (such as commands to open a file, exit the program and so on, see page_stockitems for the full list) it is enough to specify just the stock ID and leave \fItext\fR\& and \fIhelp\fR\& string empty\&. Some platforms (currently wxGTK only, and see the remark in \fIsetBitmap/2\fR\& documentation) will also show standard bitmaps for stock menu items\&.
.LP
Leaving at least \fItext\fR\& empty for the stock menu items is actually strongly recommended as they will have appearance and keyboard interface (including standard accelerators) familiar to the user\&.
.LP
For the custom (non-stock) menu items, \fItext\fR\& must be specified and while \fIhelp\fR\& string may be left empty, it\&'s recommended to pass the item description (which is automatically shown by the library in the status bar when the menu item is selected) in this parameter\&.
.LP
Finally note that you can e\&.g\&. use a stock menu label without using its stock help string:
.LP
that is, stock properties are set independently one from the other\&.
.RE
.LP
.nf

.B
destroy(This :: wxMenuItem()) -> ok
.br
.fi
.br
.RS
.LP
Destructor\&.
.RE
.LP
.nf

.B
check(This) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMenuItem()
.br
.RE
.RE
.LP
.nf

.B
check(This, Options :: [Option]) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMenuItem()
.br
Option = {check, boolean()}
.br
.RE
.RE
.RS
.LP
Checks or unchecks the menu item\&.
.LP
Note that this only works when the item is already appended to a menu\&.
.RE
.LP
.nf

.B
enable(This) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMenuItem()
.br
.RE
.RE
.LP
.nf

.B
enable(This, Options :: [Option]) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMenuItem()
.br
Option = {enable, boolean()}
.br
.RE
.RE
.RS
.LP
Enables or disables the menu item\&.
.RE
.LP
.nf

.B
getBitmap(This) -> wxBitmap:wxBitmap()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMenuItem()
.br
.RE
.RE
.RS
.LP
Returns the checked or unchecked bitmap\&.
.LP
Only for:wxmsw
.RE
.LP
.nf

.B
getHelp(This) -> unicode:charlist()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMenuItem()
.br
.RE
.RE
.RS
.LP
Returns the help string associated with the menu item\&.
.RE
.LP
.nf

.B
getId(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMenuItem()
.br
.RE
.RE
.RS
.LP
Returns the menu item identifier\&.
.RE
.LP
.nf

.B
getKind(This) -> wx:wx_enum()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMenuItem()
.br
.RE
.RE
.RS
.LP
Returns the item kind, one of \fIwxITEM_SEPARATOR\fR\&, \fIwxITEM_NORMAL\fR\&, \fIwxITEM_CHECK\fR\& or \fIwxITEM_RADIO\fR\&\&.
.RE
.LP
.nf

.B
getLabelFromText(Text) -> unicode:charlist()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Text = unicode:chardata()
.br
.RE
.RE
.RS
.LP
See: \fIgetLabelText/1\fR\&\&.
.RE
.LP
.nf

.B
getLabelText(Text) -> unicode:charlist()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Text = unicode:chardata()
.br
.RE
.RE
.RS
.LP
Strips all accelerator characters and mnemonics from the given \fItext\fR\&\&.
.LP
For example:
.LP
will return just \fI"Hello"\fR\&\&.
.LP
See: \fIgetItemLabelText/1\fR\&, \fIgetItemLabel/1\fR\& 
.RE
.LP
.nf

.B
getText(This) -> unicode:charlist()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMenuItem()
.br
.RE
.RE
.RS
.LP
See: \fIgetItemLabel/1\fR\&\&.
.RE
.LP
.nf

.B
getItemLabel(This) -> unicode:charlist()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMenuItem()
.br
.RE
.RE
.RS
.LP
Returns the text associated with the menu item including any accelerator characters that were passed to the constructor or \fIsetItemLabel/2\fR\&\&.
.LP
See: \fIgetItemLabelText/1\fR\&, \fIgetLabelText/1\fR\& 
.RE
.LP
.nf

.B
getLabel(This) -> unicode:charlist()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMenuItem()
.br
.RE
.RE
.RS
.LP
See: \fIgetItemLabelText/1\fR\&\&.
.RE
.LP
.nf

.B
getItemLabelText(This) -> unicode:charlist()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMenuItem()
.br
.RE
.RE
.RS
.LP
Returns the text associated with the menu item, without any accelerator characters\&.
.LP
See: \fIgetItemLabel/1\fR\&, \fIgetLabelText/1\fR\& 
.RE
.LP
.nf

.B
getMenu(This) -> wxMenu:wxMenu()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMenuItem()
.br
.RE
.RE
.RS
.LP
Returns the menu this menu item is in, or NULL if this menu item is not attached\&.
.RE
.LP
.nf

.B
getSubMenu(This) -> wxMenu:wxMenu()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMenuItem()
.br
.RE
.RE
.RS
.LP
Returns the submenu associated with the menu item, or NULL if there isn\&'t one\&.
.RE
.LP
.nf

.B
isCheckable(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMenuItem()
.br
.RE
.RE
.RS
.LP
Returns true if the item is checkable\&.
.LP
Notice that the radio buttons are considered to be checkable as well, so this method returns true for them too\&. Use \fIIsCheck()\fR\& (not implemented in wx) if you want to test for the check items only\&.
.RE
.LP
.nf

.B
isChecked(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMenuItem()
.br
.RE
.RE
.RS
.LP
Returns true if the item is checked\&.
.RE
.LP
.nf

.B
isEnabled(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMenuItem()
.br
.RE
.RE
.RS
.LP
Returns true if the item is enabled\&.
.RE
.LP
.nf

.B
isSeparator(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMenuItem()
.br
.RE
.RE
.RS
.LP
Returns true if the item is a separator\&.
.RE
.LP
.nf

.B
isSubMenu(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMenuItem()
.br
.RE
.RE
.RS
.LP
Returns true if the item is a submenu\&.
.RE
.LP
.nf

.B
setBitmap(This, Bmp) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMenuItem()
.br
Bmp = wxBitmap:wxBitmap()
.br
.RE
.RE
.RS
.LP
Sets the bitmap for the menu item\&.
.LP
It is equivalent to wxMenuItem::SetBitmaps(bmp, wxNullBitmap) if \fIchecked\fR\& is true (default value) or SetBitmaps(wxNullBitmap, bmp) otherwise\&.
.LP
\fIsetBitmap/2\fR\& must be called before the item is appended to the menu, i\&.e\&. appending the item without a bitmap and setting one later is not guaranteed to work\&. But the bitmap can be changed or reset later if it had been set up initially\&.
.LP
Notice that GTK+ uses a global setting called \fIgtk-menu-images\fR\& to determine if the images should be shown in the menus at all\&. If it is off (which is the case in e\&.g\&. Gnome 2\&.28 by default), no images will be shown, consistently with the native behaviour\&.
.LP
Only for:wxmsw,wxosx,wxgtk
.RE
.LP
.nf

.B
setHelp(This, HelpString) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMenuItem()
.br
HelpString = unicode:chardata()
.br
.RE
.RE
.RS
.LP
Sets the help string\&.
.RE
.LP
.nf

.B
setMenu(This, Menu) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMenuItem()
.br
Menu = wxMenu:wxMenu()
.br
.RE
.RE
.RS
.LP
Sets the parent menu which will contain this menu item\&.
.RE
.LP
.nf

.B
setSubMenu(This, Menu) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMenuItem()
.br
Menu = wxMenu:wxMenu()
.br
.RE
.RE
.RS
.LP
Sets the submenu of this menu item\&.
.RE
.LP
.nf

.B
setText(This, Label) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMenuItem()
.br
Label = unicode:chardata()
.br
.RE
.RE
.RS
.LP
See: \fIsetItemLabel/2\fR\&\&.
.RE
.LP
.nf

.B
setItemLabel(This, Label) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMenuItem()
.br
Label = unicode:chardata()
.br
.RE
.RE
.RS
.LP
Sets the label associated with the menu item\&.
.LP
Note that if the ID of this menu item corresponds to a stock ID, then it is not necessary to specify a label: wxWidgets will automatically use the stock item label associated with that ID\&. See the \fInew/1\fR\& for more info\&.
.LP
The label string for the normal menu items (not separators) may include the accelerator which can be used to activate the menu item from keyboard\&. An accelerator key can be specified using the ampersand \fI&\fR\& character\&. In order to embed an ampersand character in the menu item text, the ampersand must be doubled\&.
.LP
Optionally you can specify also an accelerator string appending a tab character \fI\\t\fR\& followed by a valid key combination (e\&.g\&. \fICTRL+V\fR\&)\&. Its general syntax is any combination of \fI"CTRL"\fR\&, \fI"RAWCTRL"\fR\&, \fI"ALT"\fR\& and \fI"SHIFT"\fR\& strings (case doesn\&'t matter) separated by either \fI\&'-\&'\fR\& or \fI\&'+\&'\fR\& characters and followed by the accelerator itself\&. Notice that \fICTRL\fR\& corresponds to the "Ctrl" key on most platforms but not under macOS where it is mapped to "Cmd" key on Mac keyboard\&. Usually this is exactly what you want in portable code but if you really need to use the (rarely used for this purpose) "Ctrl" key even under Mac, you may use \fIRAWCTRL\fR\& to prevent this mapping\&. Under the other platforms \fIRAWCTRL\fR\& is the same as plain \fICTRL\fR\&\&.
.LP
The accelerator may be any alphanumeric character, any function key (from \fIF1\fR\& to \fIF12\fR\&), any numpad digit key using \fIKP_\fR\& prefix (i\&.e\&. from \fIKP_0\fR\& to \fIKP_9\fR\&) or one of the special strings listed below (again, case doesn\&'t matter) corresponding to the specified key code:
.LP
Examples:
.LP
Note: In wxGTK using \fI"SHIFT"\fR\& with non-alphabetic characters currently doesn\&'t work, even in combination with other modifiers, due to GTK+ limitation\&. E\&.g\&. \fIShift+Ctrl+A\fR\& works but \fIShift+Ctrl+1\fR\& or \fIShift+/\fR\& do not, so avoid using accelerators of this form in portable code\&.
.LP
Note: In wxGTk, the left/right/up/down arrow keys do not work as accelerator keys for a menu item unless a modifier key is used\&. Additionally, the following keycodes are not supported as menu accelerator keys:
.LP
See: \fIgetItemLabel/1\fR\&, \fIgetItemLabelText/1\fR\& 
.RE