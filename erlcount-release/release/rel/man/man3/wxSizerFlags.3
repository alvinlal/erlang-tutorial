.TH wxSizerFlags 3 "wx 2.2.2" "wxWidgets team." "Erlang Module Definition"
.SH NAME
wxSizerFlags \- Functions for wxSizerFlags class
.SH DESCRIPTION
.LP
Container for sizer items flags providing readable names for them\&.
.LP
Normally, when you add an item to a sizer via \fIwxSizer:add/4\fR\&, you have to specify a lot of flags and parameters which can be unwieldy\&. This is where \fIwxSizerFlags\fR\& comes in: it allows you to specify all parameters using the named methods instead\&. For example, instead of
.LP
you can now write
.LP
This is more readable and also allows you to create \fIwxSizerFlags\fR\& objects which can be reused for several sizer items\&.
.LP
Note that by specification, all methods of \fIwxSizerFlags\fR\& return the \fIwxSizerFlags\fR\& object itself to allowing chaining multiple methods calls like in the examples above\&.
.LP
See: \fIwxSizer\fR\& 
.LP
wxWidgets docs: wxSizerFlags
.SH DATA TYPES
.nf

\fBwxSizerFlags()\fR\& = wx:wx_object()
.br
.fi
.SH EXPORTS
.LP
.nf

.B
new() -> wxSizerFlags()
.br
.fi
.br
.LP
.nf

.B
new(Options :: [Option]) -> wxSizerFlags()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Option = {proportion, integer()}
.br
.RE
.RE
.RS
.LP
Creates the \fIwxSizer\fR\& with the proportion specified by \fIproportion\fR\&\&.
.RE
.LP
.nf

.B
align(This, Alignment) -> wxSizerFlags()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSizerFlags()
.br
Alignment = integer()
.br
.RE
.RE
.RS
.LP
Sets the alignment of this \fIwxSizerFlags\fR\& to \fIalign\fR\&\&.
.LP
This method replaces the previously set alignment with the specified one\&.
.LP
See: \fITop()\fR\& (not implemented in wx), \fIleft/1\fR\&, \fIright/1\fR\&, \fIBottom()\fR\& (not implemented in wx), \fIcentre/1\fR\& 
.RE
.LP
.nf

.B
border(This) -> wxSizerFlags()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSizerFlags()
.br
.RE
.RE
.LP
.nf

.B
border(This, Options :: [Option]) -> wxSizerFlags()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSizerFlags()
.br
Option = {direction, integer()}
.br
.RE
.RE
.RS
.LP
Sets the \fIwxSizerFlags\fR\& to have a border with size as returned by \fIGetDefaultBorder()\fR\& (not implemented in wx)\&.
.RE
.LP
.nf

.B
border(This, Direction, Borderinpixels) -> wxSizerFlags()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSizerFlags()
.br
Direction = Borderinpixels = integer()
.br
.RE
.RE
.RS
.LP
Sets the \fIwxSizerFlags\fR\& to have a border of a number of pixels specified by \fIborderinpixels\fR\& with the directions specified by \fIdirection\fR\&\&.
.LP
Prefer to use the overload below or \fIDoubleBorder()\fR\& (not implemented in wx) or \fITripleBorder()\fR\& (not implemented in wx) versions instead of hard-coding the border value in pixels to avoid too small borders on devices with high DPI displays\&.
.RE
.LP
.nf

.B
centre(This) -> wxSizerFlags()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSizerFlags()
.br
.RE
.RE
.RS
.LP
See: \fIcenter/1\fR\&\&.
.RE
.LP
.nf

.B
center(This) -> wxSizerFlags()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSizerFlags()
.br
.RE
.RE
.RS
.LP
Sets the object of the \fIwxSizerFlags\fR\& to center itself in the area it is given\&.
.RE
.LP
.nf

.B
expand(This) -> wxSizerFlags()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSizerFlags()
.br
.RE
.RE
.RS
.LP
Sets the object of the \fIwxSizerFlags\fR\& to expand to fill as much area as it can\&.
.RE
.LP
.nf

.B
left(This) -> wxSizerFlags()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSizerFlags()
.br
.RE
.RE
.RS
.LP
Aligns the object to the left, similar for \fIAlign(wxALIGN_LEFT)\fR\&\&.
.LP
Unlike \fIalign/2\fR\&, this method doesn\&'t change the vertical alignment of the item\&.
.RE
.LP
.nf

.B
proportion(This, Proportion) -> wxSizerFlags()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSizerFlags()
.br
Proportion = integer()
.br
.RE
.RE
.RS
.LP
Sets the proportion of this \fIwxSizerFlags\fR\& to \fIproportion\fR\&\&.
.RE
.LP
.nf

.B
right(This) -> wxSizerFlags()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSizerFlags()
.br
.RE
.RE
.RS
.LP
Aligns the object to the right, similar for \fIAlign(wxALIGN_RIGHT)\fR\&\&.
.LP
Unlike \fIalign/2\fR\&, this method doesn\&'t change the vertical alignment of the item\&.
.RE
.LP
.nf

.B
destroy(This :: wxSizerFlags()) -> ok
.br
.fi
.br
.RS
.LP
Destroys the object\&.
.RE