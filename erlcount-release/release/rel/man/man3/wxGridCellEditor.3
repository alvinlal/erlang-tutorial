.TH wxGridCellEditor 3 "wx 2.2.2" "wxWidgets team." "Erlang Module Definition"
.SH NAME
wxGridCellEditor \- Functions for wxGridCellEditor class
.SH DESCRIPTION
.LP
This class is responsible for providing and manipulating the in-place edit controls for the grid\&. Instances of \fIwxGridCellEditor\fR\& (actually, instances of derived classes since it is an abstract class) can be associated with the cell attributes for individual cells, rows, columns, or even for the entire grid\&.
.LP
Normally \fIwxGridCellEditor\fR\& shows some UI control allowing the user to edit the cell, but starting with wxWidgets 3\&.1\&.4 it\&'s also possible to define "activatable" cell editors, that change the value of the cell directly when it\&'s activated (typically by pressing Space key or clicking on it), see \fITryActivate()\fR\& (not implemented in wx) method\&. Note that when implementing an editor which is always activatable, i\&.e\&. never shows any in-place editor, it is more convenient to derive its class from \fIwxGridCellActivatableEditor\fR\& (not implemented in wx) than from \fIwxGridCellEditor\fR\& itself\&.
.LP
See: \fIwxGridCellAutoWrapStringEditor\fR\& (not implemented in wx), \fIwxGridCellBoolEditor\fR\&, \fIwxGridCellChoiceEditor\fR\&, \fIwxGridCellEnumEditor\fR\& (not implemented in wx), \fIwxGridCellFloatEditor\fR\&, \fIwxGridCellNumberEditor\fR\&, \fIwxGridCellTextEditor\fR\&, \fIwxGridCellDateEditor\fR\& (not implemented in wx)
.LP
wxWidgets docs: wxGridCellEditor
.SH DATA TYPES
.nf

\fBwxGridCellEditor()\fR\& = wx:wx_object()
.br
.fi
.SH EXPORTS
.LP
.nf

.B
create(This, Parent, Id, EvtHandler) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridCellEditor()
.br
Parent = wxWindow:wxWindow()
.br
Id = integer()
.br
EvtHandler = wxEvtHandler:wxEvtHandler()
.br
.RE
.RE
.RS
.LP
Creates the actual edit control\&.
.RE
.LP
.nf

.B
isCreated(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridCellEditor()
.br
.RE
.RE
.RS
.LP
Returns true if the edit control has been created\&.
.RE
.LP
.nf

.B
setSize(This, Rect) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridCellEditor()
.br
Rect = 
.br
    {X :: integer(),
.br
     Y :: integer(),
.br
     W :: integer(),
.br
     H :: integer()}
.br
.RE
.RE
.RS
.LP
Size and position the edit control\&.
.RE
.LP
.nf

.B
show(This, Show) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridCellEditor()
.br
Show = boolean()
.br
.RE
.RE
.LP
.nf

.B
show(This, Show, Options :: [Option]) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridCellEditor()
.br
Show = boolean()
.br
Option = {attr, wxGridCellAttr:wxGridCellAttr()}
.br
.RE
.RE
.RS
.LP
Show or hide the edit control, use the specified attributes to set colours/fonts for it\&.
.RE
.LP
.nf

.B
reset(This) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridCellEditor()
.br
.RE
.RE
.RS
.LP
Reset the value in the control back to its starting value\&.
.RE
.LP
.nf

.B
startingKey(This, Event) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridCellEditor()
.br
Event = wxKeyEvent:wxKeyEvent()
.br
.RE
.RE
.RS
.LP
If the editor is enabled by pressing keys on the grid, this will be called to let the editor do something about that first key if desired\&.
.RE
.LP
.nf

.B
startingClick(This) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridCellEditor()
.br
.RE
.RE
.RS
.LP
If the editor is enabled by clicking on the cell, this method will be called\&.
.RE
.LP
.nf

.B
handleReturn(This, Event) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridCellEditor()
.br
Event = wxKeyEvent:wxKeyEvent()
.br
.RE
.RE
.RS
.LP
Some types of controls on some platforms may need some help with the Return key\&.
.RE