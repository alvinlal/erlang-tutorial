.TH wxListEvent 3 "wx 2.2.2" "wxWidgets team." "Erlang Module Definition"
.SH NAME
wxListEvent \- Functions for wxListEvent class
.SH DESCRIPTION
.LP
A list event holds information about events associated with \fIwxListCtrl\fR\& objects\&.
.LP
See: \fIwxListCtrl\fR\& 
.LP
This class is derived (and can use functions) from: \fIwxNotifyEvent\fR\& \fIwxCommandEvent\fR\& \fIwxEvent\fR\&
.LP
wxWidgets docs: wxListEvent
.SH "EVENTS"

.LP
Use \fIwxEvtHandler:connect/3\fR\& with \fIwxListEventType\fR\& to subscribe to events of this type\&.
.SH DATA TYPES
.nf

\fBwxListEvent()\fR\& = wx:wx_object()
.br
.fi
.nf

\fBwxList()\fR\& = 
.br
    #wxList{type = wxListEvent:wxListEventType(),
.br
            code = integer(),
.br
            oldItemIndex = integer(),
.br
            itemIndex = integer(),
.br
            col = integer(),
.br
            pointDrag = {X :: integer(), Y :: integer()}}
.br
.fi
.nf

\fBwxListEventType()\fR\& = 
.br
    command_list_begin_drag | command_list_begin_rdrag |
.br
    command_list_begin_label_edit | command_list_end_label_edit |
.br
    command_list_delete_item | command_list_delete_all_items |
.br
    command_list_key_down | command_list_insert_item |
.br
    command_list_col_click | command_list_col_right_click |
.br
    command_list_col_begin_drag | command_list_col_dragging |
.br
    command_list_col_end_drag | command_list_item_selected |
.br
    command_list_item_deselected | command_list_item_right_click |
.br
    command_list_item_middle_click | command_list_item_activated |
.br
    command_list_item_focused | command_list_cache_hint
.br
.fi
.SH EXPORTS
.LP
.nf

.B
getCacheFrom(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxListEvent()
.br
.RE
.RE
.RS
.LP
For \fIEVT_LIST_CACHE_HINT\fR\& event only: return the first item which the list control advises us to cache\&.
.RE
.LP
.nf

.B
getCacheTo(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxListEvent()
.br
.RE
.RE
.RS
.LP
For \fIEVT_LIST_CACHE_HINT\fR\& event only: return the last item (inclusive) which the list control advises us to cache\&.
.RE
.LP
.nf

.B
getKeyCode(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxListEvent()
.br
.RE
.RE
.RS
.LP
Key code if the event is a keypress event\&.
.RE
.LP
.nf

.B
getIndex(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxListEvent()
.br
.RE
.RE
.RS
.LP
The item index\&.
.RE
.LP
.nf

.B
getColumn(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxListEvent()
.br
.RE
.RE
.RS
.LP
The column position: it is only used with \fICOL\fR\& events\&.
.LP
For the column dragging events, it is the column to the left of the divider being dragged, for the column click events it may be -1 if the user clicked in the list control header outside any column\&.
.RE
.LP
.nf

.B
getPoint(This) -> {X :: integer(), Y :: integer()}
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxListEvent()
.br
.RE
.RE
.RS
.LP
The position of the mouse pointer if the event is a drag event\&.
.RE
.LP
.nf

.B
getLabel(This) -> unicode:charlist()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxListEvent()
.br
.RE
.RE
.RS
.LP
The (new) item label for \fIEVT_LIST_END_LABEL_EDIT\fR\& event\&.
.RE
.LP
.nf

.B
getText(This) -> unicode:charlist()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxListEvent()
.br
.RE
.RE
.RS
.LP
The text\&.
.RE
.LP
.nf

.B
getImage(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxListEvent()
.br
.RE
.RE
.RS
.LP
The image\&.
.RE
.LP
.nf

.B
getData(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxListEvent()
.br
.RE
.RE
.RS
.LP
The data\&.
.RE
.LP
.nf

.B
getMask(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxListEvent()
.br
.RE
.RE
.RS
.LP
The mask\&.
.RE
.LP
.nf

.B
getItem(This) -> wxListItem:wxListItem()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxListEvent()
.br
.RE
.RE
.RS
.LP
An item object, used by some events\&.
.LP
See also \fIwxListCtrl:setItem/5\fR\&\&.
.RE
.LP
.nf

.B
isEditCancelled(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxListEvent()
.br
.RE
.RE
.RS
.LP
This method only makes sense for \fIEVT_LIST_END_LABEL_EDIT\fR\& message and returns true if it the label editing has been cancelled by the user (\fIgetLabel/1\fR\& returns an empty string in this case but it doesn\&'t allow the application to distinguish between really cancelling the edit and the admittedly rare case when the user wants to rename it to an empty string)\&.
.RE