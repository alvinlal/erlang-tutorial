.TH wxMDIParentFrame 3 "wx 2.2.2" "wxWidgets team." "Erlang Module Definition"
.SH NAME
wxMDIParentFrame \- Functions for wxMDIParentFrame class
.SH DESCRIPTION
.LP
An MDI (Multiple Document Interface) parent frame is a window which can contain MDI child frames in its client area which emulates the full desktop\&.
.LP
MDI is a user-interface model in which all the window reside inside the single parent window as opposed to being separate from each other\&. It remains popular despite dire warnings from Microsoft itself (which popularized this model in the first model) that MDI is obsolete\&.
.LP
An MDI parent frame always has a \fIwxMDIClientWindow\fR\& associated with it, which is the parent for MDI child frames\&. In the simplest case, the client window takes up the entire parent frame area but it is also possible to resize it to be smaller in order to have other windows in the frame, a typical example is using a sidebar along one of the window edges\&.
.LP
The appearance of MDI applications differs between different ports\&. The classic MDI model, with child windows which can be independently moved, resized etc, is only available under MSW, which provides native support for it\&. In Mac ports, multiple top level windows are used for the MDI children too and the MDI parent frame itself is invisible, to accommodate the native look and feel requirements\&. In all the other ports, a tab-based MDI implementation (sometimes called TDI) is used and so at most one MDI child is visible at any moment (child frames are always maximized)\&.
.LP
Although it is possible to have multiple MDI parent frames, a typical MDI application has a single MDI parent frame window inside which multiple MDI child frames, i\&.e\&. objects of class \fIwxMDIChildFrame\fR\&, can be created\&.
.LP
Styles
.LP
This class supports the following styles:
.LP
There are no special styles for this class, all \fIwxFrame\fR\& styles apply to it in the usual way\&. The only exception is that wxHSCROLL and wxVSCROLL styles apply not to the frame itself but to the client window, so that using them enables horizontal and vertical scrollbars for this window and not the frame\&.
.LP
See: \fIwxMDIChildFrame\fR\&, \fIwxMDIClientWindow\fR\&, \fIwxFrame\fR\&, \fIwxDialog\fR\& 
.LP
This class is derived (and can use functions) from: \fIwxFrame\fR\& \fIwxTopLevelWindow\fR\& \fIwxWindow\fR\& \fIwxEvtHandler\fR\&
.LP
wxWidgets docs: wxMDIParentFrame
.SH DATA TYPES
.nf

\fBwxMDIParentFrame()\fR\& = wx:wx_object()
.br
.fi
.SH EXPORTS
.LP
.nf

.B
new() -> wxMDIParentFrame()
.br
.fi
.br
.RS
.LP
Default constructor\&.
.LP
Use \fIcreate/5\fR\& for the objects created using this constructor\&.
.RE
.LP
.nf

.B
new(Parent, Id, Title) -> wxMDIParentFrame()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Parent = wxWindow:wxWindow()
.br
Id = integer()
.br
Title = unicode:chardata()
.br
.RE
.RE
.LP
.nf

.B
new(Parent, Id, Title, Options :: [Option]) -> wxMDIParentFrame()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Parent = wxWindow:wxWindow()
.br
Id = integer()
.br
Title = unicode:chardata()
.br
Option = 
.br
    {pos, {X :: integer(), Y :: integer()}} |
.br
    {size, {W :: integer(), H :: integer()}} |
.br
    {style, integer()}
.br
.RE
.RE
.RS
.LP
Constructor, creating the window\&.
.LP
Notice that if you override virtual \fIOnCreateClient()\fR\& (not implemented in wx) method you shouldn\&'t be using this constructor but the default constructor and \fIcreate/5\fR\& as otherwise your overridden method is never going to be called because of the usual C++ virtual call resolution rules\&.
.LP
Under wxMSW, the client window will automatically have a sunken border style when the active child is not maximized, and no border style when a child is maximized\&.
.LP
See: \fIcreate/5\fR\&, \fIOnCreateClient()\fR\& (not implemented in wx)
.RE
.LP
.nf

.B
destroy(This :: wxMDIParentFrame()) -> ok
.br
.fi
.br
.RS
.LP
Destructor\&.
.LP
Destroys all child windows and menu bar if present\&.
.RE
.LP
.nf

.B
activateNext(This) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMDIParentFrame()
.br
.RE
.RE
.RS
.LP
Activates the MDI child following the currently active one\&.
.LP
The MDI children are maintained in an ordered list and this function switches to the next element in this list, wrapping around the end of it if the currently active child is the last one\&.
.LP
See: \fIactivatePrevious/1\fR\& 
.RE
.LP
.nf

.B
activatePrevious(This) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMDIParentFrame()
.br
.RE
.RE
.RS
.LP
Activates the MDI child preceding the currently active one\&.
.LP
See: \fIactivateNext/1\fR\& 
.RE
.LP
.nf

.B
arrangeIcons(This) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMDIParentFrame()
.br
.RE
.RE
.RS
.LP
Arranges any iconized (minimized) MDI child windows\&.
.LP
This method is only implemented in MSW MDI implementation and does nothing under the other platforms\&.
.LP
See: \fIcascade/1\fR\&, \fItile/2\fR\& 
.RE
.LP
.nf

.B
cascade(This) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMDIParentFrame()
.br
.RE
.RE
.RS
.LP
Arranges the MDI child windows in a cascade\&.
.LP
This method is only implemented in MSW MDI implementation and does nothing under the other platforms\&.
.LP
See: \fItile/2\fR\&, \fIarrangeIcons/1\fR\& 
.RE
.LP
.nf

.B
create(This, Parent, Id, Title) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMDIParentFrame()
.br
Parent = wxWindow:wxWindow()
.br
Id = integer()
.br
Title = unicode:chardata()
.br
.RE
.RE
.LP
.nf

.B
create(This, Parent, Id, Title, Options :: [Option]) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMDIParentFrame()
.br
Parent = wxWindow:wxWindow()
.br
Id = integer()
.br
Title = unicode:chardata()
.br
Option = 
.br
    {pos, {X :: integer(), Y :: integer()}} |
.br
    {size, {W :: integer(), H :: integer()}} |
.br
    {style, integer()}
.br
.RE
.RE
.RS
.LP
Used in two-step frame construction\&.
.LP
See \fInew/4\fR\& for further details\&.
.RE
.LP
.nf

.B
getActiveChild(This) -> wxMDIChildFrame:wxMDIChildFrame()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMDIParentFrame()
.br
.RE
.RE
.RS
.LP
Returns a pointer to the active MDI child, if there is one\&.
.LP
If there are any children at all this function returns a non-NULL pointer\&.
.RE
.LP
.nf

.B
getClientWindow(This) -> wxMDIClientWindow:wxMDIClientWindow()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMDIParentFrame()
.br
.RE
.RE
.RS
.LP
Returns a pointer to the client window\&.
.LP
See: \fIOnCreateClient()\fR\& (not implemented in wx)
.RE
.LP
.nf

.B
tile(This) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMDIParentFrame()
.br
.RE
.RE
.LP
.nf

.B
tile(This, Options :: [Option]) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxMDIParentFrame()
.br
Option = {orient, wx:wx_enum()}
.br
.RE
.RE
.RS
.LP
Tiles the MDI child windows either horizontally or vertically depending on whether \fIorient\fR\& is \fIwxHORIZONTAL\fR\& or \fIwxVERTICAL\fR\&\&.
.LP
This method is only implemented in MSW MDI implementation and does nothing under the other platforms\&.
.RE