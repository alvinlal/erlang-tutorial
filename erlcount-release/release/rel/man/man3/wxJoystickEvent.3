.TH wxJoystickEvent 3 "wx 2.2.2" "wxWidgets team." "Erlang Module Definition"
.SH NAME
wxJoystickEvent \- Functions for wxJoystickEvent class
.SH DESCRIPTION
.LP
This event class contains information about joystick events, particularly events received by windows\&.
.LP
See: \fIwxJoystick\fR\& (not implemented in wx)
.LP
This class is derived (and can use functions) from: \fIwxEvent\fR\&
.LP
wxWidgets docs: wxJoystickEvent
.SH "EVENTS"

.LP
Use \fIwxEvtHandler:connect/3\fR\& with \fIwxJoystickEventType\fR\& to subscribe to events of this type\&.
.SH DATA TYPES
.nf

\fBwxJoystickEvent()\fR\& = wx:wx_object()
.br
.fi
.nf

\fBwxJoystick()\fR\& = 
.br
    #wxJoystick{type = wxJoystickEvent:wxJoystickEventType(),
.br
                pos = {X :: integer(), Y :: integer()},
.br
                zPosition = integer(),
.br
                buttonChange = integer(),
.br
                buttonState = integer(),
.br
                joyStick = integer()}
.br
.fi
.nf

\fBwxJoystickEventType()\fR\& = 
.br
    joy_button_down | joy_button_up | joy_move | joy_zmove
.br
.fi
.SH EXPORTS
.LP
.nf

.B
buttonDown(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxJoystickEvent()
.br
.RE
.RE
.LP
.nf

.B
buttonDown(This, Options :: [Option]) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxJoystickEvent()
.br
Option = {but, integer()}
.br
.RE
.RE
.RS
.LP
Returns true if the event was a down event from the specified button (or any button)\&.
.RE
.LP
.nf

.B
buttonIsDown(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxJoystickEvent()
.br
.RE
.RE
.LP
.nf

.B
buttonIsDown(This, Options :: [Option]) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxJoystickEvent()
.br
Option = {but, integer()}
.br
.RE
.RE
.RS
.LP
Returns true if the specified button (or any button) was in a down state\&.
.RE
.LP
.nf

.B
buttonUp(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxJoystickEvent()
.br
.RE
.RE
.LP
.nf

.B
buttonUp(This, Options :: [Option]) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxJoystickEvent()
.br
Option = {but, integer()}
.br
.RE
.RE
.RS
.LP
Returns true if the event was an up event from the specified button (or any button)\&.
.RE
.LP
.nf

.B
getButtonChange(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxJoystickEvent()
.br
.RE
.RE
.RS
.LP
Returns the identifier of the button changing state\&.
.LP
The return value is where \fIn\fR\& is the index of the button changing state, which can also be retrieved using \fIGetButtonOrdinal()\fR\& (not implemented in wx)\&.
.LP
Note that for \fIn\fR\& equal to 1, 2, 3 or 4 there are predefined \fIwxJOY_BUTTONn\fR\& constants which can be used for more clarity, however these constants are not defined for the buttons beyond the first four\&.
.RE
.LP
.nf

.B
getButtonState(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxJoystickEvent()
.br
.RE
.RE
.RS
.LP
Returns the down state of the buttons\&.
.LP
This is a \fIwxJOY_BUTTONn\fR\& identifier, where \fIn\fR\& is one of 1, 2, 3, 4\&.
.RE
.LP
.nf

.B
getJoystick(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxJoystickEvent()
.br
.RE
.RE
.RS
.LP
Returns the identifier of the joystick generating the event - one of wxJOYSTICK1 and wxJOYSTICK2\&.
.RE
.LP
.nf

.B
getPosition(This) -> {X :: integer(), Y :: integer()}
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxJoystickEvent()
.br
.RE
.RE
.RS
.LP
Returns the x, y position of the joystick event\&.
.LP
These coordinates are valid for all the events except wxEVT_JOY_ZMOVE\&.
.RE
.LP
.nf

.B
getZPosition(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxJoystickEvent()
.br
.RE
.RE
.RS
.LP
Returns the z position of the joystick event\&.
.LP
This method can only be used for wxEVT_JOY_ZMOVE events\&.
.RE
.LP
.nf

.B
isButton(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxJoystickEvent()
.br
.RE
.RE
.RS
.LP
Returns true if this was a button up or down event (\fInot\fR\& \&'is any button down?\&')\&.
.RE
.LP
.nf

.B
isMove(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxJoystickEvent()
.br
.RE
.RE
.RS
.LP
Returns true if this was an x, y move event\&.
.RE
.LP
.nf

.B
isZMove(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxJoystickEvent()
.br
.RE
.RE
.RS
.LP
Returns true if this was a z move event\&.
.RE