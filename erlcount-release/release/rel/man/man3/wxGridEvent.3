.TH wxGridEvent 3 "wx 2.2.2" "wxWidgets team." "Erlang Module Definition"
.SH NAME
wxGridEvent \- Functions for wxGridEvent class
.SH DESCRIPTION
.LP
This event class contains information about various grid events\&.
.LP
Notice that all grid event table macros are available in two versions: \fIEVT_GRID_XXX\fR\& and \fIEVT_GRID_CMD_XXX\fR\&\&. The only difference between the two is that the former doesn\&'t allow to specify the grid window identifier and so takes a single parameter, the event handler, but is not suitable if there is more than one grid control in the window where the event table is used (as it would catch the events from all the grids)\&. The version with \fICMD\fR\& takes the id as first argument and the event handler as the second one and so can be used with multiple grids as well\&. Otherwise there are no difference between the two and only the versions without the id are documented below for brevity\&.
.LP
This class is derived (and can use functions) from: \fIwxNotifyEvent\fR\& \fIwxCommandEvent\fR\& \fIwxEvent\fR\&
.LP
wxWidgets docs: wxGridEvent
.SH "EVENTS"

.LP
Use \fIwxEvtHandler:connect/3\fR\& with \fIwxGridEventType\fR\& to subscribe to events of this type\&.
.SH DATA TYPES
.nf

\fBwxGridEvent()\fR\& = wx:wx_object()
.br
.fi
.nf

\fBwxGrid()\fR\& = 
.br
    #wxGrid{type = wxGridEvent:wxGridEventType(),
.br
            row = integer(),
.br
            col = integer(),
.br
            pos = {X :: integer(), Y :: integer()},
.br
            selecting = boolean(),
.br
            control = boolean(),
.br
            meta = boolean(),
.br
            shift = boolean(),
.br
            alt = boolean()}
.br
.fi
.nf

\fBwxGridEventType()\fR\& = 
.br
    grid_cell_left_click | grid_cell_right_click |
.br
    grid_cell_left_dclick | grid_cell_right_dclick |
.br
    grid_label_left_click | grid_label_right_click |
.br
    grid_label_left_dclick | grid_label_right_dclick |
.br
    grid_cell_changed | grid_select_cell | grid_cell_begin_drag |
.br
    grid_editor_shown | grid_editor_hidden | grid_col_move |
.br
    grid_col_sort | grid_tabbing
.br
.fi
.SH EXPORTS
.LP
.nf

.B
altDown(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridEvent()
.br
.RE
.RE
.RS
.LP
Returns true if the Alt key was down at the time of the event\&.
.RE
.LP
.nf

.B
controlDown(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridEvent()
.br
.RE
.RE
.RS
.LP
Returns true if the Control key was down at the time of the event\&.
.RE
.LP
.nf

.B
getCol(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridEvent()
.br
.RE
.RE
.RS
.LP
Column at which the event occurred\&.
.LP
Notice that for a \fIwxEVT_GRID_SELECT_CELL\fR\& event this column is the column of the newly selected cell while the previously selected cell can be retrieved using \fIwxGrid:getGridCursorCol/1\fR\&\&.
.RE
.LP
.nf

.B
getPosition(This) -> {X :: integer(), Y :: integer()}
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridEvent()
.br
.RE
.RE
.RS
.LP
Position in pixels at which the event occurred\&.
.RE
.LP
.nf

.B
getRow(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridEvent()
.br
.RE
.RE
.RS
.LP
Row at which the event occurred\&.
.LP
Notice that for a \fIwxEVT_GRID_SELECT_CELL\fR\& event this row is the row of the newly selected cell while the previously selected cell can be retrieved using \fIwxGrid:getGridCursorRow/1\fR\&\&.
.RE
.LP
.nf

.B
metaDown(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridEvent()
.br
.RE
.RE
.RS
.LP
Returns true if the Meta key was down at the time of the event\&.
.RE
.LP
.nf

.B
selecting(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridEvent()
.br
.RE
.RE
.RS
.LP
Returns true if the user is selecting grid cells, or false if deselecting\&.
.RE
.LP
.nf

.B
shiftDown(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxGridEvent()
.br
.RE
.RE
.RS
.LP
Returns true if the Shift key was down at the time of the event\&.
.RE