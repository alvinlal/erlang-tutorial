.TH wxHtmlEasyPrinting 3 "wx 2.2.2" "wxWidgets team." "Erlang Module Definition"
.SH NAME
wxHtmlEasyPrinting \- Functions for wxHtmlEasyPrinting class
.SH DESCRIPTION
.LP
This class provides very simple interface to printing architecture\&. It allows you to print HTML documents using only a few commands\&.
.LP
Note: Do not create this class on the stack only\&. You should create an instance on app startup and use this instance for all printing operations\&. The reason is that this class stores various settings in it\&.
.LP
wxWidgets docs: wxHtmlEasyPrinting
.SH DATA TYPES
.nf

\fBwxHtmlEasyPrinting()\fR\& = wx:wx_object()
.br
.fi
.SH EXPORTS
.LP
.nf

.B
new() -> wxHtmlEasyPrinting()
.br
.fi
.br
.LP
.nf

.B
new(Options :: [Option]) -> wxHtmlEasyPrinting()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Option = 
.br
    {name, unicode:chardata()} |
.br
    {parentWindow, wxWindow:wxWindow()}
.br
.RE
.RE
.RS
.LP
Constructor\&.
.RE
.LP
.nf

.B
getPrintData(This) -> wxPrintData:wxPrintData()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxHtmlEasyPrinting()
.br
.RE
.RE
.RS
.LP
Returns pointer to \fIwxPrintData\fR\& instance used by this class\&.
.LP
You can set its parameters (via SetXXXX methods)\&.
.RE
.LP
.nf

.B
getPageSetupData(This) ->
.B
                    wxPageSetupDialogData:wxPageSetupDialogData()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxHtmlEasyPrinting()
.br
.RE
.RE
.RS
.LP
Returns a pointer to \fIwxPageSetupDialogData\fR\& instance used by this class\&.
.LP
You can set its parameters (via SetXXXX methods)\&.
.RE
.LP
.nf

.B
previewFile(This, Htmlfile) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxHtmlEasyPrinting()
.br
Htmlfile = unicode:chardata()
.br
.RE
.RE
.RS
.LP
Preview HTML file\&.
.LP
Returns false in case of error - call \fIwxPrinter:getLastError/0\fR\& to get detailed information about the kind of the error\&.
.RE
.LP
.nf

.B
previewText(This, Htmltext) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxHtmlEasyPrinting()
.br
Htmltext = unicode:chardata()
.br
.RE
.RE
.LP
.nf

.B
previewText(This, Htmltext, Options :: [Option]) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxHtmlEasyPrinting()
.br
Htmltext = unicode:chardata()
.br
Option = {basepath, unicode:chardata()}
.br
.RE
.RE
.RS
.LP
Preview HTML text (not file!)\&.
.LP
Returns false in case of error - call \fIwxPrinter:getLastError/0\fR\& to get detailed information about the kind of the error\&.
.RE
.LP
.nf

.B
printFile(This, Htmlfile) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxHtmlEasyPrinting()
.br
Htmlfile = unicode:chardata()
.br
.RE
.RE
.RS
.LP
Print HTML file\&.
.LP
Returns false in case of error - call \fIwxPrinter:getLastError/0\fR\& to get detailed information about the kind of the error\&.
.RE
.LP
.nf

.B
printText(This, Htmltext) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxHtmlEasyPrinting()
.br
Htmltext = unicode:chardata()
.br
.RE
.RE
.LP
.nf

.B
printText(This, Htmltext, Options :: [Option]) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxHtmlEasyPrinting()
.br
Htmltext = unicode:chardata()
.br
Option = {basepath, unicode:chardata()}
.br
.RE
.RE
.RS
.LP
Print HTML text (not file!)\&.
.LP
Returns false in case of error - call \fIwxPrinter:getLastError/0\fR\& to get detailed information about the kind of the error\&.
.RE
.LP
.nf

.B
pageSetup(This) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxHtmlEasyPrinting()
.br
.RE
.RE
.RS
.LP
Display page setup dialog and allows the user to modify settings\&.
.RE
.LP
.nf

.B
setFonts(This, Normal_face, Fixed_face) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxHtmlEasyPrinting()
.br
Normal_face = Fixed_face = unicode:chardata()
.br
.RE
.RE
.LP
.nf

.B
setFonts(This, Normal_face, Fixed_face, Options :: [Option]) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxHtmlEasyPrinting()
.br
Normal_face = Fixed_face = unicode:chardata()
.br
Option = {sizes, [integer()]}
.br
.RE
.RE
.RS
.LP
Sets fonts\&.
.LP
See \fIwxHtmlDCRenderer::SetFonts\fR\& (not implemented in wx) for detailed description\&.
.RE
.LP
.nf

.B
setHeader(This, Header) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxHtmlEasyPrinting()
.br
Header = unicode:chardata()
.br
.RE
.RE
.LP
.nf

.B
setHeader(This, Header, Options :: [Option]) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxHtmlEasyPrinting()
.br
Header = unicode:chardata()
.br
Option = {pg, integer()}
.br
.RE
.RE
.RS
.LP
Set page header\&.
.LP
The following macros can be used inside it:
.RE
.LP
.nf

.B
setFooter(This, Footer) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxHtmlEasyPrinting()
.br
Footer = unicode:chardata()
.br
.RE
.RE
.LP
.nf

.B
setFooter(This, Footer, Options :: [Option]) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxHtmlEasyPrinting()
.br
Footer = unicode:chardata()
.br
Option = {pg, integer()}
.br
.RE
.RE
.RS
.LP
Set page footer\&.
.LP
The following macros can be used inside it: @DATE@ is replaced by the current date in default format @PAGENUM@ is replaced by page number @PAGESCNT@ is replaced by total number of pages @TIME@ is replaced by the current time in default format @TITLE@ is replaced with the title of the document
.RE
.LP
.nf

.B
destroy(This :: wxHtmlEasyPrinting()) -> ok
.br
.fi
.br
.RS
.LP
Destroys the object\&.
.RE