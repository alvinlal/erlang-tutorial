.TH wxHelpEvent 3 "wx 2.2.2" "wxWidgets team." "Erlang Module Definition"
.SH NAME
wxHelpEvent \- Functions for wxHelpEvent class
.SH DESCRIPTION
.LP
A help event is sent when the user has requested context-sensitive help\&. This can either be caused by the application requesting context-sensitive help mode via \fIwxContextHelp\fR\& (not implemented in wx), or (on MS Windows) by the system generating a WM_HELP message when the user pressed F1 or clicked on the query button in a dialog caption\&.
.LP
A help event is sent to the window that the user clicked on, and is propagated up the window hierarchy until the event is processed or there are no more event handlers\&.
.LP
The application should call \fIwxEvent:getId/1\fR\& to check the identity of the clicked-on window, and then either show some suitable help or call \fIwxEvent:skip/2\fR\& if the identifier is unrecognised\&.
.LP
Calling Skip is important because it allows wxWidgets to generate further events for ancestors of the clicked-on window\&. Otherwise it would be impossible to show help for container windows, since processing would stop after the first window found\&.
.LP
See: \fIwxContextHelp\fR\& (not implemented in wx), \fIwxDialog\fR\&, Overview events 
.LP
This class is derived (and can use functions) from: \fIwxEvent\fR\&
.LP
wxWidgets docs: wxHelpEvent
.SH "EVENTS"

.LP
Use \fIwxEvtHandler:connect/3\fR\& with \fIwxHelpEventType\fR\& to subscribe to events of this type\&.
.SH DATA TYPES
.nf

\fBwxHelpEvent()\fR\& = wx:wx_object()
.br
.fi
.nf

\fBwxHelp()\fR\& = #wxHelp{type = wxHelpEvent:wxHelpEventType()}
.br
.fi
.nf

\fBwxHelpEventType()\fR\& = help | detailed_help
.br
.fi
.SH EXPORTS
.LP
.nf

.B
getOrigin(This) -> wx:wx_enum()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxHelpEvent()
.br
.RE
.RE
.RS
.LP
Returns the origin of the help event which is one of the \fIwxHelpEvent::Origin\fR\& (not implemented in wx) values\&.
.LP
The application may handle events generated using the keyboard or mouse differently, e\&.g\&. by using \fIwx_misc:getMousePosition/0\fR\& for the mouse events\&.
.LP
See: \fIsetOrigin/2\fR\& 
.RE
.LP
.nf

.B
getPosition(This) -> {X :: integer(), Y :: integer()}
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxHelpEvent()
.br
.RE
.RE
.RS
.LP
Returns the left-click position of the mouse, in screen coordinates\&.
.LP
This allows the application to position the help appropriately\&.
.RE
.LP
.nf

.B
setOrigin(This, Origin) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxHelpEvent()
.br
Origin = wx:wx_enum()
.br
.RE
.RE
.RS
.LP
Set the help event origin, only used internally by wxWidgets normally\&.
.LP
See: \fIgetOrigin/1\fR\& 
.RE
.LP
.nf

.B
setPosition(This, Pt) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxHelpEvent()
.br
Pt = {X :: integer(), Y :: integer()}
.br
.RE
.RE
.RS
.LP
Sets the left-click position of the mouse, in screen coordinates\&.
.RE