.TH wxCheckBox 3 "wx 2.2.2" "wxWidgets team." "Erlang Module Definition"
.SH NAME
wxCheckBox \- Functions for wxCheckBox class
.SH DESCRIPTION
.LP
A checkbox is a labelled box which by default is either on (checkmark is visible) or off (no checkmark)\&. Optionally (when the wxCHK_3STATE style flag is set) it can have a third state, called the mixed or undetermined state\&. Often this is used as a "Does Not Apply" state\&.
.LP
Styles
.LP
This class supports the following styles:
.LP
See: \fIwxRadioButton\fR\&, \fIwxCommandEvent\fR\& 
.LP
This class is derived (and can use functions) from: \fIwxControl\fR\& \fIwxWindow\fR\& \fIwxEvtHandler\fR\&
.LP
wxWidgets docs: wxCheckBox
.SH "EVENTS"

.LP
Event types emitted from this class: \fIcommand_checkbox_clicked\fR\&
.SH DATA TYPES
.nf

\fBwxCheckBox()\fR\& = wx:wx_object()
.br
.fi
.SH EXPORTS
.LP
.nf

.B
new() -> wxCheckBox()
.br
.fi
.br
.RS
.LP
Default constructor\&.
.LP
See: \fIcreate/5\fR\&, \fIwxValidator\fR\& (not implemented in wx)
.RE
.LP
.nf

.B
new(Parent, Id, Label) -> wxCheckBox()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Parent = wxWindow:wxWindow()
.br
Id = integer()
.br
Label = unicode:chardata()
.br
.RE
.RE
.LP
.nf

.B
new(Parent, Id, Label, Options :: [Option]) -> wxCheckBox()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Parent = wxWindow:wxWindow()
.br
Id = integer()
.br
Label = unicode:chardata()
.br
Option = 
.br
    {pos, {X :: integer(), Y :: integer()}} |
.br
    {size, {W :: integer(), H :: integer()}} |
.br
    {style, integer()} |
.br
    {validator, wx:wx_object()}
.br
.RE
.RE
.RS
.LP
Constructor, creating and showing a checkbox\&.
.LP
See: \fIcreate/5\fR\&, \fIwxValidator\fR\& (not implemented in wx)
.RE
.LP
.nf

.B
destroy(This :: wxCheckBox()) -> ok
.br
.fi
.br
.RS
.LP
Destructor, destroying the checkbox\&.
.RE
.LP
.nf

.B
create(This, Parent, Id, Label) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxCheckBox()
.br
Parent = wxWindow:wxWindow()
.br
Id = integer()
.br
Label = unicode:chardata()
.br
.RE
.RE
.LP
.nf

.B
create(This, Parent, Id, Label, Options :: [Option]) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxCheckBox()
.br
Parent = wxWindow:wxWindow()
.br
Id = integer()
.br
Label = unicode:chardata()
.br
Option = 
.br
    {pos, {X :: integer(), Y :: integer()}} |
.br
    {size, {W :: integer(), H :: integer()}} |
.br
    {style, integer()} |
.br
    {validator, wx:wx_object()}
.br
.RE
.RE
.RS
.LP
Creates the checkbox for two-step construction\&.
.LP
See \fInew/4\fR\& for details\&.
.RE
.LP
.nf

.B
getValue(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxCheckBox()
.br
.RE
.RE
.RS
.LP
Gets the state of a 2-state checkbox\&.
.LP
Return: Returns true if it is checked, false otherwise\&.
.RE
.LP
.nf

.B
get3StateValue(This) -> wx:wx_enum()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxCheckBox()
.br
.RE
.RE
.RS
.LP
Gets the state of a 3-state checkbox\&.
.LP
Asserts when the function is used with a 2-state checkbox\&.
.RE
.LP
.nf

.B
is3rdStateAllowedForUser(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxCheckBox()
.br
.RE
.RE
.RS
.LP
Returns whether or not the user can set the checkbox to the third state\&.
.LP
Return: true if the user can set the third state of this checkbox, false if it can only be set programmatically or if it\&'s a 2-state checkbox\&.
.RE
.LP
.nf

.B
is3State(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxCheckBox()
.br
.RE
.RE
.RS
.LP
Returns whether or not the checkbox is a 3-state checkbox\&.
.LP
Return: true if this checkbox is a 3-state checkbox, false if it\&'s a 2-state checkbox\&.
.RE
.LP
.nf

.B
isChecked(This) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxCheckBox()
.br
.RE
.RE
.RS
.LP
This is just a maybe more readable synonym for \fIgetValue/1\fR\&: just as the latter, it returns true if the checkbox is checked and false otherwise\&.
.RE
.LP
.nf

.B
setValue(This, State) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxCheckBox()
.br
State = boolean()
.br
.RE
.RE
.RS
.LP
Sets the checkbox to the given state\&.
.LP
This does not cause a \fIwxEVT_CHECKBOX\fR\& event to get emitted\&.
.RE
.LP
.nf

.B
set3StateValue(This, State) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxCheckBox()
.br
State = wx:wx_enum()
.br
.RE
.RE
.RS
.LP
Sets the checkbox to the given state\&.
.LP
This does not cause a \fIwxEVT_CHECKBOX\fR\& event to get emitted\&.
.LP
Asserts when the checkbox is a 2-state checkbox and setting the state to wxCHK_UNDETERMINED\&.
.RE