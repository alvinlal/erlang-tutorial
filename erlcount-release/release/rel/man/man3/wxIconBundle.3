.TH wxIconBundle 3 "wx 2.2.2" "wxWidgets team." "Erlang Module Definition"
.SH NAME
wxIconBundle \- Functions for wxIconBundle class
.SH DESCRIPTION
.LP
This class contains multiple copies of an icon in different sizes\&. It is typically used in \fIwxDialog::SetIcons\fR\& (not implemented in wx) and \fIwxTopLevelWindow:setIcons/2\fR\&\&.
.LP
Predefined objects (include wx\&.hrl): ?wxNullIconBundle
.LP
wxWidgets docs: wxIconBundle
.SH DATA TYPES
.nf

\fBwxIconBundle()\fR\& = wx:wx_object()
.br
.fi
.SH EXPORTS
.LP
.nf

.B
new() -> wxIconBundle()
.br
.fi
.br
.RS
.LP
Default ctor\&.
.RE
.LP
.nf

.B
new(Ic) -> wxIconBundle()
.br
.fi
.br
.nf

.B
new(File) -> wxIconBundle()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
File = unicode:chardata()
.br
.RE
.RE
.RS
.LP
Initializes the bundle with the icon(s) found in the file\&.
.RE
.LP
.nf

.B
new(File, Type) -> wxIconBundle()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
File = unicode:chardata()
.br
Type = wx:wx_enum()
.br
.RE
.RE
.RS
.RE
.LP
.nf

.B
destroy(This :: wxIconBundle()) -> ok
.br
.fi
.br
.RS
.LP
Destructor\&.
.RE
.LP
.nf

.B
addIcon(This, File) -> ok
.br
.fi
.br
.nf

.B
addIcon(This, Icon) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxIconBundle()
.br
Icon = wxIcon:wxIcon()
.br
.RE
.RE
.RS
.LP
Adds the icon to the collection; if the collection already contains an icon with the same width and height, it is replaced by the new one\&.
.RE
.LP
.nf

.B
addIcon(This, File, Type) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxIconBundle()
.br
File = unicode:chardata()
.br
Type = wx:wx_enum()
.br
.RE
.RE
.RS
.RE
.LP
.nf

.B
getIcon(This) -> wxIcon:wxIcon()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxIconBundle()
.br
.RE
.RE
.LP
.nf

.B
getIcon(This, Size) -> wxIcon:wxIcon()
.br
.fi
.br
.nf

.B
getIcon(This, Size :: [Option]) -> wxIcon:wxIcon()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxIconBundle()
.br
Option = {size, integer()} | {flags, integer()}
.br
.RE
.RE
.RS
.LP
Same as\&.
.LP
\&.
.RE
.LP
.nf

.B
getIcon(This, Size, Options :: [Option]) -> wxIcon:wxIcon()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxIconBundle()
.br
Size = {W :: integer(), H :: integer()}
.br
Option = {flags, integer()}
.br
.RE
.RE
.RS
.LP
Returns the icon with the given size\&.
.LP
If \fIsize\fR\& is ?wxDefaultSize, it is interpreted as the standard system icon size, i\&.e\&. the size returned by \fIwxSystemSettings:getMetric/2\fR\& for \fIwxSYS_ICON_X\fR\& and \fIwxSYS_ICON_Y\fR\&\&.
.LP
If the bundle contains an icon with exactly the requested size, it\&'s always returned\&. Otherwise, the behaviour depends on the flags\&. If only \fIwxIconBundle::FALLBACK_NONE\fR\& (not implemented in wx) is given, the function returns an invalid icon\&. If \fIwxIconBundle::FALLBACK_SYSTEM\fR\& (not implemented in wx) is given, it tries to find the icon of standard system size, regardless of the size passed as parameter\&. Otherwise, or if the icon system size is not found neither, but \fIwxIconBundle::FALLBACK_NEAREST_LARGER\fR\& (not implemented in wx) flag is specified, the function returns the smallest icon of the size larger than the requested one or, if this fails too, just the icon closest to the specified size\&.
.LP
The \fIflags\fR\& parameter is available only since wxWidgets 2\&.9\&.4\&.
.RE