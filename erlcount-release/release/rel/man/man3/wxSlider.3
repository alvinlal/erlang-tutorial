.TH wxSlider 3 "wx 2.2.2" "wxWidgets team." "Erlang Module Definition"
.SH NAME
wxSlider \- Functions for wxSlider class
.SH DESCRIPTION
.LP
A slider is a control with a handle which can be pulled back and forth to change the value\&.
.LP
On Windows, the track bar control is used\&.
.LP
On GTK+, tick marks are only available for version 2\&.16 and later\&.
.LP
Slider generates the same events as \fIwxScrollBar\fR\& but in practice the most convenient way to process \fIwxSlider\fR\& updates is by handling the slider-specific \fIwxEVT_SLIDER\fR\& event which carries \fIwxCommandEvent\fR\& containing just the latest slider position\&.
.LP
Styles
.LP
This class supports the following styles:
.LP
The difference between EVT_SCROLL_THUMBRELEASE and EVT_SCROLL_CHANGED
.LP
The EVT_SCROLL_THUMBRELEASE event is only emitted when actually dragging the thumb using the mouse and releasing it (This EVT_SCROLL_THUMBRELEASE event is also followed by an EVT_SCROLL_CHANGED event)\&.
.LP
The EVT_SCROLL_CHANGED event also occurs when using the keyboard to change the thumb position, and when clicking next to the thumb (In all these cases the EVT_SCROLL_THUMBRELEASE event does not happen)\&. In short, the EVT_SCROLL_CHANGED event is triggered when scrolling/ moving has finished independently of the way it had started\&. Please see the page_samples_widgets ("Slider" page) to see the difference between EVT_SCROLL_THUMBRELEASE and EVT_SCROLL_CHANGED in action\&.
.LP
See: Overview events, \fIwxScrollBar\fR\& 
.LP
This class is derived (and can use functions) from: \fIwxControl\fR\& \fIwxWindow\fR\& \fIwxEvtHandler\fR\&
.LP
wxWidgets docs: wxSlider
.SH "EVENTS"

.LP
Event types emitted from this class: \fIscroll_top\fR\&, \fIscroll_bottom\fR\&, \fIscroll_lineup\fR\&, \fIscroll_linedown\fR\&, \fIscroll_pageup\fR\&, \fIscroll_pagedown\fR\&, \fIscroll_thumbtrack\fR\&, \fIscroll_thumbrelease\fR\&, \fIscroll_changed\fR\&, \fIscroll_top\fR\&, \fIscroll_bottom\fR\&, \fIscroll_lineup\fR\&, \fIscroll_linedown\fR\&, \fIscroll_pageup\fR\&, \fIscroll_pagedown\fR\&, \fIscroll_thumbtrack\fR\&, \fIscroll_thumbrelease\fR\&, \fIscroll_changed\fR\&, \fIcommand_slider_updated\fR\&
.SH DATA TYPES
.nf

\fBwxSlider()\fR\& = wx:wx_object()
.br
.fi
.SH EXPORTS
.LP
.nf

.B
new() -> wxSlider()
.br
.fi
.br
.RS
.LP
Default constructor\&.
.RE
.LP
.nf

.B
new(Parent, Id, Value, MinValue, MaxValue) -> wxSlider()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Parent = wxWindow:wxWindow()
.br
Id = Value = MinValue = MaxValue = integer()
.br
.RE
.RE
.LP
.nf

.B
new(Parent, Id, Value, MinValue, MaxValue, Options :: [Option]) ->
.B
       wxSlider()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Parent = wxWindow:wxWindow()
.br
Id = Value = MinValue = MaxValue = integer()
.br
Option = 
.br
    {pos, {X :: integer(), Y :: integer()}} |
.br
    {size, {W :: integer(), H :: integer()}} |
.br
    {style, integer()} |
.br
    {validator, wx:wx_object()}
.br
.RE
.RE
.RS
.LP
Constructor, creating and showing a slider\&.
.LP
See: \fIcreate/7\fR\&, \fIwxValidator\fR\& (not implemented in wx)
.RE
.LP
.nf

.B
destroy(This :: wxSlider()) -> ok
.br
.fi
.br
.RS
.LP
Destructor, destroying the slider\&.
.RE
.LP
.nf

.B
create(This, Parent, Id, Value, MinValue, MaxValue) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSlider()
.br
Parent = wxWindow:wxWindow()
.br
Id = Value = MinValue = MaxValue = integer()
.br
.RE
.RE
.LP
.nf

.B
create(This, Parent, Id, Value, MinValue, MaxValue,
.B
       Options :: [Option]) ->
.B
          boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSlider()
.br
Parent = wxWindow:wxWindow()
.br
Id = Value = MinValue = MaxValue = integer()
.br
Option = 
.br
    {pos, {X :: integer(), Y :: integer()}} |
.br
    {size, {W :: integer(), H :: integer()}} |
.br
    {style, integer()} |
.br
    {validator, wx:wx_object()}
.br
.RE
.RE
.RS
.LP
Used for two-step slider construction\&.
.LP
See \fInew/6\fR\& for further details\&.
.RE
.LP
.nf

.B
getLineSize(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSlider()
.br
.RE
.RE
.RS
.LP
Returns the line size\&.
.LP
See: \fIsetLineSize/2\fR\& 
.RE
.LP
.nf

.B
getMax(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSlider()
.br
.RE
.RE
.RS
.LP
Gets the maximum slider value\&.
.LP
See: \fIgetMin/1\fR\&, \fIsetRange/3\fR\& 
.RE
.LP
.nf

.B
getMin(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSlider()
.br
.RE
.RE
.RS
.LP
Gets the minimum slider value\&.
.LP
See: \fIgetMin/1\fR\&, \fIsetRange/3\fR\& 
.RE
.LP
.nf

.B
getPageSize(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSlider()
.br
.RE
.RE
.RS
.LP
Returns the page size\&.
.LP
See: \fIsetPageSize/2\fR\& 
.RE
.LP
.nf

.B
getThumbLength(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSlider()
.br
.RE
.RE
.RS
.LP
Returns the thumb length\&.
.LP
Only for:wxmsw
.LP
See: \fIsetThumbLength/2\fR\& 
.RE
.LP
.nf

.B
getValue(This) -> integer()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSlider()
.br
.RE
.RE
.RS
.LP
Gets the current slider value\&.
.LP
See: \fIgetMin/1\fR\&, \fIgetMax/1\fR\&, \fIsetValue/2\fR\& 
.RE
.LP
.nf

.B
setLineSize(This, LineSize) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSlider()
.br
LineSize = integer()
.br
.RE
.RE
.RS
.LP
Sets the line size for the slider\&.
.LP
See: \fIgetLineSize/1\fR\& 
.RE
.LP
.nf

.B
setPageSize(This, PageSize) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSlider()
.br
PageSize = integer()
.br
.RE
.RE
.RS
.LP
Sets the page size for the slider\&.
.LP
See: \fIgetPageSize/1\fR\& 
.RE
.LP
.nf

.B
setRange(This, MinValue, MaxValue) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSlider()
.br
MinValue = MaxValue = integer()
.br
.RE
.RE
.RS
.LP
Sets the minimum and maximum slider values\&.
.LP
See: \fIgetMin/1\fR\&, \fIgetMax/1\fR\& 
.RE
.LP
.nf

.B
setThumbLength(This, Len) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSlider()
.br
Len = integer()
.br
.RE
.RE
.RS
.LP
Sets the slider thumb length\&.
.LP
Only for:wxmsw
.LP
See: \fIgetThumbLength/1\fR\& 
.RE
.LP
.nf

.B
setValue(This, Value) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
This = wxSlider()
.br
Value = integer()
.br
.RE
.RE
.RS
.LP
Sets the slider position\&.
.RE