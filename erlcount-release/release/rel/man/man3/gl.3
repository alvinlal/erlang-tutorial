.TH gl 3 "wx 2.2.2" "Ericsson AB" "Erlang Module Definition"
.SH NAME
gl \- Erlang wrapper functions for OpenGL
.SH DESCRIPTION
.LP
Standard OpenGL API
.LP
This documents the functions as a brief version of the complete OpenGL reference pages\&.
.SH DATA TYPES
.nf

\fBclamp()\fR\& = float()
.br
.fi
.nf

\fBoffset()\fR\& = integer() >= 0
.br
.fi
.nf

\fBi()\fR\& = integer()
.br
.fi
.nf

\fBf()\fR\& = float()
.br
.fi
.nf

\fBenum()\fR\& = integer() >= 0
.br
.fi
.nf

\fBmatrix()\fR\& = m12() | m16()
.br
.fi
.nf

\fBm12()\fR\& = 
.br
    {f(), f(), f(), f(), f(), f(), f(), f(), f(), f(), f(), f()}
.br
.fi
.nf

\fBm16()\fR\& = 
.br
    {f(),
.br
     f(),
.br
     f(),
.br
     f(),
.br
     f(),
.br
     f(),
.br
     f(),
.br
     f(),
.br
     f(),
.br
     f(),
.br
     f(),
.br
     f(),
.br
     f(),
.br
     f(),
.br
     f(),
.br
     f()}
.br
.fi
.nf

\fBmem()\fR\& = binary() | tuple()
.br
.fi
.SH EXPORTS
.LP
.nf

.B
accum(Op :: enum(), Value :: f()) -> ok
.br
.fi
.br
.RS
.LP
The accumulation buffer is an extended-range color buffer\&. Images are not rendered into it\&. Rather, images rendered into one of the color buffers are added to the contents of the accumulation buffer after rendering\&. Effects such as antialiasing (of points, lines, and polygons), motion blur, and depth of field can be created by accumulating images generated with different transformation matrices\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
activeShaderProgram(Pipeline :: i(), Program :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:activeShaderProgram/2\fR\& sets the linked program named by \fIProgram\fR\& to be the active program for the program pipeline object \fIPipeline\fR\&\&. The active program in the active program pipeline object is the target of calls to \fIgl:uniform()\fR\& when no program has been made current through a call to \fIgl:useProgram/1\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
activeTexture(Texture :: enum()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:activeTexture/1\fR\& selects which texture unit subsequent texture state calls will affect\&. The number of texture units an implementation supports is implementation dependent, but must be at least 80\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
alphaFunc(Func :: enum(), Ref :: clamp()) -> ok
.br
.fi
.br
.RS
.LP
The alpha test discards fragments depending on the outcome of a comparison between an incoming fragment\&'s alpha value and a constant reference value\&. \fIgl:alphaFunc/2\fR\& specifies the reference value and the comparison function\&. The comparison is performed only if alpha testing is enabled\&. By default, it is not enabled\&. (See \fIgl:enable/1\fR\& and \fIgl:disable/1\fR\& of \fI?GL_ALPHA_TEST\fR\&\&.)
.LP
External documentation\&.
.RE
.LP
.nf

.B
areTexturesResident(Textures :: [i()]) ->
.B
                       {0 | 1, Residences :: [0 | 1]}
.br
.fi
.br
.RS
.LP
GL establishes a ``working set\&'\&' of textures that are resident in texture memory\&. These textures can be bound to a texture target much more efficiently than textures that are not resident\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
arrayElement(I :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:arrayElement/1\fR\& commands are used within \fIgl:\&'begin\&'/1\fR\&/\fIgl:\&'end\&'/0\fR\& pairs to specify vertex and attribute data for point, line, and polygon primitives\&. If \fI?GL_VERTEX_ARRAY\fR\& is enabled when \fIgl:arrayElement/1\fR\& is called, a single vertex is drawn, using vertex and attribute data taken from location \fII\fR\& of the enabled arrays\&. If \fI?GL_VERTEX_ARRAY\fR\& is not enabled, no drawing occurs but the attributes corresponding to the enabled arrays are modified\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
attachShader(Program :: i(), Shader :: i()) -> ok
.br
.fi
.br
.RS
.LP
In order to create a complete shader program, there must be a way to specify the list of things that will be linked together\&. Program objects provide this mechanism\&. Shaders that are to be linked together in a program object must first be attached to that program object\&. \fIgl:attachShader/2\fR\& attaches the shader object specified by \fIShader\fR\& to the program object specified by \fIProgram\fR\&\&. This indicates that \fIShader\fR\& will be included in link operations that will be performed on \fIProgram\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
\&'begin\&'(Mode :: enum()) -> ok
.br
.fi
.br
.nf

.B
\&'end\&'() -> ok
.br
.fi
.br
.RS
.LP
\fIgl:\&'begin\&'/1\fR\& and \fIgl:\&'end\&'/0\fR\& delimit the vertices that define a primitive or a group of like primitives\&. \fIgl:\&'begin\&'/1\fR\& accepts a single argument that specifies in which of ten ways the vertices are interpreted\&. Taking n as an integer count starting at one, and N as the total number of vertices specified, the interpretations are as follows:
.LP
External documentation\&.
.RE
.LP
.nf

.B
beginConditionalRender(Id :: i(), Mode :: enum()) -> ok
.br
.fi
.br
.nf

.B
endConditionalRender() -> ok
.br
.fi
.br
.RS
.LP
Conditional rendering is started using \fIgl:beginConditionalRender/2\fR\& and ended using \fIgl:endConditionalRender/0\fR\&\&. During conditional rendering, all vertex array commands, as well as \fIgl:clear/1\fR\& and \fIgl:clearBuffer()\fR\& have no effect if the (\fI?GL_SAMPLES_PASSED\fR\&) result of the query object \fIId\fR\& is zero, or if the (\fI?GL_ANY_SAMPLES_PASSED\fR\&) result is \fI?GL_FALSE\fR\&\&. The results of commands setting the current vertex state, such as \fIgl:vertexAttrib()\fR\& are undefined\&. If the (\fI?GL_SAMPLES_PASSED\fR\&) result is non-zero or if the (\fI?GL_ANY_SAMPLES_PASSED\fR\&) result is \fI?GL_TRUE\fR\&, such commands are not discarded\&. The \fIId\fR\& parameter to \fIgl:beginConditionalRender/2\fR\& must be the name of a query object previously returned from a call to \fIgl:genQueries/1\fR\&\&. \fIMode\fR\& specifies how the results of the query object are to be interpreted\&. If \fIMode\fR\& is \fI?GL_QUERY_WAIT\fR\&, the GL waits for the results of the query to be available and then uses the results to determine if subsequent rendering commands are discarded\&. If \fIMode\fR\& is \fI?GL_QUERY_NO_WAIT\fR\&, the GL may choose to unconditionally execute the subsequent rendering commands without waiting for the query to complete\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
beginQuery(Target :: enum(), Id :: i()) -> ok
.br
.fi
.br
.nf

.B
endQuery(Target :: enum()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:beginQuery/2\fR\& and \fIgl:endQuery/1\fR\& delimit the boundaries of a query object\&. \fIQuery\fR\& must be a name previously returned from a call to \fIgl:genQueries/1\fR\&\&. If a query object with name \fIId\fR\& does not yet exist it is created with the type determined by \fITarget\fR\&\&. \fITarget\fR\& must be one of \fI?GL_SAMPLES_PASSED\fR\&, \fI?GL_ANY_SAMPLES_PASSED\fR\&, \fI?GL_PRIMITIVES_GENERATED\fR\&, \fI?GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN\fR\&, or \fI?GL_TIME_ELAPSED\fR\&\&. The behavior of the query object depends on its type and is as follows\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
beginQueryIndexed(Target :: enum(), Index :: i(), Id :: i()) -> ok
.br
.fi
.br
.nf

.B
endQueryIndexed(Target :: enum(), Index :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:beginQueryIndexed/3\fR\& and \fIgl:endQueryIndexed/2\fR\& delimit the boundaries of a query object\&. \fIQuery\fR\& must be a name previously returned from a call to \fIgl:genQueries/1\fR\&\&. If a query object with name \fIId\fR\& does not yet exist it is created with the type determined by \fITarget\fR\&\&. \fITarget\fR\& must be one of \fI?GL_SAMPLES_PASSED\fR\&, \fI?GL_ANY_SAMPLES_PASSED\fR\&, \fI?GL_PRIMITIVES_GENERATED\fR\&, \fI?GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN\fR\&, or \fI?GL_TIME_ELAPSED\fR\&\&. The behavior of the query object depends on its type and is as follows\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
beginTransformFeedback(PrimitiveMode :: enum()) -> ok
.br
.fi
.br
.nf

.B
endTransformFeedback() -> ok
.br
.fi
.br
.RS
.LP
Transform feedback mode captures the values of varying variables written by the vertex shader (or, if active, the geometry shader)\&. Transform feedback is said to be active after a call to \fIgl:beginTransformFeedback/1\fR\& until a subsequent call to \fIgl:endTransformFeedback/0\fR\&\&. Transform feedback commands must be paired\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
bindAttribLocation(Program :: i(), Index :: i(), Name :: string()) ->
.B
                      ok
.br
.fi
.br
.RS
.LP
\fIgl:bindAttribLocation/3\fR\& is used to associate a user-defined attribute variable in the program object specified by \fIProgram\fR\& with a generic vertex attribute index\&. The name of the user-defined attribute variable is passed as a null terminated string in \fIName\fR\&\&. The generic vertex attribute index to be bound to this variable is specified by \fIIndex\fR\&\&. When \fIProgram\fR\& is made part of current state, values provided via the generic vertex attribute \fIIndex\fR\& will modify the value of the user-defined attribute variable specified by \fIName\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
bindBuffer(Target :: enum(), Buffer :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:bindBuffer/2\fR\& binds a buffer object to the specified buffer binding point\&. Calling \fIgl:bindBuffer/2\fR\& with \fITarget\fR\& set to one of the accepted symbolic constants and \fIBuffer\fR\& set to the name of a buffer object binds that buffer object name to the target\&. If no buffer object with name \fIBuffer\fR\& exists, one is created with that name\&. When a buffer object is bound to a target, the previous binding for that target is automatically broken\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
bindBufferBase(Target :: enum(), Index :: i(), Buffer :: i()) ->
.B
                  ok
.br
.fi
.br
.RS
.LP
\fIgl:bindBufferBase/3\fR\& binds the buffer object \fIBuffer\fR\& to the binding point at index \fIIndex\fR\& of the array of targets specified by \fITarget\fR\&\&. Each \fITarget\fR\& represents an indexed array of buffer binding points, as well as a single general binding point that can be used by other buffer manipulation functions such as \fIgl:bindBuffer/2\fR\& or \fIglMapBuffer\fR\&\&. In addition to binding \fIBuffer\fR\& to the indexed buffer binding target, \fIgl:bindBufferBase/3\fR\& also binds \fIBuffer\fR\& to the generic buffer binding point specified by \fITarget\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
bindBufferRange(Target :: enum(),
.B
                Index :: i(),
.B
                Buffer :: i(),
.B
                Offset :: i(),
.B
                Size :: i()) ->
.B
                   ok
.br
.fi
.br
.RS
.LP
\fIgl:bindBufferRange/5\fR\& binds a range the buffer object \fIBuffer\fR\& represented by \fIOffset\fR\& and \fISize\fR\& to the binding point at index \fIIndex\fR\& of the array of targets specified by \fITarget\fR\&\&. Each \fITarget\fR\& represents an indexed array of buffer binding points, as well as a single general binding point that can be used by other buffer manipulation functions such as \fIgl:bindBuffer/2\fR\& or \fIglMapBuffer\fR\&\&. In addition to binding a range of \fIBuffer\fR\& to the indexed buffer binding target, \fIgl:bindBufferRange/5\fR\& also binds the range to the generic buffer binding point specified by \fITarget\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
bindBuffersBase(Target :: enum(), First :: i(), Buffers :: [i()]) ->
.B
                   ok
.br
.fi
.br
.RS
.LP
\fIgl:bindBuffersBase/3\fR\& binds a set of \fICount\fR\& buffer objects whose names are given in the array \fIBuffers\fR\& to the \fICount\fR\& consecutive binding points starting from index \fIFirst\fR\& of the array of targets specified by \fITarget\fR\&\&. If \fIBuffers\fR\& is \fI?NULL\fR\& then \fIgl:bindBuffersBase/3\fR\& unbinds any buffers that are currently bound to the referenced binding points\&. Assuming no errors are generated, it is equivalent to the following pseudo-code, which calls \fIgl:bindBufferBase/3\fR\&, with the exception that the non-indexed \fITarget\fR\& is not changed by \fIgl:bindBuffersBase/3\fR\&:
.LP
External documentation\&.
.RE
.LP
.nf

.B
bindBuffersRange(Target :: enum(),
.B
                 First :: i(),
.B
                 Buffers :: [i()],
.B
                 Offsets :: [i()],
.B
                 Sizes :: [i()]) ->
.B
                    ok
.br
.fi
.br
.RS
.LP
\fIgl:bindBuffersRange/5\fR\& binds a set of \fICount\fR\& ranges from buffer objects whose names are given in the array \fIBuffers\fR\& to the \fICount\fR\& consecutive binding points starting from index \fIFirst\fR\& of the array of targets specified by \fITarget\fR\&\&. \fIOffsets\fR\& specifies the address of an array containing \fICount\fR\& starting offsets within the buffers, and \fISizes\fR\& specifies the address of an array of \fICount\fR\& sizes of the ranges\&. If \fIBuffers\fR\& is \fI?NULL\fR\& then \fIOffsets\fR\& and \fISizes\fR\& are ignored and \fIgl:bindBuffersRange/5\fR\& unbinds any buffers that are currently bound to the referenced binding points\&. Assuming no errors are generated, it is equivalent to the following pseudo-code, which calls \fIgl:bindBufferRange/5\fR\&, with the exception that the non-indexed \fITarget\fR\& is not changed by \fIgl:bindBuffersRange/5\fR\&:
.LP
External documentation\&.
.RE
.LP
.nf

.B
bindFragDataLocation(Program :: i(),
.B
                     Color :: i(),
.B
                     Name :: string()) ->
.B
                        ok
.br
.fi
.br
.RS
.LP
\fIgl:bindFragDataLocation/3\fR\& explicitly specifies the binding of the user-defined varying out variable \fIName\fR\& to fragment shader color number \fIColorNumber\fR\& for program \fIProgram\fR\&\&. If \fIName\fR\& was bound previously, its assigned binding is replaced with \fIColorNumber\fR\&\&. \fIName\fR\& must be a null-terminated string\&. \fIColorNumber\fR\& must be less than \fI?GL_MAX_DRAW_BUFFERS\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
bindFragDataLocationIndexed(Program :: i(),
.B
                            ColorNumber :: i(),
.B
                            Index :: i(),
.B
                            Name :: string()) ->
.B
                               ok
.br
.fi
.br
.RS
.LP
\fIgl:bindFragDataLocationIndexed/4\fR\& specifies that the varying out variable \fIName\fR\& in \fIProgram\fR\& should be bound to fragment color \fIColorNumber\fR\& when the program is next linked\&. \fIIndex\fR\& may be zero or one to specify that the color be used as either the first or second color input to the blend equation, respectively\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
bindFramebuffer(Target :: enum(), Framebuffer :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:bindFramebuffer/2\fR\& binds the framebuffer object with name \fIFramebuffer\fR\& to the framebuffer target specified by \fITarget\fR\&\&. \fITarget\fR\& must be either \fI?GL_DRAW_FRAMEBUFFER\fR\&, \fI?GL_READ_FRAMEBUFFER\fR\& or \fI?GL_FRAMEBUFFER\fR\&\&. If a framebuffer object is bound to \fI?GL_DRAW_FRAMEBUFFER\fR\& or \fI?GL_READ_FRAMEBUFFER\fR\&, it becomes the target for rendering or readback operations, respectively, until it is deleted or another framebuffer is bound to the corresponding bind point\&. Calling \fIgl:bindFramebuffer/2\fR\& with \fITarget\fR\& set to \fI?GL_FRAMEBUFFER\fR\& binds \fIFramebuffer\fR\& to both the read and draw framebuffer targets\&. \fIFramebuffer\fR\& is the name of a framebuffer object previously returned from a call to \fIgl:genFramebuffers/1\fR\&, or zero to break the existing binding of a framebuffer object to \fITarget\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
bindImageTexture(Unit, Texture, Level, Layered, Layer, Access,
.B
                 Format) ->
.B
                    ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Unit = Texture = Level = i()
.br
Layered = 0 | 1
.br
Layer = i()
.br
Access = Format = enum()
.br
.RE
.RE
.RS
.LP
\fIgl:bindImageTexture/7\fR\& binds a single level of a texture to an image unit for the purpose of reading and writing it from shaders\&. \fIUnit\fR\& specifies the zero-based index of the image unit to which to bind the texture level\&. \fITexture\fR\& specifies the name of an existing texture object to bind to the image unit\&. If \fITexture\fR\& is zero, then any existing binding to the image unit is broken\&. \fILevel\fR\& specifies the level of the texture to bind to the image unit\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
bindImageTextures(First :: i(), Textures :: [i()]) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:bindImageTextures/2\fR\& binds images from an array of existing texture objects to a specified number of consecutive image units\&. \fICount\fR\& specifies the number of texture objects whose names are stored in the array \fITextures\fR\&\&. That number of texture names are read from the array and bound to the \fICount\fR\& consecutive texture units starting from \fIFirst\fR\&\&. If the name zero appears in the \fITextures\fR\& array, any existing binding to the image unit is reset\&. Any non-zero entry in \fITextures\fR\& must be the name of an existing texture object\&. When a non-zero entry in \fITextures\fR\& is present, the image at level zero is bound, the binding is considered layered, with the first layer set to zero, and the image is bound for read-write access\&. The image unit format parameter is taken from the internal format of the image at level zero of the texture object\&. For cube map textures, the internal format of the positive X image of level zero is used\&. If \fITextures\fR\& is \fI?NULL\fR\& then it is as if an appropriately sized array containing only zeros had been specified\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
bindProgramPipeline(Pipeline :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:bindProgramPipeline/1\fR\& binds a program pipeline object to the current context\&. \fIPipeline\fR\& must be a name previously returned from a call to \fIgl:genProgramPipelines/1\fR\&\&. If no program pipeline exists with name \fIPipeline\fR\& then a new pipeline object is created with that name and initialized to the default state vector\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
bindRenderbuffer(Target :: enum(), Renderbuffer :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:bindRenderbuffer/2\fR\& binds the renderbuffer object with name \fIRenderbuffer\fR\& to the renderbuffer target specified by \fITarget\fR\&\&. \fITarget\fR\& must be \fI?GL_RENDERBUFFER\fR\&\&. \fIRenderbuffer\fR\& is the name of a renderbuffer object previously returned from a call to \fIgl:genRenderbuffers/1\fR\&, or zero to break the existing binding of a renderbuffer object to \fITarget\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
bindSampler(Unit :: i(), Sampler :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:bindSampler/2\fR\& binds \fISampler\fR\& to the texture unit at index \fIUnit\fR\&\&. \fISampler\fR\& must be zero or the name of a sampler object previously returned from a call to \fIgl:genSamplers/1\fR\&\&. \fIUnit\fR\& must be less than the value of \fI?GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
bindSamplers(First :: i(), Samplers :: [i()]) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:bindSamplers/2\fR\& binds samplers from an array of existing sampler objects to a specified number of consecutive sampler units\&. \fICount\fR\& specifies the number of sampler objects whose names are stored in the array \fISamplers\fR\&\&. That number of sampler names is read from the array and bound to the \fICount\fR\& consecutive sampler units starting from \fIFirst\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
bindTexture(Target :: enum(), Texture :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:bindTexture/2\fR\& lets you create or use a named texture\&. Calling \fIgl:bindTexture/2\fR\& with \fITarget\fR\& set to \fI?GL_TEXTURE_1D\fR\&, \fI?GL_TEXTURE_2D\fR\&, \fI?GL_TEXTURE_3D\fR\&, \fI?GL_TEXTURE_1D_ARRAY\fR\&, \fI?GL_TEXTURE_2D_ARRAY\fR\&, \fI?GL_TEXTURE_RECTANGLE\fR\&, \fI?GL_TEXTURE_CUBE_MAP\fR\&, \fI?GL_TEXTURE_CUBE_MAP_ARRAY\fR\&, \fI?GL_TEXTURE_BUFFER\fR\&, \fI?GL_TEXTURE_2D_MULTISAMPLE\fR\& or \fI?GL_TEXTURE_2D_MULTISAMPLE_ARRAY\fR\& and \fITexture\fR\& set to the name of the new texture binds the texture name to the target\&. When a texture is bound to a target, the previous binding for that target is automatically broken\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
bindTextureUnit(Unit :: i(), Texture :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:bindTextureUnit/2\fR\& binds an existing texture object to the texture unit numbered \fIUnit\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
bindTextures(First :: i(), Textures :: [i()]) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:bindTextures/2\fR\& binds an array of existing texture objects to a specified number of consecutive texture units\&. \fICount\fR\& specifies the number of texture objects whose names are stored in the array \fITextures\fR\&\&. That number of texture names are read from the array and bound to the \fICount\fR\& consecutive texture units starting from \fIFirst\fR\&\&. The target, or type of texture is deduced from the texture object and each texture is bound to the corresponding target of the texture unit\&. If the name zero appears in the \fITextures\fR\& array, any existing binding to any target of the texture unit is reset and the default texture for that target is bound in its place\&. Any non-zero entry in \fITextures\fR\& must be the name of an existing texture object\&. If \fITextures\fR\& is \fI?NULL\fR\& then it is as if an appropriately sized array containing only zeros had been specified\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
bindTransformFeedback(Target :: enum(), Id :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:bindTransformFeedback/2\fR\& binds the transform feedback object with name \fIId\fR\& to the current GL state\&. \fIId\fR\& must be a name previously returned from a call to \fIgl:genTransformFeedbacks/1\fR\&\&. If \fIId\fR\& has not previously been bound, a new transform feedback object with name \fIId\fR\& and initialized with the default transform state vector is created\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
bindVertexArray(Array :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:bindVertexArray/1\fR\& binds the vertex array object with name \fIArray\fR\&\&. \fIArray\fR\& is the name of a vertex array object previously returned from a call to \fIgl:genVertexArrays/1\fR\&, or zero to break the existing vertex array object binding\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
bindVertexBuffer(Bindingindex :: i(),
.B
                 Buffer :: i(),
.B
                 Offset :: i(),
.B
                 Stride :: i()) ->
.B
                    ok
.br
.fi
.br
.nf

.B
vertexArrayVertexBuffer(Vaobj :: i(),
.B
                        Bindingindex :: i(),
.B
                        Buffer :: i(),
.B
                        Offset :: i(),
.B
                        Stride :: i()) ->
.B
                           ok
.br
.fi
.br
.RS
.LP
\fIgl:bindVertexBuffer/4\fR\& and \fIgl:vertexArrayVertexBuffer/5\fR\& bind the buffer named \fIBuffer\fR\& to the vertex buffer binding point whose index is given by \fIBindingindex\fR\&\&. \fIgl:bindVertexBuffer/4\fR\& modifies the binding of the currently bound vertex array object, whereas \fIgl:vertexArrayVertexBuffer/5\fR\& allows the caller to specify ID of the vertex array object with an argument named \fIVaobj\fR\&, for which the binding should be modified\&. \fIOffset\fR\& and \fIStride\fR\& specify the offset of the first element within the buffer and the distance between elements within the buffer, respectively, and are both measured in basic machine units\&. \fIBindingindex\fR\& must be less than the value of \fI?GL_MAX_VERTEX_ATTRIB_BINDINGS\fR\&\&. \fIOffset\fR\& and \fIStride\fR\& must be greater than or equal to zero\&. If \fIBuffer\fR\& is zero, then any buffer currently bound to the specified binding point is unbound\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
bindVertexBuffers(First :: i(),
.B
                  Buffers :: [i()],
.B
                  Offsets :: [i()],
.B
                  Strides :: [i()]) ->
.B
                     ok
.br
.fi
.br
.nf

.B
vertexArrayVertexBuffers(Vaobj :: i(),
.B
                         First :: i(),
.B
                         Buffers :: [i()],
.B
                         Offsets :: [i()],
.B
                         Strides :: [i()]) ->
.B
                            ok
.br
.fi
.br
.RS
.LP
\fIgl:bindVertexBuffers/4\fR\& and \fIgl:vertexArrayVertexBuffers/5\fR\& bind storage from an array of existing buffer objects to a specified number of consecutive vertex buffer binding points units in a vertex array object\&. For \fIgl:bindVertexBuffers/4\fR\&, the vertex array object is the currently bound vertex array object\&. For \fIgl:vertexArrayVertexBuffers/5\fR\&, \fIVaobj\fR\& is the name of the vertex array object\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
bitmap(Width, Height, Xorig, Yorig, Xmove, Ymove, Bitmap) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Width = Height = i()
.br
Xorig = Yorig = Xmove = Ymove = f()
.br
Bitmap = offset() | mem()
.br
.RE
.RE
.RS
.LP
A bitmap is a binary image\&. When drawn, the bitmap is positioned relative to the current raster position, and frame buffer pixels corresponding to 1\&'s in the bitmap are written using the current raster color or index\&. Frame buffer pixels corresponding to 0\&'s in the bitmap are not modified\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
blendColor(Red :: clamp(),
.B
           Green :: clamp(),
.B
           Blue :: clamp(),
.B
           Alpha :: clamp()) ->
.B
              ok
.br
.fi
.br
.RS
.LP
The \fI?GL_BLEND_COLOR\fR\& may be used to calculate the source and destination blending factors\&. The color components are clamped to the range [0 1] before being stored\&. See \fIgl:blendFunc/2\fR\& for a complete description of the blending operations\&. Initially the \fI?GL_BLEND_COLOR\fR\& is set to (0, 0, 0, 0)\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
blendEquation(Mode :: enum()) -> ok
.br
.fi
.br
.nf

.B
blendEquationi(Buf :: i(), Mode :: enum()) -> ok
.br
.fi
.br
.RS
.LP
The blend equations determine how a new pixel (the \&'\&'source\&'\&' color) is combined with a pixel already in the framebuffer (the \&'\&'destination\&'\&' color)\&. This function sets both the RGB blend equation and the alpha blend equation to a single equation\&. \fIgl:blendEquationi/2\fR\& specifies the blend equation for a single draw buffer whereas \fIgl:blendEquation/1\fR\& sets the blend equation for all draw buffers\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
blendEquationSeparate(ModeRGB :: enum(), ModeAlpha :: enum()) ->
.B
                         ok
.br
.fi
.br
.nf

.B
blendEquationSeparatei(Buf :: i(),
.B
                       ModeRGB :: enum(),
.B
                       ModeAlpha :: enum()) ->
.B
                          ok
.br
.fi
.br
.RS
.LP
The blend equations determines how a new pixel (the \&'\&'source\&'\&' color) is combined with a pixel already in the framebuffer (the \&'\&'destination\&'\&' color)\&. These functions specify one blend equation for the RGB-color components and one blend equation for the alpha component\&. \fIgl:blendEquationSeparatei/3\fR\& specifies the blend equations for a single draw buffer whereas \fIgl:blendEquationSeparate/2\fR\& sets the blend equations for all draw buffers\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
blendFunc(Sfactor :: enum(), Dfactor :: enum()) -> ok
.br
.fi
.br
.nf

.B
blendFunci(Buf :: i(), Src :: enum(), Dst :: enum()) -> ok
.br
.fi
.br
.RS
.LP
Pixels can be drawn using a function that blends the incoming (source) RGBA values with the RGBA values that are already in the frame buffer (the destination values)\&. Blending is initially disabled\&. Use \fIgl:enable/1\fR\& and \fIgl:disable/1\fR\& with argument \fI?GL_BLEND\fR\& to enable and disable blending\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
blendFuncSeparate(SfactorRGB, DfactorRGB, SfactorAlpha,
.B
                  DfactorAlpha) ->
.B
                     ok
.br
.fi
.br
.nf

.B
blendFuncSeparatei(Buf :: i(),
.B
                   SrcRGB :: enum(),
.B
                   DstRGB :: enum(),
.B
                   SrcAlpha :: enum(),
.B
                   DstAlpha :: enum()) ->
.B
                      ok
.br
.fi
.br
.RS
.LP
Pixels can be drawn using a function that blends the incoming (source) RGBA values with the RGBA values that are already in the frame buffer (the destination values)\&. Blending is initially disabled\&. Use \fIgl:enable/1\fR\& and \fIgl:disable/1\fR\& with argument \fI?GL_BLEND\fR\& to enable and disable blending\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
blitFramebuffer(SrcX0, SrcY0, SrcX1, SrcY1, DstX0, DstY0, DstX1,
.B
                DstY1, Mask, Filter) ->
.B
                   ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
SrcX0 = SrcY0 = SrcX1 = SrcY1 = DstX0 = DstY0 = DstX1 = DstY1 = Mask = i()
.br
Filter = enum()
.br
.RE
.RE
.RS
.LP
\fIgl:blitFramebuffer/10\fR\& and \fIglBlitNamedFramebuffer\fR\& transfer a rectangle of pixel values from one region of a read framebuffer to another region of a draw framebuffer\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
bufferData(Target :: enum(),
.B
           Size :: i(),
.B
           Data :: offset() | mem(),
.B
           Usage :: enum()) ->
.B
              ok
.br
.fi
.br
.RS
.LP
\fIgl:bufferData/4\fR\& and \fIglNamedBufferData\fR\& create a new data store for a buffer object\&. In case of \fIgl:bufferData/4\fR\&, the buffer object currently bound to \fITarget\fR\& is used\&. For \fIglNamedBufferData\fR\&, a buffer object associated with ID specified by the caller in \fIBuffer\fR\& will be used instead\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
bufferStorage(Target :: enum(),
.B
              Size :: i(),
.B
              Data :: offset() | mem(),
.B
              Flags :: i()) ->
.B
                 ok
.br
.fi
.br
.RS
.LP
\fIgl:bufferStorage/4\fR\& and \fIglNamedBufferStorage\fR\& create a new immutable data store\&. For \fIgl:bufferStorage/4\fR\&, the buffer object currently bound to \fITarget\fR\& will be initialized\&. For \fIglNamedBufferStorage\fR\&, \fIBuffer\fR\& is the name of the buffer object that will be configured\&. The size of the data store is specified by \fISize\fR\&\&. If an initial data is available, its address may be supplied in \fIData\fR\&\&. Otherwise, to create an uninitialized data store, \fIData\fR\& should be \fI?NULL\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
bufferSubData(Target :: enum(),
.B
              Offset :: i(),
.B
              Size :: i(),
.B
              Data :: offset() | mem()) ->
.B
                 ok
.br
.fi
.br
.RS
.LP
\fIgl:bufferSubData/4\fR\& and \fIglNamedBufferSubData\fR\& redefine some or all of the data store for the specified buffer object\&. Data starting at byte offset \fIOffset\fR\& and extending for \fISize\fR\& bytes is copied to the data store from the memory pointed to by \fIData\fR\&\&. \fIOffset\fR\& and \fISize\fR\& must define a range lying entirely within the buffer object\&'s data store\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
callList(List :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:callList/1\fR\& causes the named display list to be executed\&. The commands saved in the display list are executed in order, just as if they were called without using a display list\&. If \fIList\fR\& has not been defined as a display list, \fIgl:callList/1\fR\& is ignored\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
callLists(Lists :: [i()]) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:callLists/1\fR\& causes each display list in the list of names passed as \fILists\fR\& to be executed\&. As a result, the commands saved in each display list are executed in order, just as if they were called without using a display list\&. Names of display lists that have not been defined are ignored\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
checkFramebufferStatus(Target :: enum()) -> enum()
.br
.fi
.br
.RS
.LP
\fIgl:checkFramebufferStatus/1\fR\& and \fIglCheckNamedFramebufferStatus\fR\& return the completeness status of a framebuffer object when treated as a read or draw framebuffer, depending on the value of \fITarget\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
clampColor(Target :: enum(), Clamp :: enum()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:clampColor/2\fR\& controls color clamping that is performed during \fIgl:readPixels/7\fR\&\&. \fITarget\fR\& must be \fI?GL_CLAMP_READ_COLOR\fR\&\&. If \fIClamp\fR\& is \fI?GL_TRUE\fR\&, read color clamping is enabled; if \fIClamp\fR\& is \fI?GL_FALSE\fR\&, read color clamping is disabled\&. If \fIClamp\fR\& is \fI?GL_FIXED_ONLY\fR\&, read color clamping is enabled only if the selected read buffer has fixed point components and disabled otherwise\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
clear(Mask :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:clear/1\fR\& sets the bitplane area of the window to values previously selected by \fIgl:clearColor/4\fR\&, \fIgl:clearDepth/1\fR\&, and \fIgl:clearStencil/1\fR\&\&. Multiple color buffers can be cleared simultaneously by selecting more than one buffer at a time using \fIgl:drawBuffer/1\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
clearAccum(Red :: f(), Green :: f(), Blue :: f(), Alpha :: f()) ->
.B
              ok
.br
.fi
.br
.RS
.LP
\fIgl:clearAccum/4\fR\& specifies the red, green, blue, and alpha values used by \fIgl:clear/1\fR\& to clear the accumulation buffer\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
clearBufferData(Target, Internalformat, Format, Type, Data) -> ok
.br
.fi
.br
.nf

.B
clearBufferSubData(Target, Internalformat, Offset, Size, Format,
.B
                   Type, Data) ->
.B
                      ok
.br
.fi
.br
.nf

.B
clearBufferfi(Buffer :: enum(),
.B
              Drawbuffer :: i(),
.B
              Depth :: f(),
.B
              Stencil :: i()) ->
.B
                 ok
.br
.fi
.br
.nf

.B
clearBufferfv(Buffer :: enum(),
.B
              Drawbuffer :: i(),
.B
              Value :: tuple()) ->
.B
                 ok
.br
.fi
.br
.nf

.B
clearBufferiv(Buffer :: enum(),
.B
              Drawbuffer :: i(),
.B
              Value :: tuple()) ->
.B
                 ok
.br
.fi
.br
.nf

.B
clearBufferuiv(Buffer :: enum(),
.B
               Drawbuffer :: i(),
.B
               Value :: tuple()) ->
.B
                  ok
.br
.fi
.br
.RS
.LP
These commands clear a specified buffer of a framebuffer to specified value(s)\&. For \fIgl:clearBuffer*()\fR\&, the framebuffer is the currently bound draw framebuffer object\&. For \fIglClearNamedFramebuffer*\fR\&, \fIFramebuffer\fR\& is zero, indicating the default draw framebuffer, or the name of a framebuffer object\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
clearColor(Red :: clamp(),
.B
           Green :: clamp(),
.B
           Blue :: clamp(),
.B
           Alpha :: clamp()) ->
.B
              ok
.br
.fi
.br
.RS
.LP
\fIgl:clearColor/4\fR\& specifies the red, green, blue, and alpha values used by \fIgl:clear/1\fR\& to clear the color buffers\&. Values specified by \fIgl:clearColor/4\fR\& are clamped to the range [0 1]\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
clearDepth(Depth :: clamp()) -> ok
.br
.fi
.br
.nf

.B
clearDepthf(D :: f()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:clearDepth/1\fR\& specifies the depth value used by \fIgl:clear/1\fR\& to clear the depth buffer\&. Values specified by \fIgl:clearDepth/1\fR\& are clamped to the range [0 1]\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
clearIndex(C :: f()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:clearIndex/1\fR\& specifies the index used by \fIgl:clear/1\fR\& to clear the color index buffers\&. \fIC\fR\& is not clamped\&. Rather, \fIC\fR\& is converted to a fixed-point value with unspecified precision to the right of the binary point\&. The integer part of this value is then masked with 2 m-1, where m is the number of bits in a color index stored in the frame buffer\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
clearStencil(S :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:clearStencil/1\fR\& specifies the index used by \fIgl:clear/1\fR\& to clear the stencil buffer\&. \fIS\fR\& is masked with 2 m-1, where m is the number of bits in the stencil buffer\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
clearTexImage(Texture :: i(),
.B
              Level :: i(),
.B
              Format :: enum(),
.B
              Type :: enum(),
.B
              Data :: offset() | mem()) ->
.B
                 ok
.br
.fi
.br
.RS
.LP
\fIgl:clearTexImage/5\fR\& fills all an image contained in a texture with an application supplied value\&. \fITexture\fR\& must be the name of an existing texture\&. Further, \fITexture\fR\& may not be the name of a buffer texture, nor may its internal format be compressed\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
clearTexSubImage(Texture, Level, Xoffset, Yoffset, Zoffset, Width,
.B
                 Height, Depth, Format, Type, Data) ->
.B
                    ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Texture = Level = Xoffset = Yoffset = Zoffset = Width = Height = Depth = i()
.br
Format = Type = enum()
.br
Data = offset() | mem()
.br
.RE
.RE
.RS
.LP
\fIgl:clearTexSubImage/11\fR\& fills all or part of an image contained in a texture with an application supplied value\&. \fITexture\fR\& must be the name of an existing texture\&. Further, \fITexture\fR\& may not be the name of a buffer texture, nor may its internal format be compressed\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
clientActiveTexture(Texture :: enum()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:clientActiveTexture/1\fR\& selects the vertex array client state parameters to be modified by \fIgl:texCoordPointer/4\fR\&, and enabled or disabled with \fIgl:enableClientState/1\fR\& or \fIgl:disableClientState/1\fR\&, respectively, when called with a parameter of \fI?GL_TEXTURE_COORD_ARRAY\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
clientWaitSync(Sync :: i(), Flags :: i(), Timeout :: i()) ->
.B
                  enum()
.br
.fi
.br
.RS
.LP
\fIgl:clientWaitSync/3\fR\& causes the client to block and wait for the sync object specified by \fISync\fR\& to become signaled\&. If \fISync\fR\& is signaled when \fIgl:clientWaitSync/3\fR\& is called, \fIgl:clientWaitSync/3\fR\& returns immediately, otherwise it will block and wait for up to \fITimeout\fR\& nanoseconds for \fISync\fR\& to become signaled\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
clipControl(Origin :: enum(), Depth :: enum()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:clipControl/2\fR\& controls the clipping volume behavior and the clip coordinate to window coordinate transformation behavior\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
clipPlane(Plane :: enum(), Equation :: {f(), f(), f(), f()}) -> ok
.br
.fi
.br
.RS
.LP
Geometry is always clipped against the boundaries of a six-plane frustum in \fIx\fR\&, \fIy\fR\&, and \fIz\fR\&\&. \fIgl:clipPlane/2\fR\& allows the specification of additional planes, not necessarily perpendicular to the \fIx\fR\&, \fIy\fR\&, or \fIz\fR\& axis, against which all geometry is clipped\&. To determine the maximum number of additional clipping planes, call \fIgl:getIntegerv/1\fR\& with argument \fI?GL_MAX_CLIP_PLANES\fR\&\&. All implementations support at least six such clipping planes\&. Because the resulting clipping region is the intersection of the defined half-spaces, it is always convex\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
color3b(Red :: i(), Green :: i(), Blue :: i()) -> ok
.br
.fi
.br
.nf

.B
color3bv(X1 :: {Red :: i(), Green :: i(), Blue :: i()}) -> ok
.br
.fi
.br
.nf

.B
color3d(Red :: f(), Green :: f(), Blue :: f()) -> ok
.br
.fi
.br
.nf

.B
color3dv(X1 :: {Red :: f(), Green :: f(), Blue :: f()}) -> ok
.br
.fi
.br
.nf

.B
color3f(Red :: f(), Green :: f(), Blue :: f()) -> ok
.br
.fi
.br
.nf

.B
color3fv(X1 :: {Red :: f(), Green :: f(), Blue :: f()}) -> ok
.br
.fi
.br
.nf

.B
color3i(Red :: i(), Green :: i(), Blue :: i()) -> ok
.br
.fi
.br
.nf

.B
color3iv(X1 :: {Red :: i(), Green :: i(), Blue :: i()}) -> ok
.br
.fi
.br
.nf

.B
color3s(Red :: i(), Green :: i(), Blue :: i()) -> ok
.br
.fi
.br
.nf

.B
color3sv(X1 :: {Red :: i(), Green :: i(), Blue :: i()}) -> ok
.br
.fi
.br
.nf

.B
color3ub(Red :: i(), Green :: i(), Blue :: i()) -> ok
.br
.fi
.br
.nf

.B
color3ubv(X1 :: {Red :: i(), Green :: i(), Blue :: i()}) -> ok
.br
.fi
.br
.nf

.B
color3ui(Red :: i(), Green :: i(), Blue :: i()) -> ok
.br
.fi
.br
.nf

.B
color3uiv(X1 :: {Red :: i(), Green :: i(), Blue :: i()}) -> ok
.br
.fi
.br
.nf

.B
color3us(Red :: i(), Green :: i(), Blue :: i()) -> ok
.br
.fi
.br
.nf

.B
color3usv(X1 :: {Red :: i(), Green :: i(), Blue :: i()}) -> ok
.br
.fi
.br
.nf

.B
color4b(Red :: i(), Green :: i(), Blue :: i(), Alpha :: i()) -> ok
.br
.fi
.br
.nf

.B
color4bv(X1 ::
.B
             {Red :: i(), Green :: i(), Blue :: i(), Alpha :: i()}) ->
.B
            ok
.br
.fi
.br
.nf

.B
color4d(Red :: f(), Green :: f(), Blue :: f(), Alpha :: f()) -> ok
.br
.fi
.br
.nf

.B
color4dv(X1 ::
.B
             {Red :: f(), Green :: f(), Blue :: f(), Alpha :: f()}) ->
.B
            ok
.br
.fi
.br
.nf

.B
color4f(Red :: f(), Green :: f(), Blue :: f(), Alpha :: f()) -> ok
.br
.fi
.br
.nf

.B
color4fv(X1 ::
.B
             {Red :: f(), Green :: f(), Blue :: f(), Alpha :: f()}) ->
.B
            ok
.br
.fi
.br
.nf

.B
color4i(Red :: i(), Green :: i(), Blue :: i(), Alpha :: i()) -> ok
.br
.fi
.br
.nf

.B
color4iv(X1 ::
.B
             {Red :: i(), Green :: i(), Blue :: i(), Alpha :: i()}) ->
.B
            ok
.br
.fi
.br
.nf

.B
color4s(Red :: i(), Green :: i(), Blue :: i(), Alpha :: i()) -> ok
.br
.fi
.br
.nf

.B
color4sv(X1 ::
.B
             {Red :: i(), Green :: i(), Blue :: i(), Alpha :: i()}) ->
.B
            ok
.br
.fi
.br
.nf

.B
color4ub(Red :: i(), Green :: i(), Blue :: i(), Alpha :: i()) ->
.B
            ok
.br
.fi
.br
.nf

.B
color4ubv(X1 ::
.B
              {Red :: i(),
.B
               Green :: i(),
.B
               Blue :: i(),
.B
               Alpha :: i()}) ->
.B
             ok
.br
.fi
.br
.nf

.B
color4ui(Red :: i(), Green :: i(), Blue :: i(), Alpha :: i()) ->
.B
            ok
.br
.fi
.br
.nf

.B
color4uiv(X1 ::
.B
              {Red :: i(),
.B
               Green :: i(),
.B
               Blue :: i(),
.B
               Alpha :: i()}) ->
.B
             ok
.br
.fi
.br
.nf

.B
color4us(Red :: i(), Green :: i(), Blue :: i(), Alpha :: i()) ->
.B
            ok
.br
.fi
.br
.nf

.B
color4usv(X1 ::
.B
              {Red :: i(),
.B
               Green :: i(),
.B
               Blue :: i(),
.B
               Alpha :: i()}) ->
.B
             ok
.br
.fi
.br
.RS
.LP
The GL stores both a current single-valued color index and a current four-valued RGBA color\&. \fIgl:color()\fR\& sets a new four-valued RGBA color\&. \fIgl:color()\fR\& has two major variants: \fIgl:color3()\fR\& and \fIgl:color4()\fR\&\&. \fIgl:color3()\fR\& variants specify new red, green, and blue values explicitly and set the current alpha value to 1\&.0 (full intensity) implicitly\&. \fIgl:color4()\fR\& variants specify all four color components explicitly\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
colorMask(Red :: 0 | 1,
.B
          Green :: 0 | 1,
.B
          Blue :: 0 | 1,
.B
          Alpha :: 0 | 1) ->
.B
             ok
.br
.fi
.br
.nf

.B
colorMaski(Index :: i(),
.B
           R :: 0 | 1,
.B
           G :: 0 | 1,
.B
           B :: 0 | 1,
.B
           A :: 0 | 1) ->
.B
              ok
.br
.fi
.br
.RS
.LP
\fIgl:colorMask/4\fR\& and \fIgl:colorMaski/5\fR\& specify whether the individual color components in the frame buffer can or cannot be written\&. \fIgl:colorMaski/5\fR\& sets the mask for a specific draw buffer, whereas \fIgl:colorMask/4\fR\& sets the mask for all draw buffers\&. If \fIRed\fR\& is \fI?GL_FALSE\fR\&, for example, no change is made to the red component of any pixel in any of the color buffers, regardless of the drawing operation attempted\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
colorMaterial(Face :: enum(), Mode :: enum()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:colorMaterial/2\fR\& specifies which material parameters track the current color\&. When \fI?GL_COLOR_MATERIAL\fR\& is enabled, the material parameter or parameters specified by \fIMode\fR\&, of the material or materials specified by \fIFace\fR\&, track the current color at all times\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
colorPointer(Size :: i(),
.B
             Type :: enum(),
.B
             Stride :: i(),
.B
             Ptr :: offset() | mem()) ->
.B
                ok
.br
.fi
.br
.RS
.LP
\fIgl:colorPointer/4\fR\& specifies the location and data format of an array of color components to use when rendering\&. \fISize\fR\& specifies the number of components per color, and must be 3 or 4\&. \fIType\fR\& specifies the data type of each color component, and \fIStride\fR\& specifies the byte stride from one color to the next, allowing vertices and attributes to be packed into a single array or stored in separate arrays\&. (Single-array storage may be more efficient on some implementations; see \fIgl:interleavedArrays/3\fR\&\&.)
.LP
External documentation\&.
.RE
.LP
.nf

.B
colorSubTable(Target, Start, Count, Format, Type, Data) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Target = enum()
.br
Start = Count = i()
.br
Format = Type = enum()
.br
Data = offset() | mem()
.br
.RE
.RE
.RS
.LP
\fIgl:colorSubTable/6\fR\& is used to respecify a contiguous portion of a color table previously defined using \fIgl:colorTable/6\fR\&\&. The pixels referenced by \fIData\fR\& replace the portion of the existing table from indices \fIStart\fR\& to start+count-1, inclusive\&. This region may not include any entries outside the range of the color table as it was originally specified\&. It is not an error to specify a subtexture with width of 0, but such a specification has no effect\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
colorTable(Target, Internalformat, Width, Format, Type, Table) ->
.B
              ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Target = Internalformat = enum()
.br
Width = i()
.br
Format = Type = enum()
.br
Table = offset() | mem()
.br
.RE
.RE
.RS
.LP
\fIgl:colorTable/6\fR\& may be used in two ways: to test the actual size and color resolution of a lookup table given a particular set of parameters, or to load the contents of a color lookup table\&. Use the targets \fI?GL_PROXY_*\fR\& for the first case and the other targets for the second case\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
colorTableParameterfv(Target :: enum(),
.B
                      Pname :: enum(),
.B
                      Params :: {f(), f(), f(), f()}) ->
.B
                         ok
.br
.fi
.br
.nf

.B
colorTableParameteriv(Target :: enum(),
.B
                      Pname :: enum(),
.B
                      Params :: {i(), i(), i(), i()}) ->
.B
                         ok
.br
.fi
.br
.RS
.LP
\fIgl:colorTableParameter()\fR\& is used to specify the scale factors and bias terms applied to color components when they are loaded into a color table\&. \fITarget\fR\& indicates which color table the scale and bias terms apply to; it must be set to \fI?GL_COLOR_TABLE\fR\&, \fI?GL_POST_CONVOLUTION_COLOR_TABLE\fR\&, or \fI?GL_POST_COLOR_MATRIX_COLOR_TABLE\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
compileShader(Shader :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:compileShader/1\fR\& compiles the source code strings that have been stored in the shader object specified by \fIShader\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
compressedTexImage1D(Target, Level, Internalformat, Width, Border,
.B
                     ImageSize, Data) ->
.B
                        ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Target = enum()
.br
Level = i()
.br
Internalformat = enum()
.br
Width = Border = ImageSize = i()
.br
Data = offset() | mem()
.br
.RE
.RE
.RS
.LP
Texturing allows elements of an image array to be read by shaders\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
compressedTexImage2D(Target, Level, Internalformat, Width, Height,
.B
                     Border, ImageSize, Data) ->
.B
                        ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Target = enum()
.br
Level = i()
.br
Internalformat = enum()
.br
Width = Height = Border = ImageSize = i()
.br
Data = offset() | mem()
.br
.RE
.RE
.RS
.LP
Texturing allows elements of an image array to be read by shaders\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
compressedTexImage3D(Target, Level, Internalformat, Width, Height,
.B
                     Depth, Border, ImageSize, Data) ->
.B
                        ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Target = enum()
.br
Level = i()
.br
Internalformat = enum()
.br
Width = Height = Depth = Border = ImageSize = i()
.br
Data = offset() | mem()
.br
.RE
.RE
.RS
.LP
Texturing allows elements of an image array to be read by shaders\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
compressedTexSubImage1D(Target, Level, Xoffset, Width, Format,
.B
                        ImageSize, Data) ->
.B
                           ok
.br
.fi
.br
.nf

.B
compressedTextureSubImage1D(Texture, Level, Xoffset, Width,
.B
                            Format, ImageSize, Data) ->
.B
                               ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Texture = Level = Xoffset = Width = i()
.br
Format = enum()
.br
ImageSize = i()
.br
Data = offset() | mem()
.br
.RE
.RE
.RS
.LP
Texturing allows elements of an image array to be read by shaders\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
compressedTexSubImage2D(Target, Level, Xoffset, Yoffset, Width,
.B
                        Height, Format, ImageSize, Data) ->
.B
                           ok
.br
.fi
.br
.nf

.B
compressedTextureSubImage2D(Texture, Level, Xoffset, Yoffset,
.B
                            Width, Height, Format, ImageSize,
.B
                            Data) ->
.B
                               ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Texture = Level = Xoffset = Yoffset = Width = Height = i()
.br
Format = enum()
.br
ImageSize = i()
.br
Data = offset() | mem()
.br
.RE
.RE
.RS
.LP
Texturing allows elements of an image array to be read by shaders\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
compressedTexSubImage3D(Target, Level, Xoffset, Yoffset, Zoffset,
.B
                        Width, Height, Depth, Format, ImageSize,
.B
                        Data) ->
.B
                           ok
.br
.fi
.br
.nf

.B
compressedTextureSubImage3D(Texture, Level, Xoffset, Yoffset,
.B
                            Zoffset, Width, Height, Depth, Format,
.B
                            ImageSize, Data) ->
.B
                               ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Texture = Level = Xoffset = Yoffset = Zoffset = Width = Height = Depth = i()
.br
Format = enum()
.br
ImageSize = i()
.br
Data = offset() | mem()
.br
.RE
.RE
.RS
.LP
Texturing allows elements of an image array to be read by shaders\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
convolutionFilter1D(Target, Internalformat, Width, Format, Type,
.B
                    Image) ->
.B
                       ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Target = Internalformat = enum()
.br
Width = i()
.br
Format = Type = enum()
.br
Image = offset() | mem()
.br
.RE
.RE
.RS
.LP
\fIgl:convolutionFilter1D/6\fR\& builds a one-dimensional convolution filter kernel from an array of pixels\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
convolutionFilter2D(Target, Internalformat, Width, Height, Format,
.B
                    Type, Image) ->
.B
                       ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Target = Internalformat = enum()
.br
Width = Height = i()
.br
Format = Type = enum()
.br
Image = offset() | mem()
.br
.RE
.RE
.RS
.LP
\fIgl:convolutionFilter2D/7\fR\& builds a two-dimensional convolution filter kernel from an array of pixels\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
convolutionParameterf(Target :: enum(),
.B
                      Pname :: enum(),
.B
                      Params :: tuple()) ->
.B
                         ok
.br
.fi
.br
.nf

.B
convolutionParameterfv(Target :: enum(),
.B
                       Pname :: enum(),
.B
                       Params :: tuple()) ->
.B
                          ok
.br
.fi
.br
.nf

.B
convolutionParameteri(Target :: enum(),
.B
                      Pname :: enum(),
.B
                      Params :: tuple()) ->
.B
                         ok
.br
.fi
.br
.nf

.B
convolutionParameteriv(Target :: enum(),
.B
                       Pname :: enum(),
.B
                       Params :: tuple()) ->
.B
                          ok
.br
.fi
.br
.RS
.LP
\fIgl:convolutionParameter()\fR\& sets the value of a convolution parameter\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
copyBufferSubData(ReadTarget, WriteTarget, ReadOffset,
.B
                  WriteOffset, Size) ->
.B
                     ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
ReadTarget = WriteTarget = enum()
.br
ReadOffset = WriteOffset = Size = i()
.br
.RE
.RE
.RS
.LP
\fIgl:copyBufferSubData/5\fR\& and \fIglCopyNamedBufferSubData\fR\& copy part of the data store attached to a source buffer object to the data store attached to a destination buffer object\&. The number of basic machine units indicated by \fISize\fR\& is copied from the source at offset \fIReadOffset\fR\& to the destination at \fIWriteOffset\fR\&\&. \fIReadOffset\fR\&, \fIWriteOffset\fR\& and \fISize\fR\& are in terms of basic machine units\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
copyColorSubTable(Target :: enum(),
.B
                  Start :: i(),
.B
                  X :: i(),
.B
                  Y :: i(),
.B
                  Width :: i()) ->
.B
                     ok
.br
.fi
.br
.RS
.LP
\fIgl:copyColorSubTable/5\fR\& is used to respecify a contiguous portion of a color table previously defined using \fIgl:colorTable/6\fR\&\&. The pixels copied from the framebuffer replace the portion of the existing table from indices \fIStart\fR\& to start+x-1, inclusive\&. This region may not include any entries outside the range of the color table, as was originally specified\&. It is not an error to specify a subtexture with width of 0, but such a specification has no effect\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
copyColorTable(Target :: enum(),
.B
               Internalformat :: enum(),
.B
               X :: i(),
.B
               Y :: i(),
.B
               Width :: i()) ->
.B
                  ok
.br
.fi
.br
.RS
.LP
\fIgl:copyColorTable/5\fR\& loads a color table with pixels from the current \fI?GL_READ_BUFFER\fR\& (rather than from main memory, as is the case for \fIgl:colorTable/6\fR\&)\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
copyConvolutionFilter1D(Target :: enum(),
.B
                        Internalformat :: enum(),
.B
                        X :: i(),
.B
                        Y :: i(),
.B
                        Width :: i()) ->
.B
                           ok
.br
.fi
.br
.RS
.LP
\fIgl:copyConvolutionFilter1D/5\fR\& defines a one-dimensional convolution filter kernel with pixels from the current \fI?GL_READ_BUFFER\fR\& (rather than from main memory, as is the case for \fIgl:convolutionFilter1D/6\fR\&)\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
copyConvolutionFilter2D(Target :: enum(),
.B
                        Internalformat :: enum(),
.B
                        X :: i(),
.B
                        Y :: i(),
.B
                        Width :: i(),
.B
                        Height :: i()) ->
.B
                           ok
.br
.fi
.br
.RS
.LP
\fIgl:copyConvolutionFilter2D/6\fR\& defines a two-dimensional convolution filter kernel with pixels from the current \fI?GL_READ_BUFFER\fR\& (rather than from main memory, as is the case for \fIgl:convolutionFilter2D/7\fR\&)\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
copyImageSubData(SrcName, SrcTarget, SrcLevel, SrcX, SrcY, SrcZ,
.B
                 DstName, DstTarget, DstLevel, DstX, DstY, DstZ,
.B
                 SrcWidth, SrcHeight, SrcDepth) ->
.B
                    ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
SrcName = i()
.br
SrcTarget = enum()
.br
SrcLevel = SrcX = SrcY = SrcZ = DstName = i()
.br
DstTarget = enum()
.br
DstLevel = DstX = DstY = DstZ = SrcWidth = SrcHeight = SrcDepth = i()
.br
.RE
.RE
.RS
.LP
\fIgl:copyImageSubData/15\fR\& may be used to copy data from one image (i\&.e\&. texture or renderbuffer) to another\&. \fIgl:copyImageSubData/15\fR\& does not perform general-purpose conversions such as scaling, resizing, blending, color-space, or format conversions\&. It should be considered to operate in a manner similar to a CPU memcpy\&. CopyImageSubData can copy between images with different internal formats, provided the formats are compatible\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
copyPixels(X :: i(),
.B
           Y :: i(),
.B
           Width :: i(),
.B
           Height :: i(),
.B
           Type :: enum()) ->
.B
              ok
.br
.fi
.br
.RS
.LP
\fIgl:copyPixels/5\fR\& copies a screen-aligned rectangle of pixels from the specified frame buffer location to a region relative to the current raster position\&. Its operation is well defined only if the entire pixel source region is within the exposed portion of the window\&. Results of copies from outside the window, or from regions of the window that are not exposed, are hardware dependent and undefined\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
copyTexImage1D(Target, Level, Internalformat, X, Y, Width, Border) ->
.B
                  ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Target = enum()
.br
Level = i()
.br
Internalformat = enum()
.br
X = Y = Width = Border = i()
.br
.RE
.RE
.RS
.LP
\fIgl:copyTexImage1D/7\fR\& defines a one-dimensional texture image with pixels from the current \fI?GL_READ_BUFFER\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
copyTexImage2D(Target, Level, Internalformat, X, Y, Width, Height,
.B
               Border) ->
.B
                  ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Target = enum()
.br
Level = i()
.br
Internalformat = enum()
.br
X = Y = Width = Height = Border = i()
.br
.RE
.RE
.RS
.LP
\fIgl:copyTexImage2D/8\fR\& defines a two-dimensional texture image, or cube-map texture image with pixels from the current \fI?GL_READ_BUFFER\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
copyTexSubImage1D(Target :: enum(),
.B
                  Level :: i(),
.B
                  Xoffset :: i(),
.B
                  X :: i(),
.B
                  Y :: i(),
.B
                  Width :: i()) ->
.B
                     ok
.br
.fi
.br
.RS
.LP
\fIgl:copyTexSubImage1D/6\fR\& and \fIglCopyTextureSubImage1D\fR\& replace a portion of a one-dimensional texture image with pixels from the current \fI?GL_READ_BUFFER\fR\& (rather than from main memory, as is the case for \fIgl:texSubImage1D/7\fR\&)\&. For \fIgl:copyTexSubImage1D/6\fR\&, the texture object that is bound to \fITarget\fR\& will be used for the process\&. For \fIglCopyTextureSubImage1D\fR\&, \fITexture\fR\& tells which texture object should be used for the purpose of the call\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
copyTexSubImage2D(Target, Level, Xoffset, Yoffset, X, Y, Width,
.B
                  Height) ->
.B
                     ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Target = enum()
.br
Level = Xoffset = Yoffset = X = Y = Width = Height = i()
.br
.RE
.RE
.RS
.LP
\fIgl:copyTexSubImage2D/8\fR\& and \fIglCopyTextureSubImage2D\fR\& replace a rectangular portion of a two-dimensional texture image, cube-map texture image, rectangular image, or a linear portion of a number of slices of a one-dimensional array texture with pixels from the current \fI?GL_READ_BUFFER\fR\& (rather than from main memory, as is the case for \fIgl:texSubImage2D/9\fR\&)\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
copyTexSubImage3D(Target, Level, Xoffset, Yoffset, Zoffset, X, Y,
.B
                  Width, Height) ->
.B
                     ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Target = enum()
.br
Level = Xoffset = Yoffset = Zoffset = X = Y = Width = Height = i()
.br
.RE
.RE
.RS
.LP
\fIgl:copyTexSubImage3D/9\fR\& and \fIglCopyTextureSubImage3D\fR\& functions replace a rectangular portion of a three-dimensional or two-dimensional array texture image with pixels from the current \fI?GL_READ_BUFFER\fR\& (rather than from main memory, as is the case for \fIgl:texSubImage3D/11\fR\&)\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
createBuffers(N :: i()) -> [i()]
.br
.fi
.br
.RS
.LP
\fIgl:createBuffers/1\fR\& returns \fIN\fR\& previously unused buffer names in \fIBuffers\fR\&, each representing a new buffer object initialized as if it had been bound to an unspecified target\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
createFramebuffers(N :: i()) -> [i()]
.br
.fi
.br
.RS
.LP
\fIgl:createFramebuffers/1\fR\& returns \fIN\fR\& previously unused framebuffer names in \fIFramebuffers\fR\&, each representing a new framebuffer object initialized to the default state\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
createProgram() -> i()
.br
.fi
.br
.RS
.LP
\fIgl:createProgram/0\fR\& creates an empty program object and returns a non-zero value by which it can be referenced\&. A program object is an object to which shader objects can be attached\&. This provides a mechanism to specify the shader objects that will be linked to create a program\&. It also provides a means for checking the compatibility of the shaders that will be used to create a program (for instance, checking the compatibility between a vertex shader and a fragment shader)\&. When no longer needed as part of a program object, shader objects can be detached\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
createProgramPipelines(N :: i()) -> [i()]
.br
.fi
.br
.RS
.LP
\fIgl:createProgramPipelines/1\fR\& returns \fIN\fR\& previously unused program pipeline names in \fIPipelines\fR\&, each representing a new program pipeline object initialized to the default state\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
createQueries(Target :: enum(), N :: i()) -> [i()]
.br
.fi
.br
.RS
.LP
\fIgl:createQueries/2\fR\& returns \fIN\fR\& previously unused query object names in \fIIds\fR\&, each representing a new query object with the specified \fITarget\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
createRenderbuffers(N :: i()) -> [i()]
.br
.fi
.br
.RS
.LP
\fIgl:createRenderbuffers/1\fR\& returns \fIN\fR\& previously unused renderbuffer object names in \fIRenderbuffers\fR\&, each representing a new renderbuffer object initialized to the default state\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
createSamplers(N :: i()) -> [i()]
.br
.fi
.br
.RS
.LP
\fIgl:createSamplers/1\fR\& returns \fIN\fR\& previously unused sampler names in \fISamplers\fR\&, each representing a new sampler object initialized to the default state\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
createShader(Type :: enum()) -> i()
.br
.fi
.br
.RS
.LP
\fIgl:createShader/1\fR\& creates an empty shader object and returns a non-zero value by which it can be referenced\&. A shader object is used to maintain the source code strings that define a shader\&. \fIShaderType\fR\& indicates the type of shader to be created\&. Five types of shader are supported\&. A shader of type \fI?GL_COMPUTE_SHADER\fR\& is a shader that is intended to run on the programmable compute processor\&. A shader of type \fI?GL_VERTEX_SHADER\fR\& is a shader that is intended to run on the programmable vertex processor\&. A shader of type \fI?GL_TESS_CONTROL_SHADER\fR\& is a shader that is intended to run on the programmable tessellation processor in the control stage\&. A shader of type \fI?GL_TESS_EVALUATION_SHADER\fR\& is a shader that is intended to run on the programmable tessellation processor in the evaluation stage\&. A shader of type \fI?GL_GEOMETRY_SHADER\fR\& is a shader that is intended to run on the programmable geometry processor\&. A shader of type \fI?GL_FRAGMENT_SHADER\fR\& is a shader that is intended to run on the programmable fragment processor\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
createShaderProgramv(Type :: enum(),
.B
                     Strings :: [unicode:chardata()]) ->
.B
                        i()
.br
.fi
.br
.RS
.LP
\fIgl:createShaderProgram()\fR\& creates a program object containing compiled and linked shaders for a single stage specified by \fIType\fR\&\&. \fIStrings\fR\& refers to an array of \fICount\fR\& strings from which to create the shader executables\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
createTextures(Target :: enum(), N :: i()) -> [i()]
.br
.fi
.br
.RS
.LP
\fIgl:createTextures/2\fR\& returns \fIN\fR\& previously unused texture names in \fITextures\fR\&, each representing a new texture object of the dimensionality and type specified by \fITarget\fR\& and initialized to the default values for that texture type\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
createTransformFeedbacks(N :: i()) -> [i()]
.br
.fi
.br
.RS
.LP
\fIgl:createTransformFeedbacks/1\fR\& returns \fIN\fR\& previously unused transform feedback object names in \fIIds\fR\&, each representing a new transform feedback object initialized to the default state\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
createVertexArrays(N :: i()) -> [i()]
.br
.fi
.br
.RS
.LP
\fIgl:createVertexArrays/1\fR\& returns \fIN\fR\& previously unused vertex array object names in \fIArrays\fR\&, each representing a new vertex array object initialized to the default state\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
cullFace(Mode :: enum()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:cullFace/1\fR\& specifies whether front- or back-facing facets are culled (as specified by \fImode\fR\&) when facet culling is enabled\&. Facet culling is initially disabled\&. To enable and disable facet culling, call the \fIgl:enable/1\fR\& and \fIgl:disable/1\fR\& commands with the argument \fI?GL_CULL_FACE\fR\&\&. Facets include triangles, quadrilaterals, polygons, and rectangles\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
debugMessageControl(Source :: enum(),
.B
                    Type :: enum(),
.B
                    Severity :: enum(),
.B
                    Ids :: [i()],
.B
                    Enabled :: 0 | 1) ->
.B
                       ok
.br
.fi
.br
.RS
.LP
\fIgl:debugMessageControl/5\fR\& controls the reporting of debug messages generated by a debug context\&. The parameters \fISource\fR\&, \fIType\fR\& and \fISeverity\fR\& form a filter to select messages from the pool of potential messages generated by the GL\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
debugMessageInsert(Source :: enum(),
.B
                   Type :: enum(),
.B
                   Id :: i(),
.B
                   Severity :: enum(),
.B
                   Buf :: string()) ->
.B
                      ok
.br
.fi
.br
.RS
.LP
\fIgl:debugMessageInsert/5\fR\& inserts a user-supplied message into the debug output queue\&. \fISource\fR\& specifies the source that will be used to classify the message and must be \fI?GL_DEBUG_SOURCE_APPLICATION\fR\& or \fI?GL_DEBUG_SOURCE_THIRD_PARTY\fR\&\&. All other sources are reserved for use by the GL implementation\&. \fIType\fR\& indicates the type of the message to be inserted and may be one of \fI?GL_DEBUG_TYPE_ERROR\fR\&, \fI?GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR\fR\&, \fI?GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR\fR\&, \fI?GL_DEBUG_TYPE_PORTABILITY\fR\&, \fI?GL_DEBUG_TYPE_PERFORMANCE\fR\&, \fI?GL_DEBUG_TYPE_MARKER\fR\&, \fI?GL_DEBUG_TYPE_PUSH_GROUP\fR\&, \fI?GL_DEBUG_TYPE_POP_GROUP\fR\&, or \fI?GL_DEBUG_TYPE_OTHER\fR\&\&. \fISeverity\fR\& indicates the severity of the message and may be \fI?GL_DEBUG_SEVERITY_LOW\fR\&, \fI?GL_DEBUG_SEVERITY_MEDIUM\fR\&, \fI?GL_DEBUG_SEVERITY_HIGH\fR\& or \fI?GL_DEBUG_SEVERITY_NOTIFICATION\fR\&\&. \fIId\fR\& is available for application defined use and may be any value\&. This value will be recorded and used to identify the message\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
deleteBuffers(Buffers :: [i()]) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:deleteBuffers/1\fR\& deletes \fIN\fR\& buffer objects named by the elements of the array \fIBuffers\fR\&\&. After a buffer object is deleted, it has no contents, and its name is free for reuse (for example by \fIgl:genBuffers/1\fR\&)\&. If a buffer object that is currently bound is deleted, the binding reverts to 0 (the absence of any buffer object)\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
deleteFramebuffers(Framebuffers :: [i()]) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:deleteFramebuffers/1\fR\& deletes the \fIN\fR\& framebuffer objects whose names are stored in the array addressed by \fIFramebuffers\fR\&\&. The name zero is reserved by the GL and is silently ignored, should it occur in \fIFramebuffers\fR\&, as are other unused names\&. Once a framebuffer object is deleted, its name is again unused and it has no attachments\&. If a framebuffer that is currently bound to one or more of the targets \fI?GL_DRAW_FRAMEBUFFER\fR\& or \fI?GL_READ_FRAMEBUFFER\fR\& is deleted, it is as though \fIgl:bindFramebuffer/2\fR\& had been executed with the corresponding \fITarget\fR\& and \fIFramebuffer\fR\& zero\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
deleteLists(List :: i(), Range :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:deleteLists/2\fR\& causes a contiguous group of display lists to be deleted\&. \fIList\fR\& is the name of the first display list to be deleted, and \fIRange\fR\& is the number of display lists to delete\&. All display lists d with list&lt;= d&lt;= list+range-1 are deleted\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
deleteProgram(Program :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:deleteProgram/1\fR\& frees the memory and invalidates the name associated with the program object specified by \fIProgram\&.\fR\& This command effectively undoes the effects of a call to \fIgl:createProgram/0\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
deleteProgramPipelines(Pipelines :: [i()]) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:deleteProgramPipelines/1\fR\& deletes the \fIN\fR\& program pipeline objects whose names are stored in the array \fIPipelines\fR\&\&. Unused names in \fIPipelines\fR\& are ignored, as is the name zero\&. After a program pipeline object is deleted, its name is again unused and it has no contents\&. If program pipeline object that is currently bound is deleted, the binding for that object reverts to zero and no program pipeline object becomes current\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
deleteQueries(Ids :: [i()]) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:deleteQueries/1\fR\& deletes \fIN\fR\& query objects named by the elements of the array \fIIds\fR\&\&. After a query object is deleted, it has no contents, and its name is free for reuse (for example by \fIgl:genQueries/1\fR\&)\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
deleteRenderbuffers(Renderbuffers :: [i()]) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:deleteRenderbuffers/1\fR\& deletes the \fIN\fR\& renderbuffer objects whose names are stored in the array addressed by \fIRenderbuffers\fR\&\&. The name zero is reserved by the GL and is silently ignored, should it occur in \fIRenderbuffers\fR\&, as are other unused names\&. Once a renderbuffer object is deleted, its name is again unused and it has no contents\&. If a renderbuffer that is currently bound to the target \fI?GL_RENDERBUFFER\fR\& is deleted, it is as though \fIgl:bindRenderbuffer/2\fR\& had been executed with a \fITarget\fR\& of \fI?GL_RENDERBUFFER\fR\& and a \fIName\fR\& of zero\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
deleteSamplers(Samplers :: [i()]) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:deleteSamplers/1\fR\& deletes \fIN\fR\& sampler objects named by the elements of the array \fISamplers\fR\&\&. After a sampler object is deleted, its name is again unused\&. If a sampler object that is currently bound to a sampler unit is deleted, it is as though \fIgl:bindSampler/2\fR\& is called with unit set to the unit the sampler is bound to and sampler zero\&. Unused names in samplers are silently ignored, as is the reserved name zero\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
deleteShader(Shader :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:deleteShader/1\fR\& frees the memory and invalidates the name associated with the shader object specified by \fIShader\fR\&\&. This command effectively undoes the effects of a call to \fIgl:createShader/1\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
deleteSync(Sync :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:deleteSync/1\fR\& deletes the sync object specified by \fISync\fR\&\&. If the fence command corresponding to the specified sync object has completed, or if no \fIgl:waitSync/3\fR\& or \fIgl:clientWaitSync/3\fR\& commands are blocking on \fISync\fR\&, the object is deleted immediately\&. Otherwise, \fISync\fR\& is flagged for deletion and will be deleted when it is no longer associated with any fence command and is no longer blocking any \fIgl:waitSync/3\fR\& or \fIgl:clientWaitSync/3\fR\& command\&. In either case, after \fIgl:deleteSync/1\fR\& returns, the name \fISync\fR\& is invalid and can no longer be used to refer to the sync object\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
deleteTextures(Textures :: [i()]) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:deleteTextures/1\fR\& deletes \fIN\fR\& textures named by the elements of the array \fITextures\fR\&\&. After a texture is deleted, it has no contents or dimensionality, and its name is free for reuse (for example by \fIgl:genTextures/1\fR\&)\&. If a texture that is currently bound is deleted, the binding reverts to 0 (the default texture)\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
deleteTransformFeedbacks(Ids :: [i()]) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:deleteTransformFeedbacks/1\fR\& deletes the \fIN\fR\& transform feedback objects whose names are stored in the array \fIIds\fR\&\&. Unused names in \fIIds\fR\& are ignored, as is the name zero\&. After a transform feedback object is deleted, its name is again unused and it has no contents\&. If an active transform feedback object is deleted, its name immediately becomes unused, but the underlying object is not deleted until it is no longer active\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
deleteVertexArrays(Arrays :: [i()]) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:deleteVertexArrays/1\fR\& deletes \fIN\fR\& vertex array objects whose names are stored in the array addressed by \fIArrays\fR\&\&. Once a vertex array object is deleted it has no contents and its name is again unused\&. If a vertex array object that is currently bound is deleted, the binding for that object reverts to zero and the default vertex array becomes current\&. Unused names in \fIArrays\fR\& are silently ignored, as is the value zero\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
depthFunc(Func :: enum()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:depthFunc/1\fR\& specifies the function used to compare each incoming pixel depth value with the depth value present in the depth buffer\&. The comparison is performed only if depth testing is enabled\&. (See \fIgl:enable/1\fR\& and \fIgl:disable/1\fR\& of \fI?GL_DEPTH_TEST\fR\&\&.)
.LP
External documentation\&.
.RE
.LP
.nf

.B
depthMask(Flag :: 0 | 1) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:depthMask/1\fR\& specifies whether the depth buffer is enabled for writing\&. If \fIFlag\fR\& is \fI?GL_FALSE\fR\&, depth buffer writing is disabled\&. Otherwise, it is enabled\&. Initially, depth buffer writing is enabled\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
depthRange(Near_val :: clamp(), Far_val :: clamp()) -> ok
.br
.fi
.br
.nf

.B
depthRangef(N :: f(), F :: f()) -> ok
.br
.fi
.br
.RS
.LP
After clipping and division by \fIw\fR\&, depth coordinates range from -1 to 1, corresponding to the near and far clipping planes\&. \fIgl:depthRange/2\fR\& specifies a linear mapping of the normalized depth coordinates in this range to window depth coordinates\&. Regardless of the actual depth buffer implementation, window coordinate depth values are treated as though they range from 0 through 1 (like color components)\&. Thus, the values accepted by \fIgl:depthRange/2\fR\& are both clamped to this range before they are accepted\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
depthRangeArrayv(First :: i(), V :: [{f(), f()}]) -> ok
.br
.fi
.br
.RS
.LP
After clipping and division by \fIw\fR\&, depth coordinates range from -1 to 1, corresponding to the near and far clipping planes\&. Each viewport has an independent depth range specified as a linear mapping of the normalized depth coordinates in this range to window depth coordinates\&. Regardless of the actual depth buffer implementation, window coordinate depth values are treated as though they range from 0 through 1 (like color components)\&. \fIgl:depthRangeArray()\fR\& specifies a linear mapping of the normalized depth coordinates in this range to window depth coordinates for each viewport in the range [\fIFirst\fR\&, \fIFirst\fR\& + \fICount\fR\&)\&. Thus, the values accepted by \fIgl:depthRangeArray()\fR\& are both clamped to this range before they are accepted\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
depthRangeIndexed(Index :: i(), N :: f(), F :: f()) -> ok
.br
.fi
.br
.RS
.LP
After clipping and division by \fIw\fR\&, depth coordinates range from -1 to 1, corresponding to the near and far clipping planes\&. Each viewport has an independent depth range specified as a linear mapping of the normalized depth coordinates in this range to window depth coordinates\&. Regardless of the actual depth buffer implementation, window coordinate depth values are treated as though they range from 0 through 1 (like color components)\&. \fIgl:depthRangeIndexed/3\fR\& specifies a linear mapping of the normalized depth coordinates in this range to window depth coordinates for a specified viewport\&. Thus, the values accepted by \fIgl:depthRangeIndexed/3\fR\& are both clamped to this range before they are accepted\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
detachShader(Program :: i(), Shader :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:detachShader/2\fR\& detaches the shader object specified by \fIShader\fR\& from the program object specified by \fIProgram\fR\&\&. This command can be used to undo the effect of the command \fIgl:attachShader/2\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
dispatchCompute(Num_groups_x :: i(),
.B
                Num_groups_y :: i(),
.B
                Num_groups_z :: i()) ->
.B
                   ok
.br
.fi
.br
.RS
.LP
\fIgl:dispatchCompute/3\fR\& launches one or more compute work groups\&. Each work group is processed by the active program object for the compute shader stage\&. While the individual shader invocations within a work group are executed as a unit, work groups are executed completely independently and in unspecified order\&. \fINum_groups_x\fR\&, \fINum_groups_y\fR\& and \fINum_groups_z\fR\& specify the number of local work groups that will be dispatched in the X, Y and Z dimensions, respectively\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
dispatchComputeIndirect(Indirect :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:dispatchComputeIndirect/1\fR\& launches one or more compute work groups using parameters stored in the buffer object currently bound to the \fI?GL_DISPATCH_INDIRECT_BUFFER\fR\& target\&. Each work group is processed by the active program object for the compute shader stage\&. While the individual shader invocations within a work group are executed as a unit, work groups are executed completely independently and in unspecified order\&. \fIIndirect\fR\& contains the offset into the data store of the buffer object bound to the \fI?GL_DISPATCH_INDIRECT_BUFFER\fR\& target at which the parameters are stored\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
drawArrays(Mode :: enum(), First :: i(), Count :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:drawArrays/3\fR\& specifies multiple geometric primitives with very few subroutine calls\&. Instead of calling a GL procedure to pass each individual vertex, normal, texture coordinate, edge flag, or color, you can prespecify separate arrays of vertices, normals, and colors and use them to construct a sequence of primitives with a single call to \fIgl:drawArrays/3\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
drawArraysIndirect(Mode :: enum(), Indirect :: offset() | mem()) ->
.B
                      ok
.br
.fi
.br
.RS
.LP
\fIgl:drawArraysIndirect/2\fR\& specifies multiple geometric primitives with very few subroutine calls\&. \fIgl:drawArraysIndirect/2\fR\& behaves similarly to \fIgl:drawArraysInstancedBaseInstance/5\fR\&, execept that the parameters to \fIgl:drawArraysInstancedBaseInstance/5\fR\& are stored in memory at the address given by \fIIndirect\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
drawArraysInstanced(Mode :: enum(),
.B
                    First :: i(),
.B
                    Count :: i(),
.B
                    Instancecount :: i()) ->
.B
                       ok
.br
.fi
.br
.RS
.LP
\fIgl:drawArraysInstanced/4\fR\& behaves identically to \fIgl:drawArrays/3\fR\& except that \fIInstancecount\fR\& instances of the range of elements are executed and the value of the internal counter \fIInstanceID\fR\& advances for each iteration\&. \fIInstanceID\fR\& is an internal 32-bit integer counter that may be read by a vertex shader as \fI?gl_InstanceID\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
drawArraysInstancedBaseInstance(Mode :: enum(),
.B
                                First :: i(),
.B
                                Count :: i(),
.B
                                Instancecount :: i(),
.B
                                Baseinstance :: i()) ->
.B
                                   ok
.br
.fi
.br
.RS
.LP
\fIgl:drawArraysInstancedBaseInstance/5\fR\& behaves identically to \fIgl:drawArrays/3\fR\& except that \fIInstancecount\fR\& instances of the range of elements are executed and the value of the internal counter \fIInstanceID\fR\& advances for each iteration\&. \fIInstanceID\fR\& is an internal 32-bit integer counter that may be read by a vertex shader as \fI?gl_InstanceID\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
drawBuffer(Mode :: enum()) -> ok
.br
.fi
.br
.RS
.LP
When colors are written to the frame buffer, they are written into the color buffers specified by \fIgl:drawBuffer/1\fR\&\&. One of the following values can be used for default framebuffer:
.LP
External documentation\&.
.RE
.LP
.nf

.B
drawBuffers(Bufs :: [enum()]) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:drawBuffers/1\fR\& and \fIglNamedFramebufferDrawBuffers\fR\& define an array of buffers into which outputs from the fragment shader data will be written\&. If a fragment shader writes a value to one or more user defined output variables, then the value of each variable will be written into the buffer specified at a location within \fIBufs\fR\& corresponding to the location assigned to that user defined output\&. The draw buffer used for user defined outputs assigned to locations greater than or equal to \fIN\fR\& is implicitly set to \fI?GL_NONE\fR\& and any data written to such an output is discarded\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
drawElements(Mode :: enum(),
.B
             Count :: i(),
.B
             Type :: enum(),
.B
             Indices :: offset() | mem()) ->
.B
                ok
.br
.fi
.br
.RS
.LP
\fIgl:drawElements/4\fR\& specifies multiple geometric primitives with very few subroutine calls\&. Instead of calling a GL function to pass each individual vertex, normal, texture coordinate, edge flag, or color, you can prespecify separate arrays of vertices, normals, and so on, and use them to construct a sequence of primitives with a single call to \fIgl:drawElements/4\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
drawElementsBaseVertex(Mode, Count, Type, Indices, Basevertex) ->
.B
                          ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Mode = enum()
.br
Count = i()
.br
Type = enum()
.br
Indices = offset() | mem()
.br
Basevertex = i()
.br
.RE
.RE
.RS
.LP
\fIgl:drawElementsBaseVertex/5\fR\& behaves identically to \fIgl:drawElements/4\fR\& except that the \fIi\fR\&th element transferred by the corresponding draw call will be taken from element \fIIndices\fR\&[i] + \fIBasevertex\fR\& of each enabled array\&. If the resulting value is larger than the maximum value representable by \fIType\fR\&, it is as if the calculation were upconverted to 32-bit unsigned integers (with wrapping on overflow conditions)\&. The operation is undefined if the sum would be negative\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
drawElementsIndirect(Mode :: enum(),
.B
                     Type :: enum(),
.B
                     Indirect :: offset() | mem()) ->
.B
                        ok
.br
.fi
.br
.RS
.LP
\fIgl:drawElementsIndirect/3\fR\& specifies multiple indexed geometric primitives with very few subroutine calls\&. \fIgl:drawElementsIndirect/3\fR\& behaves similarly to \fIgl:drawElementsInstancedBaseVertexBaseInstance/7\fR\&, execpt that the parameters to \fIgl:drawElementsInstancedBaseVertexBaseInstance/7\fR\& are stored in memory at the address given by \fIIndirect\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
drawElementsInstanced(Mode, Count, Type, Indices, Instancecount) ->
.B
                         ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Mode = enum()
.br
Count = i()
.br
Type = enum()
.br
Indices = offset() | mem()
.br
Instancecount = i()
.br
.RE
.RE
.RS
.LP
\fIgl:drawElementsInstanced/5\fR\& behaves identically to \fIgl:drawElements/4\fR\& except that \fIInstancecount\fR\& instances of the set of elements are executed and the value of the internal counter \fIInstanceID\fR\& advances for each iteration\&. \fIInstanceID\fR\& is an internal 32-bit integer counter that may be read by a vertex shader as \fI?gl_InstanceID\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
drawElementsInstancedBaseInstance(Mode, Count, Type, Indices,
.B
                                  Instancecount, Baseinstance) ->
.B
                                     ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Mode = enum()
.br
Count = i()
.br
Type = enum()
.br
Indices = offset() | mem()
.br
Instancecount = Baseinstance = i()
.br
.RE
.RE
.RS
.LP
\fIgl:drawElementsInstancedBaseInstance/6\fR\& behaves identically to \fIgl:drawElements/4\fR\& except that \fIInstancecount\fR\& instances of the set of elements are executed and the value of the internal counter \fIInstanceID\fR\& advances for each iteration\&. \fIInstanceID\fR\& is an internal 32-bit integer counter that may be read by a vertex shader as \fI?gl_InstanceID\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
drawElementsInstancedBaseVertex(Mode, Count, Type, Indices,
.B
                                Instancecount, Basevertex) ->
.B
                                   ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Mode = enum()
.br
Count = i()
.br
Type = enum()
.br
Indices = offset() | mem()
.br
Instancecount = Basevertex = i()
.br
.RE
.RE
.RS
.LP
\fIgl:drawElementsInstancedBaseVertex/6\fR\& behaves identically to \fIgl:drawElementsInstanced/5\fR\& except that the \fIi\fR\&th element transferred by the corresponding draw call will be taken from element \fIIndices\fR\&[i] + \fIBasevertex\fR\& of each enabled array\&. If the resulting value is larger than the maximum value representable by \fIType\fR\&, it is as if the calculation were upconverted to 32-bit unsigned integers (with wrapping on overflow conditions)\&. The operation is undefined if the sum would be negative\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
drawElementsInstancedBaseVertexBaseInstance(Mode, Count, Type,
.B
                                            Indices,
.B
                                            Instancecount,
.B
                                            Basevertex,
.B
                                            Baseinstance) ->
.B
                                               ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Mode = enum()
.br
Count = i()
.br
Type = enum()
.br
Indices = offset() | mem()
.br
Instancecount = Basevertex = Baseinstance = i()
.br
.RE
.RE
.RS
.LP
\fIgl:drawElementsInstancedBaseVertexBaseInstance/7\fR\& behaves identically to \fIgl:drawElementsInstanced/5\fR\& except that the \fIi\fR\&th element transferred by the corresponding draw call will be taken from element \fIIndices\fR\&[i] + \fIBasevertex\fR\& of each enabled array\&. If the resulting value is larger than the maximum value representable by \fIType\fR\&, it is as if the calculation were upconverted to 32-bit unsigned integers (with wrapping on overflow conditions)\&. The operation is undefined if the sum would be negative\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
drawPixels(Width :: i(),
.B
           Height :: i(),
.B
           Format :: enum(),
.B
           Type :: enum(),
.B
           Pixels :: offset() | mem()) ->
.B
              ok
.br
.fi
.br
.RS
.LP
\fIgl:drawPixels/5\fR\& reads pixel data from memory and writes it into the frame buffer relative to the current raster position, provided that the raster position is valid\&. Use \fIgl:rasterPos()\fR\& or \fIgl:windowPos()\fR\& to set the current raster position; use \fIgl:get()\fR\& with argument \fI?GL_CURRENT_RASTER_POSITION_VALID\fR\& to determine if the specified raster position is valid, and \fIgl:get()\fR\& with argument \fI?GL_CURRENT_RASTER_POSITION\fR\& to query the raster position\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
drawRangeElements(Mode, Start, End, Count, Type, Indices) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Mode = enum()
.br
Start = End = Count = i()
.br
Type = enum()
.br
Indices = offset() | mem()
.br
.RE
.RE
.RS
.LP
\fIgl:drawRangeElements/6\fR\& is a restricted form of \fIgl:drawElements/4\fR\&\&. \fIMode\fR\&, and \fICount\fR\& match the corresponding arguments to \fIgl:drawElements/4\fR\&, with the additional constraint that all values in the arrays \fICount\fR\& must lie between \fIStart\fR\& and \fIEnd\fR\&, inclusive\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
drawRangeElementsBaseVertex(Mode, Start, End, Count, Type,
.B
                            Indices, Basevertex) ->
.B
                               ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Mode = enum()
.br
Start = End = Count = i()
.br
Type = enum()
.br
Indices = offset() | mem()
.br
Basevertex = i()
.br
.RE
.RE
.RS
.LP
\fIgl:drawRangeElementsBaseVertex/7\fR\& is a restricted form of \fIgl:drawElementsBaseVertex/5\fR\&\&. \fIMode\fR\&, \fICount\fR\& and \fIBasevertex\fR\& match the corresponding arguments to \fIgl:drawElementsBaseVertex/5\fR\&, with the additional constraint that all values in the array \fIIndices\fR\& must lie between \fIStart\fR\& and \fIEnd\fR\&, inclusive, prior to adding \fIBasevertex\fR\&\&. Index values lying outside the range [\fIStart\fR\&, \fIEnd\fR\&] are treated in the same way as \fIgl:drawElementsBaseVertex/5\fR\&\&. The \fIi\fR\&th element transferred by the corresponding draw call will be taken from element \fIIndices\fR\&[i] + \fIBasevertex\fR\& of each enabled array\&. If the resulting value is larger than the maximum value representable by \fIType\fR\&, it is as if the calculation were upconverted to 32-bit unsigned integers (with wrapping on overflow conditions)\&. The operation is undefined if the sum would be negative\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
drawTransformFeedback(Mode :: enum(), Id :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:drawTransformFeedback/2\fR\& draws primitives of a type specified by \fIMode\fR\& using a count retrieved from the transform feedback specified by \fIId\fR\&\&. Calling \fIgl:drawTransformFeedback/2\fR\& is equivalent to calling \fIgl:drawArrays/3\fR\& with \fIMode\fR\& as specified, \fIFirst\fR\& set to zero, and \fICount\fR\& set to the number of vertices captured on vertex stream zero the last time transform feedback was active on the transform feedback object named by \fIId\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
drawTransformFeedbackInstanced(Mode :: enum(),
.B
                               Id :: i(),
.B
                               Instancecount :: i()) ->
.B
                                  ok
.br
.fi
.br
.RS
.LP
\fIgl:drawTransformFeedbackInstanced/3\fR\& draws multiple copies of a range of primitives of a type specified by \fIMode\fR\& using a count retrieved from the transform feedback stream specified by \fIStream\fR\& of the transform feedback object specified by \fIId\fR\&\&. Calling \fIgl:drawTransformFeedbackInstanced/3\fR\& is equivalent to calling \fIgl:drawArraysInstanced/4\fR\& with \fIMode\fR\& and \fIInstancecount\fR\& as specified, \fIFirst\fR\& set to zero, and \fICount\fR\& set to the number of vertices captured on vertex stream zero the last time transform feedback was active on the transform feedback object named by \fIId\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
drawTransformFeedbackStream(Mode :: enum(),
.B
                            Id :: i(),
.B
                            Stream :: i()) ->
.B
                               ok
.br
.fi
.br
.RS
.LP
\fIgl:drawTransformFeedbackStream/3\fR\& draws primitives of a type specified by \fIMode\fR\& using a count retrieved from the transform feedback stream specified by \fIStream\fR\& of the transform feedback object specified by \fIId\fR\&\&. Calling \fIgl:drawTransformFeedbackStream/3\fR\& is equivalent to calling \fIgl:drawArrays/3\fR\& with \fIMode\fR\& as specified, \fIFirst\fR\& set to zero, and \fICount\fR\& set to the number of vertices captured on vertex stream \fIStream\fR\& the last time transform feedback was active on the transform feedback object named by \fIId\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
drawTransformFeedbackStreamInstanced(Mode :: enum(),
.B
                                     Id :: i(),
.B
                                     Stream :: i(),
.B
                                     Instancecount :: i()) ->
.B
                                        ok
.br
.fi
.br
.RS
.LP
\fIgl:drawTransformFeedbackStreamInstanced/4\fR\& draws multiple copies of a range of primitives of a type specified by \fIMode\fR\& using a count retrieved from the transform feedback stream specified by \fIStream\fR\& of the transform feedback object specified by \fIId\fR\&\&. Calling \fIgl:drawTransformFeedbackStreamInstanced/4\fR\& is equivalent to calling \fIgl:drawArraysInstanced/4\fR\& with \fIMode\fR\& and \fIInstancecount\fR\& as specified, \fIFirst\fR\& set to zero, and \fICount\fR\& set to the number of vertices captured on vertex stream \fIStream\fR\& the last time transform feedback was active on the transform feedback object named by \fIId\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
edgeFlag(Flag :: 0 | 1) -> ok
.br
.fi
.br
.nf

.B
edgeFlagv(X1 :: {Flag :: 0 | 1}) -> ok
.br
.fi
.br
.RS
.LP
Each vertex of a polygon, separate triangle, or separate quadrilateral specified between a \fIgl:\&'begin\&'/1\fR\&/\fIgl:\&'end\&'/0\fR\& pair is marked as the start of either a boundary or nonboundary edge\&. If the current edge flag is true when the vertex is specified, the vertex is marked as the start of a boundary edge\&. Otherwise, the vertex is marked as the start of a nonboundary edge\&. \fIgl:edgeFlag/1\fR\& sets the edge flag bit to \fI?GL_TRUE\fR\& if \fIFlag\fR\& is \fI?GL_TRUE\fR\& and to \fI?GL_FALSE\fR\& otherwise\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
edgeFlagPointer(Stride :: i(), Ptr :: offset() | mem()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:edgeFlagPointer/2\fR\& specifies the location and data format of an array of boolean edge flags to use when rendering\&. \fIStride\fR\& specifies the byte stride from one edge flag to the next, allowing vertices and attributes to be packed into a single array or stored in separate arrays\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
disable(Cap :: enum()) -> ok
.br
.fi
.br
.nf

.B
disablei(Target :: enum(), Index :: i()) -> ok
.br
.fi
.br
.nf

.B
enable(Cap :: enum()) -> ok
.br
.fi
.br
.nf

.B
enablei(Target :: enum(), Index :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:enable/1\fR\& and \fIgl:disable/1\fR\& enable and disable various capabilities\&. Use \fIgl:isEnabled/1\fR\& or \fIgl:get()\fR\& to determine the current setting of any capability\&. The initial value for each capability with the exception of \fI?GL_DITHER\fR\& and \fI?GL_MULTISAMPLE\fR\& is \fI?GL_FALSE\fR\&\&. The initial value for \fI?GL_DITHER\fR\& and \fI?GL_MULTISAMPLE\fR\& is \fI?GL_TRUE\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
disableClientState(Cap :: enum()) -> ok
.br
.fi
.br
.nf

.B
enableClientState(Cap :: enum()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:enableClientState/1\fR\& and \fIgl:disableClientState/1\fR\& enable or disable individual client-side capabilities\&. By default, all client-side capabilities are disabled\&. Both \fIgl:enableClientState/1\fR\& and \fIgl:disableClientState/1\fR\& take a single argument, \fICap\fR\&, which can assume one of the following values:
.LP
External documentation\&.
.RE
.LP
.nf

.B
disableVertexArrayAttrib(Vaobj :: i(), Index :: i()) -> ok
.br
.fi
.br
.nf

.B
disableVertexAttribArray(Index :: i()) -> ok
.br
.fi
.br
.nf

.B
enableVertexArrayAttrib(Vaobj :: i(), Index :: i()) -> ok
.br
.fi
.br
.nf

.B
enableVertexAttribArray(Index :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:enableVertexAttribArray/1\fR\& and \fIgl:enableVertexArrayAttrib/2\fR\& enable the generic vertex attribute array specified by \fIIndex\fR\&\&. \fIgl:enableVertexAttribArray/1\fR\& uses currently bound vertex array object for the operation, whereas \fIgl:enableVertexArrayAttrib/2\fR\& updates state of the vertex array object with ID \fIVaobj\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
evalCoord1d(U :: f()) -> ok
.br
.fi
.br
.nf

.B
evalCoord1dv(X1 :: {U :: f()}) -> ok
.br
.fi
.br
.nf

.B
evalCoord1f(U :: f()) -> ok
.br
.fi
.br
.nf

.B
evalCoord1fv(X1 :: {U :: f()}) -> ok
.br
.fi
.br
.nf

.B
evalCoord2d(U :: f(), V :: f()) -> ok
.br
.fi
.br
.nf

.B
evalCoord2dv(X1 :: {U :: f(), V :: f()}) -> ok
.br
.fi
.br
.nf

.B
evalCoord2f(U :: f(), V :: f()) -> ok
.br
.fi
.br
.nf

.B
evalCoord2fv(X1 :: {U :: f(), V :: f()}) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:evalCoord1()\fR\& evaluates enabled one-dimensional maps at argument \fIU\fR\&\&. \fIgl:evalCoord2()\fR\& does the same for two-dimensional maps using two domain values, \fIU\fR\& and \fIV\fR\&\&. To define a map, call \fIglMap1\fR\& and \fIglMap2\fR\&; to enable and disable it, call \fIgl:enable/1\fR\& and \fIgl:disable/1\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
evalMesh1(Mode :: enum(), I1 :: i(), I2 :: i()) -> ok
.br
.fi
.br
.nf

.B
evalMesh2(Mode :: enum(),
.B
          I1 :: i(),
.B
          I2 :: i(),
.B
          J1 :: i(),
.B
          J2 :: i()) ->
.B
             ok
.br
.fi
.br
.RS
.LP
\fIgl:mapGrid()\fR\& and \fIgl:evalMesh()\fR\& are used in tandem to efficiently generate and evaluate a series of evenly-spaced map domain values\&. \fIgl:evalMesh()\fR\& steps through the integer domain of a one- or two-dimensional grid, whose range is the domain of the evaluation maps specified by \fIglMap1\fR\& and \fIglMap2\fR\&\&. \fIMode\fR\& determines whether the resulting vertices are connected as points, lines, or filled polygons\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
evalPoint1(I :: i()) -> ok
.br
.fi
.br
.nf

.B
evalPoint2(I :: i(), J :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:mapGrid()\fR\& and \fIgl:evalMesh()\fR\& are used in tandem to efficiently generate and evaluate a series of evenly spaced map domain values\&. \fIgl:evalPoint()\fR\& can be used to evaluate a single grid point in the same gridspace that is traversed by \fIgl:evalMesh()\fR\&\&. Calling \fIgl:evalPoint1/1\fR\& is equivalent to calling glEvalCoord1( i\&.ð u+u 1 ); where ð u=(u 2-u 1)/n
.LP
External documentation\&.
.RE
.LP
.nf

.B
feedbackBuffer(Size :: i(), Type :: enum(), Buffer :: mem()) -> ok
.br
.fi
.br
.RS
.LP
The \fIgl:feedbackBuffer/3\fR\& function controls feedback\&. Feedback, like selection, is a GL mode\&. The mode is selected by calling \fIgl:renderMode/1\fR\& with \fI?GL_FEEDBACK\fR\&\&. When the GL is in feedback mode, no pixels are produced by rasterization\&. Instead, information about primitives that would have been rasterized is fed back to the application using the GL\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
fenceSync(Condition :: enum(), Flags :: i()) -> i()
.br
.fi
.br
.RS
.LP
\fIgl:fenceSync/2\fR\& creates a new fence sync object, inserts a fence command into the GL command stream and associates it with that sync object, and returns a non-zero name corresponding to the sync object\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
finish() -> ok
.br
.fi
.br
.RS
.LP
\fIgl:finish/0\fR\& does not return until the effects of all previously called GL commands are complete\&. Such effects include all changes to GL state, all changes to connection state, and all changes to the frame buffer contents\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
flush() -> ok
.br
.fi
.br
.RS
.LP
Different GL implementations buffer commands in several different locations, including network buffers and the graphics accelerator itself\&. \fIgl:flush/0\fR\& empties all of these buffers, causing all issued commands to be executed as quickly as they are accepted by the actual rendering engine\&. Though this execution may not be completed in any particular time period, it does complete in finite time\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
flushMappedBufferRange(Target :: enum(),
.B
                       Offset :: i(),
.B
                       Length :: i()) ->
.B
                          ok
.br
.fi
.br
.nf

.B
flushMappedNamedBufferRange(Buffer :: i(),
.B
                            Offset :: i(),
.B
                            Length :: i()) ->
.B
                               ok
.br
.fi
.br
.RS
.LP
\fIgl:flushMappedBufferRange/3\fR\& indicates that modifications have been made to a range of a mapped buffer object\&. The buffer object must previously have been mapped with the \fI?GL_MAP_FLUSH_EXPLICIT_BIT\fR\& flag\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
fogf(Pname :: enum(), Param :: f()) -> ok
.br
.fi
.br
.nf

.B
fogfv(Pname :: enum(), Params :: tuple()) -> ok
.br
.fi
.br
.nf

.B
fogi(Pname :: enum(), Param :: i()) -> ok
.br
.fi
.br
.nf

.B
fogiv(Pname :: enum(), Params :: tuple()) -> ok
.br
.fi
.br
.RS
.LP
Fog is initially disabled\&. While enabled, fog affects rasterized geometry, bitmaps, and pixel blocks, but not buffer clear operations\&. To enable and disable fog, call \fIgl:enable/1\fR\& and \fIgl:disable/1\fR\& with argument \fI?GL_FOG\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
fogCoordd(Coord :: f()) -> ok
.br
.fi
.br
.nf

.B
fogCoorddv(X1 :: {Coord :: f()}) -> ok
.br
.fi
.br
.nf

.B
fogCoordf(Coord :: f()) -> ok
.br
.fi
.br
.nf

.B
fogCoordfv(X1 :: {Coord :: f()}) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:fogCoord()\fR\& specifies the fog coordinate that is associated with each vertex and the current raster position\&. The value specified is interpolated and used in computing the fog color (see \fIgl:fog()\fR\&)\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
fogCoordPointer(Type :: enum(),
.B
                Stride :: i(),
.B
                Pointer :: offset() | mem()) ->
.B
                   ok
.br
.fi
.br
.RS
.LP
\fIgl:fogCoordPointer/3\fR\& specifies the location and data format of an array of fog coordinates to use when rendering\&. \fIType\fR\& specifies the data type of each fog coordinate, and \fIStride\fR\& specifies the byte stride from one fog coordinate to the next, allowing vertices and attributes to be packed into a single array or stored in separate arrays\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
framebufferParameteri(Target :: enum(),
.B
                      Pname :: enum(),
.B
                      Param :: i()) ->
.B
                         ok
.br
.fi
.br
.RS
.LP
\fIgl:framebufferParameteri/3\fR\& and \fIglNamedFramebufferParameteri\fR\& modify the value of the parameter named \fIPname\fR\& in the specified framebuffer object\&. There are no modifiable parameters of the default draw and read framebuffer, so they are not valid targets of these commands\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
framebufferRenderbuffer(Target, Attachment, Renderbuffertarget,
.B
                        Renderbuffer) ->
.B
                           ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Target = Attachment = Renderbuffertarget = enum()
.br
Renderbuffer = i()
.br
.RE
.RE
.RS
.LP
\fIgl:framebufferRenderbuffer/4\fR\& and \fIglNamedFramebufferRenderbuffer\fR\& attaches a renderbuffer as one of the logical buffers of the specified framebuffer object\&. Renderbuffers cannot be attached to the default draw and read framebuffer, so they are not valid targets of these commands\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
framebufferTexture(Target :: enum(),
.B
                   Attachment :: enum(),
.B
                   Texture :: i(),
.B
                   Level :: i()) ->
.B
                      ok
.br
.fi
.br
.nf

.B
framebufferTexture1D(Target :: enum(),
.B
                     Attachment :: enum(),
.B
                     Textarget :: enum(),
.B
                     Texture :: i(),
.B
                     Level :: i()) ->
.B
                        ok
.br
.fi
.br
.nf

.B
framebufferTexture2D(Target :: enum(),
.B
                     Attachment :: enum(),
.B
                     Textarget :: enum(),
.B
                     Texture :: i(),
.B
                     Level :: i()) ->
.B
                        ok
.br
.fi
.br
.nf

.B
framebufferTexture3D(Target, Attachment, Textarget, Texture,
.B
                     Level, Zoffset) ->
.B
                        ok
.br
.fi
.br
.nf

.B
framebufferTextureFaceARB(Target :: enum(),
.B
                          Attachment :: enum(),
.B
                          Texture :: i(),
.B
                          Level :: i(),
.B
                          Face :: enum()) ->
.B
                             ok
.br
.fi
.br
.nf

.B
framebufferTextureLayer(Target :: enum(),
.B
                        Attachment :: enum(),
.B
                        Texture :: i(),
.B
                        Level :: i(),
.B
                        Layer :: i()) ->
.B
                           ok
.br
.fi
.br
.RS
.LP
These commands attach a selected mipmap level or image of a texture object as one of the logical buffers of the specified framebuffer object\&. Textures cannot be attached to the default draw and read framebuffer, so they are not valid targets of these commands\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
frontFace(Mode :: enum()) -> ok
.br
.fi
.br
.RS
.LP
In a scene composed entirely of opaque closed surfaces, back-facing polygons are never visible\&. Eliminating these invisible polygons has the obvious benefit of speeding up the rendering of the image\&. To enable and disable elimination of back-facing polygons, call \fIgl:enable/1\fR\& and \fIgl:disable/1\fR\& with argument \fI?GL_CULL_FACE\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
frustum(Left :: f(),
.B
        Right :: f(),
.B
        Bottom :: f(),
.B
        Top :: f(),
.B
        Near_val :: f(),
.B
        Far_val :: f()) ->
.B
           ok
.br
.fi
.br
.RS
.LP
\fIgl:frustum/6\fR\& describes a perspective matrix that produces a perspective projection\&. The current matrix (see \fIgl:matrixMode/1\fR\&) is multiplied by this matrix and the result replaces the current matrix, as if \fIgl:multMatrix()\fR\& were called with the following matrix as its argument:
.LP
External documentation\&.
.RE
.LP
.nf

.B
genBuffers(N :: i()) -> [i()]
.br
.fi
.br
.RS
.LP
\fIgl:genBuffers/1\fR\& returns \fIN\fR\& buffer object names in \fIBuffers\fR\&\&. There is no guarantee that the names form a contiguous set of integers; however, it is guaranteed that none of the returned names was in use immediately before the call to \fIgl:genBuffers/1\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
genFramebuffers(N :: i()) -> [i()]
.br
.fi
.br
.RS
.LP
\fIgl:genFramebuffers/1\fR\& returns \fIN\fR\& framebuffer object names in \fIIds\fR\&\&. There is no guarantee that the names form a contiguous set of integers; however, it is guaranteed that none of the returned names was in use immediately before the call to \fIgl:genFramebuffers/1\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
genLists(Range :: i()) -> i()
.br
.fi
.br
.RS
.LP
\fIgl:genLists/1\fR\& has one argument, \fIRange\fR\&\&. It returns an integer \fIn\fR\& such that \fIRange\fR\& contiguous empty display lists, named n, n+1, \&.\&.\&., n+range-1, are created\&. If \fIRange\fR\& is 0, if there is no group of \fIRange\fR\& contiguous names available, or if any error is generated, no display lists are generated, and 0 is returned\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
genProgramPipelines(N :: i()) -> [i()]
.br
.fi
.br
.RS
.LP
\fIgl:genProgramPipelines/1\fR\& returns \fIN\fR\& previously unused program pipeline object names in \fIPipelines\fR\&\&. These names are marked as used, for the purposes of \fIgl:genProgramPipelines/1\fR\& only, but they acquire program pipeline state only when they are first bound\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
genQueries(N :: i()) -> [i()]
.br
.fi
.br
.RS
.LP
\fIgl:genQueries/1\fR\& returns \fIN\fR\& query object names in \fIIds\fR\&\&. There is no guarantee that the names form a contiguous set of integers; however, it is guaranteed that none of the returned names was in use immediately before the call to \fIgl:genQueries/1\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
genRenderbuffers(N :: i()) -> [i()]
.br
.fi
.br
.RS
.LP
\fIgl:genRenderbuffers/1\fR\& returns \fIN\fR\& renderbuffer object names in \fIRenderbuffers\fR\&\&. There is no guarantee that the names form a contiguous set of integers; however, it is guaranteed that none of the returned names was in use immediately before the call to \fIgl:genRenderbuffers/1\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
genSamplers(Count :: i()) -> [i()]
.br
.fi
.br
.RS
.LP
\fIgl:genSamplers/1\fR\& returns \fIN\fR\& sampler object names in \fISamplers\fR\&\&. There is no guarantee that the names form a contiguous set of integers; however, it is guaranteed that none of the returned names was in use immediately before the call to \fIgl:genSamplers/1\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
genTextures(N :: i()) -> [i()]
.br
.fi
.br
.RS
.LP
\fIgl:genTextures/1\fR\& returns \fIN\fR\& texture names in \fITextures\fR\&\&. There is no guarantee that the names form a contiguous set of integers; however, it is guaranteed that none of the returned names was in use immediately before the call to \fIgl:genTextures/1\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
genTransformFeedbacks(N :: i()) -> [i()]
.br
.fi
.br
.RS
.LP
\fIgl:genTransformFeedbacks/1\fR\& returns \fIN\fR\& previously unused transform feedback object names in \fIIds\fR\&\&. These names are marked as used, for the purposes of \fIgl:genTransformFeedbacks/1\fR\& only, but they acquire transform feedback state only when they are first bound\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
genVertexArrays(N :: i()) -> [i()]
.br
.fi
.br
.RS
.LP
\fIgl:genVertexArrays/1\fR\& returns \fIN\fR\& vertex array object names in \fIArrays\fR\&\&. There is no guarantee that the names form a contiguous set of integers; however, it is guaranteed that none of the returned names was in use immediately before the call to \fIgl:genVertexArrays/1\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
generateMipmap(Target :: enum()) -> ok
.br
.fi
.br
.nf

.B
generateTextureMipmap(Texture :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:generateMipmap/1\fR\& and \fIgl:generateTextureMipmap/1\fR\& generates mipmaps for the specified texture object\&. For \fIgl:generateMipmap/1\fR\&, the texture object that is bound to \fITarget\fR\&\&. For \fIgl:generateTextureMipmap/1\fR\&, \fITexture\fR\& is the name of the texture object\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getBooleani_v(Target :: enum(), Index :: i()) -> [0 | 1]
.br
.fi
.br
.nf

.B
getBooleanv(Pname :: enum()) -> [0 | 1]
.br
.fi
.br
.nf

.B
getDoublei_v(Target :: enum(), Index :: i()) -> [f()]
.br
.fi
.br
.nf

.B
getDoublev(Pname :: enum()) -> [f()]
.br
.fi
.br
.nf

.B
getFloati_v(Target :: enum(), Index :: i()) -> [f()]
.br
.fi
.br
.nf

.B
getFloatv(Pname :: enum()) -> [f()]
.br
.fi
.br
.nf

.B
getInteger64i_v(Target :: enum(), Index :: i()) -> [i()]
.br
.fi
.br
.nf

.B
getInteger64v(Pname :: enum()) -> [i()]
.br
.fi
.br
.nf

.B
getIntegeri_v(Target :: enum(), Index :: i()) -> [i()]
.br
.fi
.br
.nf

.B
getIntegerv(Pname :: enum()) -> [i()]
.br
.fi
.br
.RS
.LP
These commands return values for simple state variables in GL\&. \fIPname\fR\& is a symbolic constant indicating the state variable to be returned, and \fIData\fR\& is a pointer to an array of the indicated type in which to place the returned data\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getActiveAttrib(Program :: i(), Index :: i(), BufSize :: i()) ->
.B
                   {Size :: i(), Type :: enum(), Name :: string()}
.br
.fi
.br
.RS
.LP
\fIgl:getActiveAttrib/3\fR\& returns information about an active attribute variable in the program object specified by \fIProgram\fR\&\&. The number of active attributes can be obtained by calling \fIgl:getProgram()\fR\& with the value \fI?GL_ACTIVE_ATTRIBUTES\fR\&\&. A value of 0 for \fIIndex\fR\& selects the first active attribute variable\&. Permissible values for \fIIndex\fR\& range from zero to the number of active attribute variables minus one\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getActiveSubroutineName(Program :: i(),
.B
                        Shadertype :: enum(),
.B
                        Index :: i(),
.B
                        Bufsize :: i()) ->
.B
                           string()
.br
.fi
.br
.RS
.LP
\fIgl:getActiveSubroutineName/4\fR\& queries the name of an active shader subroutine uniform from the program object given in \fIProgram\fR\&\&. \fIIndex\fR\& specifies the index of the shader subroutine uniform within the shader stage given by \fIStage\fR\&, and must between zero and the value of \fI?GL_ACTIVE_SUBROUTINES\fR\& minus one for the shader stage\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getActiveSubroutineUniformName(Program :: i(),
.B
                               Shadertype :: enum(),
.B
                               Index :: i(),
.B
                               Bufsize :: i()) ->
.B
                                  string()
.br
.fi
.br
.RS
.LP
\fIgl:getActiveSubroutineUniformName/4\fR\& retrieves the name of an active shader subroutine uniform\&. \fIProgram\fR\& contains the name of the program containing the uniform\&. \fIShadertype\fR\& specifies the stage for which the uniform location, given by \fIIndex\fR\&, is valid\&. \fIIndex\fR\& must be between zero and the value of \fI?GL_ACTIVE_SUBROUTINE_UNIFORMS\fR\& minus one for the shader stage\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getActiveUniform(Program :: i(), Index :: i(), BufSize :: i()) ->
.B
                    {Size :: i(),
.B
                     Type :: enum(),
.B
                     Name :: string()}
.br
.fi
.br
.RS
.LP
\fIgl:getActiveUniform/3\fR\& returns information about an active uniform variable in the program object specified by \fIProgram\fR\&\&. The number of active uniform variables can be obtained by calling \fIgl:getProgram()\fR\& with the value \fI?GL_ACTIVE_UNIFORMS\fR\&\&. A value of 0 for \fIIndex\fR\& selects the first active uniform variable\&. Permissible values for \fIIndex\fR\& range from zero to the number of active uniform variables minus one\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getActiveUniformBlockiv(Program :: i(),
.B
                        UniformBlockIndex :: i(),
.B
                        Pname :: enum(),
.B
                        Params :: mem()) ->
.B
                           ok
.br
.fi
.br
.RS
.LP
\fIgl:getActiveUniformBlockiv/4\fR\& retrieves information about an active uniform block within \fIProgram\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getActiveUniformBlockName(Program :: i(),
.B
                          UniformBlockIndex :: i(),
.B
                          BufSize :: i()) ->
.B
                             string()
.br
.fi
.br
.RS
.LP
\fIgl:getActiveUniformBlockName/3\fR\& retrieves the name of the active uniform block at \fIUniformBlockIndex\fR\& within \fIProgram\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getActiveUniformName(Program :: i(),
.B
                     UniformIndex :: i(),
.B
                     BufSize :: i()) ->
.B
                        string()
.br
.fi
.br
.RS
.LP
\fIgl:getActiveUniformName/3\fR\& returns the name of the active uniform at \fIUniformIndex\fR\& within \fIProgram\fR\&\&. If \fIUniformName\fR\& is not NULL, up to \fIBufSize\fR\& characters (including a nul-terminator) will be written into the array whose address is specified by \fIUniformName\fR\&\&. If \fILength\fR\& is not NULL, the number of characters that were (or would have been) written into \fIUniformName\fR\& (not including the nul-terminator) will be placed in the variable whose address is specified in \fILength\fR\&\&. If \fILength\fR\& is NULL, no length is returned\&. The length of the longest uniform name in \fIProgram\fR\& is given by the value of \fI?GL_ACTIVE_UNIFORM_MAX_LENGTH\fR\&, which can be queried with \fIgl:getProgram()\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getActiveUniformsiv(Program :: i(),
.B
                    UniformIndices :: [i()],
.B
                    Pname :: enum()) ->
.B
                       [i()]
.br
.fi
.br
.RS
.LP
\fIgl:getActiveUniformsiv/3\fR\& queries the value of the parameter named \fIPname\fR\& for each of the uniforms within \fIProgram\fR\& whose indices are specified in the array of \fIUniformCount\fR\& unsigned integers \fIUniformIndices\fR\&\&. Upon success, the value of the parameter for each uniform is written into the corresponding entry in the array whose address is given in \fIParams\fR\&\&. If an error is generated, nothing is written into \fIParams\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getAttachedShaders(Program :: i(), MaxCount :: i()) -> [i()]
.br
.fi
.br
.RS
.LP
\fIgl:getAttachedShaders/2\fR\& returns the names of the shader objects attached to \fIProgram\fR\&\&. The names of shader objects that are attached to \fIProgram\fR\& will be returned in \fIShaders\&.\fR\& The actual number of shader names written into \fIShaders\fR\& is returned in \fICount\&.\fR\& If no shader objects are attached to \fIProgram\fR\&, \fICount\fR\& is set to 0\&. The maximum number of shader names that may be returned in \fIShaders\fR\& is specified by \fIMaxCount\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getAttribLocation(Program :: i(), Name :: string()) -> i()
.br
.fi
.br
.RS
.LP
\fIgl:getAttribLocation/2\fR\& queries the previously linked program object specified by \fIProgram\fR\& for the attribute variable specified by \fIName\fR\& and returns the index of the generic vertex attribute that is bound to that attribute variable\&. If \fIName\fR\& is a matrix attribute variable, the index of the first column of the matrix is returned\&. If the named attribute variable is not an active attribute in the specified program object or if \fIName\fR\& starts with the reserved prefix "gl_", a value of -1 is returned\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getBufferParameteri64v(Target :: enum(), Pname :: enum()) -> [i()]
.br
.fi
.br
.nf

.B
getBufferParameterivARB(Target :: enum(), Pname :: enum()) ->
.B
                           [i()]
.br
.fi
.br
.RS
.LP
These functions return in \fIData\fR\& a selected parameter of the specified buffer object\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getBufferParameteriv(Target :: enum(), Pname :: enum()) -> i()
.br
.fi
.br
.RS
.LP
\fIgl:getBufferParameteriv/2\fR\& returns in \fIData\fR\& a selected parameter of the buffer object specified by \fITarget\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getBufferSubData(Target :: enum(),
.B
                 Offset :: i(),
.B
                 Size :: i(),
.B
                 Data :: mem()) ->
.B
                    ok
.br
.fi
.br
.RS
.LP
\fIgl:getBufferSubData/4\fR\& and \fIglGetNamedBufferSubData\fR\& return some or all of the data contents of the data store of the specified buffer object\&. Data starting at byte offset \fIOffset\fR\& and extending for \fISize\fR\& bytes is copied from the buffer object\&'s data store to the memory pointed to by \fIData\fR\&\&. An error is thrown if the buffer object is currently mapped, or if \fIOffset\fR\& and \fISize\fR\& together define a range beyond the bounds of the buffer object\&'s data store\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getClipPlane(Plane :: enum()) -> {f(), f(), f(), f()}
.br
.fi
.br
.RS
.LP
\fIgl:getClipPlane/1\fR\& returns in \fIEquation\fR\& the four coefficients of the plane equation for \fIPlane\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getColorTable(Target :: enum(),
.B
              Format :: enum(),
.B
              Type :: enum(),
.B
              Table :: mem()) ->
.B
                 ok
.br
.fi
.br
.RS
.LP
\fIgl:getColorTable/4\fR\& returns in \fITable\fR\& the contents of the color table specified by \fITarget\fR\&\&. No pixel transfer operations are performed, but pixel storage modes that are applicable to \fIgl:readPixels/7\fR\& are performed\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getColorTableParameterfv(Target :: enum(), Pname :: enum()) ->
.B
                            {f(), f(), f(), f()}
.br
.fi
.br
.nf

.B
getColorTableParameteriv(Target :: enum(), Pname :: enum()) ->
.B
                            {i(), i(), i(), i()}
.br
.fi
.br
.RS
.LP
Returns parameters specific to color table \fITarget\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getCompressedTexImage(Target :: enum(), Lod :: i(), Img :: mem()) ->
.B
                         ok
.br
.fi
.br
.RS
.LP
\fIgl:getCompressedTexImage/3\fR\& and \fIglGetnCompressedTexImage\fR\& return the compressed texture image associated with \fITarget\fR\& and \fILod\fR\& into \fIPixels\fR\&\&. \fIglGetCompressedTextureImage\fR\& serves the same purpose, but instead of taking a texture target, it takes the ID of the texture object\&. \fIPixels\fR\& should be an array of \fIBufSize\fR\& bytes for \fIglGetnCompresedTexImage\fR\& and \fIglGetCompressedTextureImage\fR\& functions, and of \fI?GL_TEXTURE_COMPRESSED_IMAGE_SIZE\fR\& bytes in case of \fIgl:getCompressedTexImage/3\fR\&\&. If the actual data takes less space than \fIBufSize\fR\&, the remaining bytes will not be touched\&. \fITarget\fR\& specifies the texture target, to which the texture the data the function should extract the data from is bound to\&. \fILod\fR\& specifies the level-of-detail number of the desired image\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getConvolutionFilter(Target :: enum(),
.B
                     Format :: enum(),
.B
                     Type :: enum(),
.B
                     Image :: mem()) ->
.B
                        ok
.br
.fi
.br
.RS
.LP
\fIgl:getConvolutionFilter/4\fR\& returns the current 1D or 2D convolution filter kernel as an image\&. The one- or two-dimensional image is placed in \fIImage\fR\& according to the specifications in \fIFormat\fR\& and \fIType\fR\&\&. No pixel transfer operations are performed on this image, but the relevant pixel storage modes are applied\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getConvolutionParameterfv(Target :: enum(), Pname :: enum()) ->
.B
                             {f(), f(), f(), f()}
.br
.fi
.br
.nf

.B
getConvolutionParameteriv(Target :: enum(), Pname :: enum()) ->
.B
                             {i(), i(), i(), i()}
.br
.fi
.br
.RS
.LP
\fIgl:getConvolutionParameter()\fR\& retrieves convolution parameters\&. \fITarget\fR\& determines which convolution filter is queried\&. \fIPname\fR\& determines which parameter is returned:
.LP
External documentation\&.
.RE
.LP
.nf

.B
getDebugMessageLog(Count :: i(), BufSize :: i()) ->
.B
                      {i(),
.B
                       Sources :: [enum()],
.B
                       Types :: [enum()],
.B
                       Ids :: [i()],
.B
                       Severities :: [enum()],
.B
                       MessageLog :: [string()]}
.br
.fi
.br
.RS
.LP
\fIgl:getDebugMessageLog/2\fR\& retrieves messages from the debug message log\&. A maximum of \fICount\fR\& messages are retrieved from the log\&. If \fISources\fR\& is not NULL then the source of each message is written into up to \fICount\fR\& elements of the array\&. If \fITypes\fR\& is not NULL then the type of each message is written into up to \fICount\fR\& elements of the array\&. If \fIId\fR\& is not NULL then the identifier of each message is written into up to \fICount\fR\& elements of the array\&. If \fISeverities\fR\& is not NULL then the severity of each message is written into up to \fICount\fR\& elements of the array\&. If \fILengths\fR\& is not NULL then the length of each message is written into up to \fICount\fR\& elements of the array\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getError() -> enum()
.br
.fi
.br
.RS
.LP
\fIgl:getError/0\fR\& returns the value of the error flag\&. Each detectable error is assigned a numeric code and symbolic name\&. When an error occurs, the error flag is set to the appropriate error code value\&. No other errors are recorded until \fIgl:getError/0\fR\& is called, the error code is returned, and the flag is reset to \fI?GL_NO_ERROR\fR\&\&. If a call to \fIgl:getError/0\fR\& returns \fI?GL_NO_ERROR\fR\&, there has been no detectable error since the last call to \fIgl:getError/0\fR\&, or since the GL was initialized\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getFragDataIndex(Program :: i(), Name :: string()) -> i()
.br
.fi
.br
.RS
.LP
\fIgl:getFragDataIndex/2\fR\& returns the index of the fragment color to which the variable \fIName\fR\& was bound when the program object \fIProgram\fR\& was last linked\&. If \fIName\fR\& is not a varying out variable of \fIProgram\fR\&, or if an error occurs, -1 will be returned\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getFragDataLocation(Program :: i(), Name :: string()) -> i()
.br
.fi
.br
.RS
.LP
\fIgl:getFragDataLocation/2\fR\& retrieves the assigned color number binding for the user-defined varying out variable \fIName\fR\& for program \fIProgram\fR\&\&. \fIProgram\fR\& must have previously been linked\&. \fIName\fR\& must be a null-terminated string\&. If \fIName\fR\& is not the name of an active user-defined varying out fragment shader variable within \fIProgram\fR\&, -1 will be returned\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getFramebufferAttachmentParameteriv(Target :: enum(),
.B
                                    Attachment :: enum(),
.B
                                    Pname :: enum()) ->
.B
                                       i()
.br
.fi
.br
.RS
.LP
\fIgl:getFramebufferAttachmentParameteriv/3\fR\& and \fIglGetNamedFramebufferAttachmentParameteriv\fR\& return parameters of attachments of a specified framebuffer object\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getFramebufferParameteriv(Target :: enum(), Pname :: enum()) ->
.B
                             i()
.br
.fi
.br
.RS
.LP
\fIgl:getFramebufferParameteriv/2\fR\& and \fIglGetNamedFramebufferParameteriv\fR\& query parameters of a specified framebuffer object\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getGraphicsResetStatus() -> enum()
.br
.fi
.br
.RS
.LP
Certain events can result in a reset of the GL context\&. Such a reset causes all context state to be lost and requires the application to recreate all objects in the affected context\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getHistogram(Target :: enum(),
.B
             Reset :: 0 | 1,
.B
             Format :: enum(),
.B
             Type :: enum(),
.B
             Values :: mem()) ->
.B
                ok
.br
.fi
.br
.RS
.LP
\fIgl:getHistogram/5\fR\& returns the current histogram table as a one-dimensional image with the same width as the histogram\&. No pixel transfer operations are performed on this image, but pixel storage modes that are applicable to 1D images are honored\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getHistogramParameterfv(Target :: enum(), Pname :: enum()) ->
.B
                           {f()}
.br
.fi
.br
.nf

.B
getHistogramParameteriv(Target :: enum(), Pname :: enum()) ->
.B
                           {i()}
.br
.fi
.br
.RS
.LP
\fIgl:getHistogramParameter()\fR\& is used to query parameter values for the current histogram or for a proxy\&. The histogram state information may be queried by calling \fIgl:getHistogramParameter()\fR\& with a \fITarget\fR\& of \fI?GL_HISTOGRAM\fR\& (to obtain information for the current histogram table) or \fI?GL_PROXY_HISTOGRAM\fR\& (to obtain information from the most recent proxy request) and one of the following values for the \fIPname\fR\& argument:
.LP
External documentation\&.
.RE
.LP
.nf

.B
getInternalformati64v(Target :: enum(),
.B
                      Internalformat :: enum(),
.B
                      Pname :: enum(),
.B
                      BufSize :: i()) ->
.B
                         [i()]
.br
.fi
.br
.nf

.B
getInternalformativ(Target :: enum(),
.B
                    Internalformat :: enum(),
.B
                    Pname :: enum(),
.B
                    BufSize :: i()) ->
.B
                       [i()]
.br
.fi
.br
.RS
.LP
No documentation available\&.
.RE
.LP
.nf

.B
getLightfv(Light :: enum(), Pname :: enum()) ->
.B
              {f(), f(), f(), f()}
.br
.fi
.br
.nf

.B
getLightiv(Light :: enum(), Pname :: enum()) ->
.B
              {i(), i(), i(), i()}
.br
.fi
.br
.RS
.LP
\fIgl:getLight()\fR\& returns in \fIParams\fR\& the value or values of a light source parameter\&. \fILight\fR\& names the light and is a symbolic name of the form \fI?GL_LIGHT\fR\& i where i ranges from 0 to the value of \fI?GL_MAX_LIGHTS\fR\& - 1\&. \fI?GL_MAX_LIGHTS\fR\& is an implementation dependent constant that is greater than or equal to eight\&. \fIPname\fR\& specifies one of ten light source parameters, again by symbolic name\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getMapdv(Target :: enum(), Query :: enum(), V :: mem()) -> ok
.br
.fi
.br
.nf

.B
getMapfv(Target :: enum(), Query :: enum(), V :: mem()) -> ok
.br
.fi
.br
.nf

.B
getMapiv(Target :: enum(), Query :: enum(), V :: mem()) -> ok
.br
.fi
.br
.RS
.LP
\fIglMap1\fR\& and \fIglMap2\fR\& define evaluators\&. \fIgl:getMap()\fR\& returns evaluator parameters\&. \fITarget\fR\& chooses a map, \fIQuery\fR\& selects a specific parameter, and \fIV\fR\& points to storage where the values will be returned\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getMaterialfv(Face :: enum(), Pname :: enum()) ->
.B
                 {f(), f(), f(), f()}
.br
.fi
.br
.nf

.B
getMaterialiv(Face :: enum(), Pname :: enum()) ->
.B
                 {i(), i(), i(), i()}
.br
.fi
.br
.RS
.LP
\fIgl:getMaterial()\fR\& returns in \fIParams\fR\& the value or values of parameter \fIPname\fR\& of material \fIFace\fR\&\&. Six parameters are defined:
.LP
External documentation\&.
.RE
.LP
.nf

.B
getMinmax(Target :: enum(),
.B
          Reset :: 0 | 1,
.B
          Format :: enum(),
.B
          Types :: enum(),
.B
          Values :: mem()) ->
.B
             ok
.br
.fi
.br
.RS
.LP
\fIgl:getMinmax/5\fR\& returns the accumulated minimum and maximum pixel values (computed on a per-component basis) in a one-dimensional image of width 2\&. The first set of return values are the minima, and the second set of return values are the maxima\&. The format of the return values is determined by \fIFormat\fR\&, and their type is determined by \fITypes\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getMinmaxParameterfv(Target :: enum(), Pname :: enum()) -> {f()}
.br
.fi
.br
.nf

.B
getMinmaxParameteriv(Target :: enum(), Pname :: enum()) -> {i()}
.br
.fi
.br
.RS
.LP
\fIgl:getMinmaxParameter()\fR\& retrieves parameters for the current minmax table by setting \fIPname\fR\& to one of the following values:
.LP
External documentation\&.
.RE
.LP
.nf

.B
getMultisamplefv(Pname :: enum(), Index :: i()) -> {f(), f()}
.br
.fi
.br
.RS
.LP
\fIgl:getMultisamplefv/2\fR\& queries the location of a given sample\&. \fIPname\fR\& specifies the sample parameter to retrieve and must be \fI?GL_SAMPLE_POSITION\fR\&\&. \fIIndex\fR\& corresponds to the sample for which the location should be returned\&. The sample location is returned as two floating-point values in \fIVal[0]\fR\& and \fIVal[1]\fR\&, each between 0 and 1, corresponding to the \fIX\fR\& and \fIY\fR\& locations respectively in the GL pixel space of that sample\&. (0\&.5, 0\&.5) this corresponds to the pixel center\&. \fIIndex\fR\& must be between zero and the value of \fI?GL_SAMPLES\fR\& minus one\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getPixelMapfv(Map :: enum(), Values :: mem()) -> ok
.br
.fi
.br
.nf

.B
getPixelMapuiv(Map :: enum(), Values :: mem()) -> ok
.br
.fi
.br
.nf

.B
getPixelMapusv(Map :: enum(), Values :: mem()) -> ok
.br
.fi
.br
.RS
.LP
See the \fIgl:pixelMap()\fR\& reference page for a description of the acceptable values for the \fIMap\fR\& parameter\&. \fIgl:getPixelMap()\fR\& returns in \fIData\fR\& the contents of the pixel map specified in \fIMap\fR\&\&. Pixel maps are used during the execution of \fIgl:readPixels/7\fR\&, \fIgl:drawPixels/5\fR\&, \fIgl:copyPixels/5\fR\&, \fIgl:texImage1D/8\fR\&, \fIgl:texImage2D/9\fR\&, \fIgl:texImage3D/10\fR\&, \fIgl:texSubImage1D/7\fR\&, \fIgl:texSubImage2D/9\fR\&, \fIgl:texSubImage3D/11\fR\&, \fIgl:copyTexImage1D/7\fR\&, \fIgl:copyTexImage2D/8\fR\&, \fIgl:copyTexSubImage1D/6\fR\&, \fIgl:copyTexSubImage2D/8\fR\&, and \fIgl:copyTexSubImage3D/9\fR\&\&. to map color indices, stencil indices, color components, and depth components to other values\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getPolygonStipple() -> binary()
.br
.fi
.br
.RS
.LP
\fIgl:getPolygonStipple/0\fR\& returns to \fIPattern\fR\& a 32×32 polygon stipple pattern\&. The pattern is packed into memory as if \fIgl:readPixels/7\fR\& with both \fIheight\fR\& and \fIwidth\fR\& of 32, \fItype\fR\& of \fI?GL_BITMAP\fR\&, and \fIformat\fR\& of \fI?GL_COLOR_INDEX\fR\& were called, and the stipple pattern were stored in an internal 32×32 color index buffer\&. Unlike \fIgl:readPixels/7\fR\&, however, pixel transfer operations (shift, offset, pixel map) are not applied to the returned stipple image\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getProgramiv(Program :: i(), Pname :: enum()) -> i()
.br
.fi
.br
.RS
.LP
\fIgl:getProgram()\fR\& returns in \fIParams\fR\& the value of a parameter for a specific program object\&. The following parameters are defined:
.LP
External documentation\&.
.RE
.LP
.nf

.B
getProgramBinary(Program :: i(), BufSize :: i()) ->
.B
                    {BinaryFormat :: enum(), Binary :: binary()}
.br
.fi
.br
.RS
.LP
\fIgl:getProgramBinary/2\fR\& returns a binary representation of the compiled and linked executable for \fIProgram\fR\& into the array of bytes whose address is specified in \fIBinary\fR\&\&. The maximum number of bytes that may be written into \fIBinary\fR\& is specified by \fIBufSize\fR\&\&. If the program binary is greater in size than \fIBufSize\fR\& bytes, then an error is generated, otherwise the actual number of bytes written into \fIBinary\fR\& is returned in the variable whose address is given by \fILength\fR\&\&. If \fILength\fR\& is \fI?NULL\fR\&, then no length is returned\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getProgramInfoLog(Program :: i(), BufSize :: i()) -> string()
.br
.fi
.br
.RS
.LP
\fIgl:getProgramInfoLog/2\fR\& returns the information log for the specified program object\&. The information log for a program object is modified when the program object is linked or validated\&. The string that is returned will be null terminated\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getProgramInterfaceiv(Program :: i(),
.B
                      ProgramInterface :: enum(),
.B
                      Pname :: enum()) ->
.B
                         i()
.br
.fi
.br
.RS
.LP
\fIgl:getProgramInterfaceiv/3\fR\& queries the property of the interface identifed by \fIProgramInterface\fR\& in \fIProgram\fR\&, the property name of which is given by \fIPname\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getProgramPipelineiv(Pipeline :: i(), Pname :: enum()) -> i()
.br
.fi
.br
.RS
.LP
\fIgl:getProgramPipelineiv/2\fR\& retrieves the value of a property of the program pipeline object \fIPipeline\fR\&\&. \fIPname\fR\& specifies the name of the parameter whose value to retrieve\&. The value of the parameter is written to the variable whose address is given by \fIParams\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getProgramPipelineInfoLog(Pipeline :: i(), BufSize :: i()) ->
.B
                             string()
.br
.fi
.br
.RS
.LP
\fIgl:getProgramPipelineInfoLog/2\fR\& retrieves the info log for the program pipeline object \fIPipeline\fR\&\&. The info log, including its null terminator, is written into the array of characters whose address is given by \fIInfoLog\fR\&\&. The maximum number of characters that may be written into \fIInfoLog\fR\& is given by \fIBufSize\fR\&, and the actual number of characters written into \fIInfoLog\fR\& is returned in the integer whose address is given by \fILength\fR\&\&. If \fILength\fR\& is \fI?NULL\fR\&, no length is returned\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getProgramResourceIndex(Program :: i(),
.B
                        ProgramInterface :: enum(),
.B
                        Name :: string()) ->
.B
                           i()
.br
.fi
.br
.RS
.LP
\fIgl:getProgramResourceIndex/3\fR\& returns the unsigned integer index assigned to a resource named \fIName\fR\& in the interface type \fIProgramInterface\fR\& of program object \fIProgram\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getProgramResourceLocation(Program :: i(),
.B
                           ProgramInterface :: enum(),
.B
                           Name :: string()) ->
.B
                              i()
.br
.fi
.br
.RS
.LP
\fIgl:getProgramResourceLocation/3\fR\& returns the location assigned to the variable named \fIName\fR\& in interface \fIProgramInterface\fR\& of program object \fIProgram\fR\&\&. \fIProgram\fR\& must be the name of a program that has been linked successfully\&. \fIProgramInterface\fR\& must be one of \fI?GL_UNIFORM\fR\&, \fI?GL_PROGRAM_INPUT\fR\&, \fI?GL_PROGRAM_OUTPUT\fR\&, \fI?GL_VERTEX_SUBROUTINE_UNIFORM\fR\&, \fI?GL_TESS_CONTROL_SUBROUTINE_UNIFORM\fR\&, \fI?GL_TESS_EVALUATION_SUBROUTINE_UNIFORM\fR\&, \fI?GL_GEOMETRY_SUBROUTINE_UNIFORM\fR\&, \fI?GL_FRAGMENT_SUBROUTINE_UNIFORM\fR\&, \fI?GL_COMPUTE_SUBROUTINE_UNIFORM\fR\&, or \fI?GL_TRANSFORM_FEEDBACK_BUFFER\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getProgramResourceLocationIndex(Program :: i(),
.B
                                ProgramInterface :: enum(),
.B
                                Name :: string()) ->
.B
                                   i()
.br
.fi
.br
.RS
.LP
\fIgl:getProgramResourceLocationIndex/3\fR\& returns the fragment color index assigned to the variable named \fIName\fR\& in interface \fIProgramInterface\fR\& of program object \fIProgram\fR\&\&. \fIProgram\fR\& must be the name of a program that has been linked successfully\&. \fIProgramInterface\fR\& must be \fI?GL_PROGRAM_OUTPUT\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getProgramResourceName(Program :: i(),
.B
                       ProgramInterface :: enum(),
.B
                       Index :: i(),
.B
                       BufSize :: i()) ->
.B
                          string()
.br
.fi
.br
.RS
.LP
\fIgl:getProgramResourceName/4\fR\& retrieves the name string assigned to the single active resource with an index of \fIIndex\fR\& in the interface \fIProgramInterface\fR\& of program object \fIProgram\fR\&\&. \fIIndex\fR\& must be less than the number of entries in the active resource list for \fIProgramInterface\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getProgramStageiv(Program :: i(),
.B
                  Shadertype :: enum(),
.B
                  Pname :: enum()) ->
.B
                     i()
.br
.fi
.br
.RS
.LP
\fIgl:getProgramStage()\fR\& queries a parameter of a shader stage attached to a program object\&. \fIProgram\fR\& contains the name of the program to which the shader is attached\&. \fIShadertype\fR\& specifies the stage from which to query the parameter\&. \fIPname\fR\& specifies which parameter should be queried\&. The value or values of the parameter to be queried is returned in the variable whose address is given in \fIValues\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getQueryIndexediv(Target :: enum(), Index :: i(), Pname :: enum()) ->
.B
                     i()
.br
.fi
.br
.RS
.LP
\fIgl:getQueryIndexediv/3\fR\& returns in \fIParams\fR\& a selected parameter of the indexed query object target specified by \fITarget\fR\& and \fIIndex\fR\&\&. \fIIndex\fR\& specifies the index of the query object target and must be between zero and a target-specific maxiumum\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getQueryBufferObjecti64v(Id :: i(),
.B
                         Buffer :: i(),
.B
                         Pname :: enum(),
.B
                         Offset :: i()) ->
.B
                            ok
.br
.fi
.br
.nf

.B
getQueryBufferObjectiv(Id :: i(),
.B
                       Buffer :: i(),
.B
                       Pname :: enum(),
.B
                       Offset :: i()) ->
.B
                          ok
.br
.fi
.br
.nf

.B
getQueryBufferObjectui64v(Id :: i(),
.B
                          Buffer :: i(),
.B
                          Pname :: enum(),
.B
                          Offset :: i()) ->
.B
                             ok
.br
.fi
.br
.nf

.B
getQueryBufferObjectuiv(Id :: i(),
.B
                        Buffer :: i(),
.B
                        Pname :: enum(),
.B
                        Offset :: i()) ->
.B
                           ok
.br
.fi
.br
.nf

.B
getQueryObjecti64v(Id :: i(), Pname :: enum()) -> i()
.br
.fi
.br
.nf

.B
getQueryObjectiv(Id :: i(), Pname :: enum()) -> i()
.br
.fi
.br
.nf

.B
getQueryObjectui64v(Id :: i(), Pname :: enum()) -> i()
.br
.fi
.br
.nf

.B
getQueryObjectuiv(Id :: i(), Pname :: enum()) -> i()
.br
.fi
.br
.RS
.LP
These commands return a selected parameter of the query object specified by \fIId\fR\&\&. \fIgl:getQueryObject()\fR\& returns in \fIParams\fR\& a selected parameter of the query object specified by \fIId\fR\&\&. \fIgl:getQueryBufferObject()\fR\& returns in \fIBuffer\fR\& a selected parameter of the query object specified by \fIId\fR\&, by writing it to \fIBuffer\fR\&\&'s data store at the byte offset specified by \fIOffset\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getQueryiv(Target :: enum(), Pname :: enum()) -> i()
.br
.fi
.br
.RS
.LP
\fIgl:getQueryiv/2\fR\& returns in \fIParams\fR\& a selected parameter of the query object target specified by \fITarget\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getRenderbufferParameteriv(Target :: enum(), Pname :: enum()) ->
.B
                              i()
.br
.fi
.br
.RS
.LP
\fIgl:getRenderbufferParameteriv/2\fR\& and \fIglGetNamedRenderbufferParameteriv\fR\& query parameters of a specified renderbuffer object\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getSamplerParameterIiv(Sampler :: i(), Pname :: enum()) -> [i()]
.br
.fi
.br
.nf

.B
getSamplerParameterIuiv(Sampler :: i(), Pname :: enum()) -> [i()]
.br
.fi
.br
.nf

.B
getSamplerParameterfv(Sampler :: i(), Pname :: enum()) -> [f()]
.br
.fi
.br
.nf

.B
getSamplerParameteriv(Sampler :: i(), Pname :: enum()) -> [i()]
.br
.fi
.br
.RS
.LP
\fIgl:getSamplerParameter()\fR\& returns in \fIParams\fR\& the value or values of the sampler parameter specified as \fIPname\fR\&\&. \fISampler\fR\& defines the target sampler, and must be the name of an existing sampler object, returned from a previous call to \fIgl:genSamplers/1\fR\&\&. \fIPname\fR\& accepts the same symbols as \fIgl:samplerParameter()\fR\&, with the same interpretations:
.LP
External documentation\&.
.RE
.LP
.nf

.B
getShaderiv(Shader :: i(), Pname :: enum()) -> i()
.br
.fi
.br
.RS
.LP
\fIgl:getShader()\fR\& returns in \fIParams\fR\& the value of a parameter for a specific shader object\&. The following parameters are defined:
.LP
External documentation\&.
.RE
.LP
.nf

.B
getShaderInfoLog(Shader :: i(), BufSize :: i()) -> string()
.br
.fi
.br
.RS
.LP
\fIgl:getShaderInfoLog/2\fR\& returns the information log for the specified shader object\&. The information log for a shader object is modified when the shader is compiled\&. The string that is returned will be null terminated\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getShaderPrecisionFormat(Shadertype :: enum(),
.B
                         Precisiontype :: enum()) ->
.B
                            {Range :: {i(), i()},
.B
                             Precision :: i()}
.br
.fi
.br
.RS
.LP
\fIgl:getShaderPrecisionFormat/2\fR\& retrieves the numeric range and precision for the implementation\&'s representation of quantities in different numeric formats in specified shader type\&. \fIShaderType\fR\& specifies the type of shader for which the numeric precision and range is to be retrieved and must be one of \fI?GL_VERTEX_SHADER\fR\& or \fI?GL_FRAGMENT_SHADER\fR\&\&. \fIPrecisionType\fR\& specifies the numeric format to query and must be one of \fI?GL_LOW_FLOAT\fR\&, \fI?GL_MEDIUM_FLOAT\fR\&\fI?GL_HIGH_FLOAT\fR\&, \fI?GL_LOW_INT\fR\&, \fI?GL_MEDIUM_INT\fR\&, or \fI?GL_HIGH_INT\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getShaderSource(Shader :: i(), BufSize :: i()) -> string()
.br
.fi
.br
.RS
.LP
\fIgl:getShaderSource/2\fR\& returns the concatenation of the source code strings from the shader object specified by \fIShader\fR\&\&. The source code strings for a shader object are the result of a previous call to \fIgl:shaderSource/2\fR\&\&. The string returned by the function will be null terminated\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getString(Name :: enum()) -> string()
.br
.fi
.br
.nf

.B
getStringi(Name :: enum(), Index :: i()) -> string()
.br
.fi
.br
.RS
.LP
\fIgl:getString/1\fR\& returns a pointer to a static string describing some aspect of the current GL connection\&. \fIName\fR\& can be one of the following:
.LP
External documentation\&.
.RE
.LP
.nf

.B
getSubroutineIndex(Program :: i(),
.B
                   Shadertype :: enum(),
.B
                   Name :: string()) ->
.B
                      i()
.br
.fi
.br
.RS
.LP
\fIgl:getSubroutineIndex/3\fR\& returns the index of a subroutine uniform within a shader stage attached to a program object\&. \fIProgram\fR\& contains the name of the program to which the shader is attached\&. \fIShadertype\fR\& specifies the stage from which to query shader subroutine index\&. \fIName\fR\& contains the null-terminated name of the subroutine uniform whose name to query\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getSubroutineUniformLocation(Program :: i(),
.B
                             Shadertype :: enum(),
.B
                             Name :: string()) ->
.B
                                i()
.br
.fi
.br
.RS
.LP
\fIgl:getSubroutineUniformLocation/3\fR\& returns the location of the subroutine uniform variable \fIName\fR\& in the shader stage of type \fIShadertype\fR\& attached to \fIProgram\fR\&, with behavior otherwise identical to \fIgl:getUniformLocation/2\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getSynciv(Sync :: i(), Pname :: enum(), BufSize :: i()) -> [i()]
.br
.fi
.br
.RS
.LP
\fIgl:getSynciv/3\fR\& retrieves properties of a sync object\&. \fISync\fR\& specifies the name of the sync object whose properties to retrieve\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getTexEnvfv(Target :: enum(), Pname :: enum()) ->
.B
               {f(), f(), f(), f()}
.br
.fi
.br
.nf

.B
getTexEnviv(Target :: enum(), Pname :: enum()) ->
.B
               {i(), i(), i(), i()}
.br
.fi
.br
.RS
.LP
\fIgl:getTexEnv()\fR\& returns in \fIParams\fR\& selected values of a texture environment that was specified with \fIgl:texEnv()\fR\&\&. \fITarget\fR\& specifies a texture environment\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getTexGendv(Coord :: enum(), Pname :: enum()) ->
.B
               {f(), f(), f(), f()}
.br
.fi
.br
.nf

.B
getTexGenfv(Coord :: enum(), Pname :: enum()) ->
.B
               {f(), f(), f(), f()}
.br
.fi
.br
.nf

.B
getTexGeniv(Coord :: enum(), Pname :: enum()) ->
.B
               {i(), i(), i(), i()}
.br
.fi
.br
.RS
.LP
\fIgl:getTexGen()\fR\& returns in \fIParams\fR\& selected parameters of a texture coordinate generation function that was specified using \fIgl:texGen()\fR\&\&. \fICoord\fR\& names one of the (\fIs\fR\&, \fIt\fR\&, \fIr\fR\&, \fIq\fR\&) texture coordinates, using the symbolic constant \fI?GL_S\fR\&, \fI?GL_T\fR\&, \fI?GL_R\fR\&, or \fI?GL_Q\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getTexImage(Target :: enum(),
.B
            Level :: i(),
.B
            Format :: enum(),
.B
            Type :: enum(),
.B
            Pixels :: mem()) ->
.B
               ok
.br
.fi
.br
.RS
.LP
\fIgl:getTexImage/5\fR\&, \fIglGetnTexImage\fR\& and \fIglGetTextureImage\fR\& functions return a texture image into \fIPixels\fR\&\&. For \fIgl:getTexImage/5\fR\& and \fIglGetnTexImage\fR\&, \fITarget\fR\& specifies whether the desired texture image is one specified by \fIgl:texImage1D/8\fR\& (\fI?GL_TEXTURE_1D\fR\&), \fIgl:texImage2D/9\fR\& (\fI?GL_TEXTURE_1D_ARRAY\fR\&, \fI?GL_TEXTURE_RECTANGLE\fR\&, \fI?GL_TEXTURE_2D\fR\& or any of \fI?GL_TEXTURE_CUBE_MAP_*\fR\&), or \fIgl:texImage3D/10\fR\& (\fI?GL_TEXTURE_2D_ARRAY\fR\&, \fI?GL_TEXTURE_3D\fR\&, \fI?GL_TEXTURE_CUBE_MAP_ARRAY\fR\&)\&. For \fIglGetTextureImage\fR\&, \fITexture\fR\& specifies the texture object name\&. In addition to types of textures accepted by \fIgl:getTexImage/5\fR\& and \fIglGetnTexImage\fR\&, the function also accepts cube map texture objects (with effective target \fI?GL_TEXTURE_CUBE_MAP\fR\&)\&. \fILevel\fR\& specifies the level-of-detail number of the desired image\&. \fIFormat\fR\& and \fIType\fR\& specify the format and type of the desired image array\&. See the reference page for \fIgl:texImage1D/8\fR\& for a description of the acceptable values for the \fIFormat\fR\& and \fIType\fR\& parameters, respectively\&. For glGetnTexImage and glGetTextureImage functions, bufSize tells the size of the buffer to receive the retrieved pixel data\&. \fIglGetnTexImage\fR\& and \fIglGetTextureImage\fR\& do not write more than \fIBufSize\fR\& bytes into \fIPixels\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getTexLevelParameterfv(Target :: enum(),
.B
                       Level :: i(),
.B
                       Pname :: enum()) ->
.B
                          {f()}
.br
.fi
.br
.nf

.B
getTexLevelParameteriv(Target :: enum(),
.B
                       Level :: i(),
.B
                       Pname :: enum()) ->
.B
                          {i()}
.br
.fi
.br
.RS
.LP
\fIgl:getTexLevelParameterfv/3\fR\&, \fIgl:getTexLevelParameteriv/3\fR\&, \fIglGetTextureLevelParameterfv\fR\& and \fIglGetTextureLevelParameteriv\fR\& return in \fIParams\fR\& texture parameter values for a specific level-of-detail value, specified as \fILevel\fR\&\&. For the first two functions, \fITarget\fR\& defines the target texture, either \fI?GL_TEXTURE_1D\fR\&, \fI?GL_TEXTURE_2D\fR\&, \fI?GL_TEXTURE_3D\fR\&, \fI?GL_PROXY_TEXTURE_1D\fR\&, \fI?GL_PROXY_TEXTURE_2D\fR\&, \fI?GL_PROXY_TEXTURE_3D\fR\&, \fI?GL_TEXTURE_CUBE_MAP_POSITIVE_X\fR\&, \fI?GL_TEXTURE_CUBE_MAP_NEGATIVE_X\fR\&, \fI?GL_TEXTURE_CUBE_MAP_POSITIVE_Y\fR\&, \fI?GL_TEXTURE_CUBE_MAP_NEGATIVE_Y\fR\&, \fI?GL_TEXTURE_CUBE_MAP_POSITIVE_Z\fR\&, \fI?GL_TEXTURE_CUBE_MAP_NEGATIVE_Z\fR\&, or \fI?GL_PROXY_TEXTURE_CUBE_MAP\fR\&\&. The remaining two take a \fITexture\fR\& argument which specifies the name of the texture object\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getTexParameterIiv(Target :: enum(), Pname :: enum()) ->
.B
                      {i(), i(), i(), i()}
.br
.fi
.br
.nf

.B
getTexParameterIuiv(Target :: enum(), Pname :: enum()) ->
.B
                       {i(), i(), i(), i()}
.br
.fi
.br
.nf

.B
getTexParameterfv(Target :: enum(), Pname :: enum()) ->
.B
                     {f(), f(), f(), f()}
.br
.fi
.br
.nf

.B
getTexParameteriv(Target :: enum(), Pname :: enum()) ->
.B
                     {i(), i(), i(), i()}
.br
.fi
.br
.RS
.LP
\fIgl:getTexParameter()\fR\& and \fIglGetTextureParameter\fR\& return in \fIParams\fR\& the value or values of the texture parameter specified as \fIPname\fR\&\&. \fITarget\fR\& defines the target texture\&. \fI?GL_TEXTURE_1D\fR\&, \fI?GL_TEXTURE_2D\fR\&, \fI?GL_TEXTURE_3D\fR\&, \fI?GL_TEXTURE_1D_ARRAY\fR\&, \fI?GL_TEXTURE_2D_ARRAY\fR\&, \fI?GL_TEXTURE_RECTANGLE\fR\&, \fI?GL_TEXTURE_CUBE_MAP\fR\&, \fI?GL_TEXTURE_CUBE_MAP_ARRAY\fR\&, \fI?GL_TEXTURE_2D_MULTISAMPLE\fR\&, or \fI?GL_TEXTURE_2D_MULTISAMPLE_ARRAY\fR\& specify one-, two-, or three-dimensional, one-dimensional array, two-dimensional array, rectangle, cube-mapped or cube-mapped array, two-dimensional multisample, or two-dimensional multisample array texturing, respectively\&. \fIPname\fR\& accepts the same symbols as \fIgl:texParameter()\fR\&, with the same interpretations:
.LP
External documentation\&.
.RE
.LP
.nf

.B
getTransformFeedbackVarying(Program :: i(),
.B
                            Index :: i(),
.B
                            BufSize :: i()) ->
.B
                               {Size :: i(),
.B
                                Type :: enum(),
.B
                                Name :: string()}
.br
.fi
.br
.RS
.LP
Information about the set of varying variables in a linked program that will be captured during transform feedback may be retrieved by calling \fIgl:getTransformFeedbackVarying/3\fR\&\&. \fIgl:getTransformFeedbackVarying/3\fR\& provides information about the varying variable selected by \fIIndex\fR\&\&. An \fIIndex\fR\& of 0 selects the first varying variable specified in the \fIVaryings\fR\& array passed to \fIgl:transformFeedbackVaryings/3\fR\&, and an \fIIndex\fR\& of the value of \fI?GL_TRANSFORM_FEEDBACK_VARYINGS\fR\& minus one selects the last such variable\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getUniformdv(Program :: i(), Location :: i()) -> matrix()
.br
.fi
.br
.nf

.B
getUniformfv(Program :: i(), Location :: i()) -> matrix()
.br
.fi
.br
.nf

.B
getUniformiv(Program :: i(), Location :: i()) ->
.B
                {i(),
.B
                 i(),
.B
                 i(),
.B
                 i(),
.B
                 i(),
.B
                 i(),
.B
                 i(),
.B
                 i(),
.B
                 i(),
.B
                 i(),
.B
                 i(),
.B
                 i(),
.B
                 i(),
.B
                 i(),
.B
                 i(),
.B
                 i()}
.br
.fi
.br
.nf

.B
getUniformuiv(Program :: i(), Location :: i()) ->
.B
                 {i(),
.B
                  i(),
.B
                  i(),
.B
                  i(),
.B
                  i(),
.B
                  i(),
.B
                  i(),
.B
                  i(),
.B
                  i(),
.B
                  i(),
.B
                  i(),
.B
                  i(),
.B
                  i(),
.B
                  i(),
.B
                  i(),
.B
                  i()}
.br
.fi
.br
.RS
.LP
\fIgl:getUniform()\fR\& and \fIglGetnUniform\fR\& return in \fIParams\fR\& the value(s) of the specified uniform variable\&. The type of the uniform variable specified by \fILocation\fR\& determines the number of values returned\&. If the uniform variable is defined in the shader as a boolean, int, or float, a single value will be returned\&. If it is defined as a vec2, ivec2, or bvec2, two values will be returned\&. If it is defined as a vec3, ivec3, or bvec3, three values will be returned, and so on\&. To query values stored in uniform variables declared as arrays, call \fIgl:getUniform()\fR\& for each element of the array\&. To query values stored in uniform variables declared as structures, call \fIgl:getUniform()\fR\& for each field in the structure\&. The values for uniform variables declared as a matrix will be returned in column major order\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getUniformBlockIndex(Program :: i(), UniformBlockName :: string()) ->
.B
                        i()
.br
.fi
.br
.RS
.LP
\fIgl:getUniformBlockIndex/2\fR\& retrieves the index of a uniform block within \fIProgram\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getUniformIndices(Program :: i(),
.B
                  UniformNames :: [unicode:chardata()]) ->
.B
                     [i()]
.br
.fi
.br
.RS
.LP
\fIgl:getUniformIndices/2\fR\& retrieves the indices of a number of uniforms within \fIProgram\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getUniformLocation(Program :: i(), Name :: string()) -> i()
.br
.fi
.br
.RS
.LP
\fIglGetUniformLocation \fR\& returns an integer that represents the location of a specific uniform variable within a program object\&. \fIName\fR\& must be a null terminated string that contains no white space\&. \fIName\fR\& must be an active uniform variable name in \fIProgram\fR\& that is not a structure, an array of structures, or a subcomponent of a vector or a matrix\&. This function returns -1 if \fIName\fR\& does not correspond to an active uniform variable in \fIProgram\fR\&, if \fIName\fR\& starts with the reserved prefix "gl_", or if \fIName\fR\& is associated with an atomic counter or a named uniform block\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getUniformSubroutineuiv(Shadertype :: enum(), Location :: i()) ->
.B
                           {i(),
.B
                            i(),
.B
                            i(),
.B
                            i(),
.B
                            i(),
.B
                            i(),
.B
                            i(),
.B
                            i(),
.B
                            i(),
.B
                            i(),
.B
                            i(),
.B
                            i(),
.B
                            i(),
.B
                            i(),
.B
                            i(),
.B
                            i()}
.br
.fi
.br
.RS
.LP
\fIgl:getUniformSubroutine()\fR\& retrieves the value of the subroutine uniform at location \fILocation\fR\& for shader stage \fIShadertype\fR\& of the current program\&. \fILocation\fR\& must be less than the value of \fI?GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS\fR\& for the shader currently in use at shader stage \fIShadertype\fR\&\&. The value of the subroutine uniform is returned in \fIValues\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
getVertexAttribIiv(Index :: i(), Pname :: enum()) ->
.B
                      {i(), i(), i(), i()}
.br
.fi
.br
.nf

.B
getVertexAttribIuiv(Index :: i(), Pname :: enum()) ->
.B
                       {i(), i(), i(), i()}
.br
.fi
.br
.nf

.B
getVertexAttribLdv(Index :: i(), Pname :: enum()) ->
.B
                      {f(), f(), f(), f()}
.br
.fi
.br
.nf

.B
getVertexAttribdv(Index :: i(), Pname :: enum()) ->
.B
                     {f(), f(), f(), f()}
.br
.fi
.br
.nf

.B
getVertexAttribfv(Index :: i(), Pname :: enum()) ->
.B
                     {f(), f(), f(), f()}
.br
.fi
.br
.nf

.B
getVertexAttribiv(Index :: i(), Pname :: enum()) ->
.B
                     {i(), i(), i(), i()}
.br
.fi
.br
.RS
.LP
\fIgl:getVertexAttrib()\fR\& returns in \fIParams\fR\& the value of a generic vertex attribute parameter\&. The generic vertex attribute to be queried is specified by \fIIndex\fR\&, and the parameter to be queried is specified by \fIPname\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
hint(Target :: enum(), Mode :: enum()) -> ok
.br
.fi
.br
.RS
.LP
Certain aspects of GL behavior, when there is room for interpretation, can be controlled with hints\&. A hint is specified with two arguments\&. \fITarget\fR\& is a symbolic constant indicating the behavior to be controlled, and \fIMode\fR\& is another symbolic constant indicating the desired behavior\&. The initial value for each \fITarget\fR\& is \fI?GL_DONT_CARE\fR\&\&. \fIMode\fR\& can be one of the following:
.LP
External documentation\&.
.RE
.LP
.nf

.B
histogram(Target :: enum(),
.B
          Width :: i(),
.B
          Internalformat :: enum(),
.B
          Sink :: 0 | 1) ->
.B
             ok
.br
.fi
.br
.RS
.LP
When \fI?GL_HISTOGRAM\fR\& is enabled, RGBA color components are converted to histogram table indices by clamping to the range [0,1], multiplying by the width of the histogram table, and rounding to the nearest integer\&. The table entries selected by the RGBA indices are then incremented\&. (If the internal format of the histogram table includes luminance, then the index derived from the R color component determines the luminance table entry to be incremented\&.) If a histogram table entry is incremented beyond its maximum value, then its value becomes undefined\&. (This is not an error\&.)
.LP
External documentation\&.
.RE
.LP
.nf

.B
indexd(C :: f()) -> ok
.br
.fi
.br
.nf

.B
indexdv(X1 :: {C :: f()}) -> ok
.br
.fi
.br
.nf

.B
indexf(C :: f()) -> ok
.br
.fi
.br
.nf

.B
indexfv(X1 :: {C :: f()}) -> ok
.br
.fi
.br
.nf

.B
indexi(C :: i()) -> ok
.br
.fi
.br
.nf

.B
indexiv(X1 :: {C :: i()}) -> ok
.br
.fi
.br
.nf

.B
indexs(C :: i()) -> ok
.br
.fi
.br
.nf

.B
indexsv(X1 :: {C :: i()}) -> ok
.br
.fi
.br
.nf

.B
indexub(C :: i()) -> ok
.br
.fi
.br
.nf

.B
indexubv(X1 :: {C :: i()}) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:index()\fR\& updates the current (single-valued) color index\&. It takes one argument, the new value for the current color index\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
indexMask(Mask :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:indexMask/1\fR\& controls the writing of individual bits in the color index buffers\&. The least significant n bits of \fIMask\fR\&, where n is the number of bits in a color index buffer, specify a mask\&. Where a 1 (one) appears in the mask, it\&'s possible to write to the corresponding bit in the color index buffer (or buffers)\&. Where a 0 (zero) appears, the corresponding bit is write-protected\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
indexPointer(Type :: enum(),
.B
             Stride :: i(),
.B
             Ptr :: offset() | mem()) ->
.B
                ok
.br
.fi
.br
.RS
.LP
\fIgl:indexPointer/3\fR\& specifies the location and data format of an array of color indexes to use when rendering\&. \fIType\fR\& specifies the data type of each color index and \fIStride\fR\& specifies the byte stride from one color index to the next, allowing vertices and attributes to be packed into a single array or stored in separate arrays\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
initNames() -> ok
.br
.fi
.br
.RS
.LP
The name stack is used during selection mode to allow sets of rendering commands to be uniquely identified\&. It consists of an ordered set of unsigned integers\&. \fIgl:initNames/0\fR\& causes the name stack to be initialized to its default empty state\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
interleavedArrays(Format :: enum(),
.B
                  Stride :: i(),
.B
                  Pointer :: offset() | mem()) ->
.B
                     ok
.br
.fi
.br
.RS
.LP
\fIgl:interleavedArrays/3\fR\& lets you specify and enable individual color, normal, texture and vertex arrays whose elements are part of a larger aggregate array element\&. For some implementations, this is more efficient than specifying the arrays separately\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
invalidateBufferData(Buffer :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:invalidateBufferData/1\fR\& invalidates all of the content of the data store of a buffer object\&. After invalidation, the content of the buffer\&'s data store becomes undefined\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
invalidateBufferSubData(Buffer :: i(),
.B
                        Offset :: i(),
.B
                        Length :: i()) ->
.B
                           ok
.br
.fi
.br
.RS
.LP
\fIgl:invalidateBufferSubData/3\fR\& invalidates all or part of the content of the data store of a buffer object\&. After invalidation, the content of the specified range of the buffer\&'s data store becomes undefined\&. The start of the range is given by \fIOffset\fR\& and its size is given by \fILength\fR\&, both measured in basic machine units\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
invalidateFramebuffer(Target :: enum(), Attachments :: [enum()]) ->
.B
                         ok
.br
.fi
.br
.RS
.LP
\fIgl:invalidateFramebuffer/2\fR\& and \fIglInvalidateNamedFramebufferData\fR\& invalidate the entire contents of a specified set of attachments of a framebuffer\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
invalidateSubFramebuffer(Target :: enum(),
.B
                         Attachments :: [enum()],
.B
                         X :: i(),
.B
                         Y :: i(),
.B
                         Width :: i(),
.B
                         Height :: i()) ->
.B
                            ok
.br
.fi
.br
.RS
.LP
\fIgl:invalidateSubFramebuffer/6\fR\& and \fIglInvalidateNamedFramebufferSubData\fR\& invalidate the contents of a specified region of a specified set of attachments of a framebuffer\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
invalidateTexImage(Texture :: i(), Level :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:invalidateTexSubImage/8\fR\& invalidates all of a texture image\&. \fITexture\fR\& and \fILevel\fR\& indicated which texture image is being invalidated\&. After this command, data in the texture image has undefined values\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
invalidateTexSubImage(Texture, Level, Xoffset, Yoffset, Zoffset,
.B
                      Width, Height, Depth) ->
.B
                         ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Texture = Level = Xoffset = Yoffset = Zoffset = Width = Height = Depth = i()
.br
.RE
.RE
.RS
.LP
\fIgl:invalidateTexSubImage/8\fR\& invalidates all or part of a texture image\&. \fITexture\fR\& and \fILevel\fR\& indicated which texture image is being invalidated\&. After this command, data in that subregion have undefined values\&. \fIXoffset\fR\&, \fIYoffset\fR\&, \fIZoffset\fR\&, \fIWidth\fR\&, \fIHeight\fR\&, and \fIDepth\fR\& are interpreted as they are in \fIgl:texSubImage3D/11\fR\&\&. For texture targets that don\&'t have certain dimensions, this command treats those dimensions as having a size of 1\&. For example, to invalidate a portion of a two- dimensional texture, the application would use \fIZoffset\fR\& equal to zero and \fIDepth\fR\& equal to one\&. Cube map textures are treated as an array of six slices in the z-dimension, where a value of \fIZoffset\fR\& is interpreted as specifying face \fI?GL_TEXTURE_CUBE_MAP_POSITIVE_X\fR\& + \fIZoffset\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
isBuffer(Buffer :: i()) -> 0 | 1
.br
.fi
.br
.RS
.LP
\fIgl:isBuffer/1\fR\& returns \fI?GL_TRUE\fR\& if \fIBuffer\fR\& is currently the name of a buffer object\&. If \fIBuffer\fR\& is zero, or is a non-zero value that is not currently the name of a buffer object, or if an error occurs, \fIgl:isBuffer/1\fR\& returns \fI?GL_FALSE\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
isEnabled(Cap :: enum()) -> 0 | 1
.br
.fi
.br
.nf

.B
isEnabledi(Target :: enum(), Index :: i()) -> 0 | 1
.br
.fi
.br
.RS
.LP
\fIgl:isEnabled/1\fR\& returns \fI?GL_TRUE\fR\& if \fICap\fR\& is an enabled capability and returns \fI?GL_FALSE\fR\& otherwise\&. Boolean states that are indexed may be tested with \fIgl:isEnabledi/2\fR\&\&. For \fIgl:isEnabledi/2\fR\&, \fIIndex\fR\& specifies the index of the capability to test\&. \fIIndex\fR\& must be between zero and the count of indexed capabilities for \fICap\fR\&\&. Initially all capabilities except \fI?GL_DITHER\fR\& are disabled; \fI?GL_DITHER\fR\& is initially enabled\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
isFramebuffer(Framebuffer :: i()) -> 0 | 1
.br
.fi
.br
.RS
.LP
\fIgl:isFramebuffer/1\fR\& returns \fI?GL_TRUE\fR\& if \fIFramebuffer\fR\& is currently the name of a framebuffer object\&. If \fIFramebuffer\fR\& is zero, or if \fI?framebuffer\fR\& is not the name of a framebuffer object, or if an error occurs, \fIgl:isFramebuffer/1\fR\& returns \fI?GL_FALSE\fR\&\&. If \fIFramebuffer\fR\& is a name returned by \fIgl:genFramebuffers/1\fR\&, by that has not yet been bound through a call to \fIgl:bindFramebuffer/2\fR\&, then the name is not a framebuffer object and \fIgl:isFramebuffer/1\fR\& returns \fI?GL_FALSE\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
isList(List :: i()) -> 0 | 1
.br
.fi
.br
.RS
.LP
\fIgl:isList/1\fR\& returns \fI?GL_TRUE\fR\& if \fIList\fR\& is the name of a display list and returns \fI?GL_FALSE\fR\& if it is not, or if an error occurs\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
isProgram(Program :: i()) -> 0 | 1
.br
.fi
.br
.RS
.LP
\fIgl:isProgram/1\fR\& returns \fI?GL_TRUE\fR\& if \fIProgram\fR\& is the name of a program object previously created with \fIgl:createProgram/0\fR\& and not yet deleted with \fIgl:deleteProgram/1\fR\&\&. If \fIProgram\fR\& is zero or a non-zero value that is not the name of a program object, or if an error occurs, \fIgl:isProgram/1\fR\& returns \fI?GL_FALSE\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
isProgramPipeline(Pipeline :: i()) -> 0 | 1
.br
.fi
.br
.RS
.LP
\fIgl:isProgramPipeline/1\fR\& returns \fI?GL_TRUE\fR\& if \fIPipeline\fR\& is currently the name of a program pipeline object\&. If \fIPipeline\fR\& is zero, or if \fI?pipeline\fR\& is not the name of a program pipeline object, or if an error occurs, \fIgl:isProgramPipeline/1\fR\& returns \fI?GL_FALSE\fR\&\&. If \fIPipeline\fR\& is a name returned by \fIgl:genProgramPipelines/1\fR\&, but that has not yet been bound through a call to \fIgl:bindProgramPipeline/1\fR\&, then the name is not a program pipeline object and \fIgl:isProgramPipeline/1\fR\& returns \fI?GL_FALSE\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
isQuery(Id :: i()) -> 0 | 1
.br
.fi
.br
.RS
.LP
\fIgl:isQuery/1\fR\& returns \fI?GL_TRUE\fR\& if \fIId\fR\& is currently the name of a query object\&. If \fIId\fR\& is zero, or is a non-zero value that is not currently the name of a query object, or if an error occurs, \fIgl:isQuery/1\fR\& returns \fI?GL_FALSE\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
isRenderbuffer(Renderbuffer :: i()) -> 0 | 1
.br
.fi
.br
.RS
.LP
\fIgl:isRenderbuffer/1\fR\& returns \fI?GL_TRUE\fR\& if \fIRenderbuffer\fR\& is currently the name of a renderbuffer object\&. If \fIRenderbuffer\fR\& is zero, or if \fIRenderbuffer\fR\& is not the name of a renderbuffer object, or if an error occurs, \fIgl:isRenderbuffer/1\fR\& returns \fI?GL_FALSE\fR\&\&. If \fIRenderbuffer\fR\& is a name returned by \fIgl:genRenderbuffers/1\fR\&, by that has not yet been bound through a call to \fIgl:bindRenderbuffer/2\fR\& or \fIgl:framebufferRenderbuffer/4\fR\&, then the name is not a renderbuffer object and \fIgl:isRenderbuffer/1\fR\& returns \fI?GL_FALSE\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
isSampler(Sampler :: i()) -> 0 | 1
.br
.fi
.br
.RS
.LP
\fIgl:isSampler/1\fR\& returns \fI?GL_TRUE\fR\& if \fIId\fR\& is currently the name of a sampler object\&. If \fIId\fR\& is zero, or is a non-zero value that is not currently the name of a sampler object, or if an error occurs, \fIgl:isSampler/1\fR\& returns \fI?GL_FALSE\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
isShader(Shader :: i()) -> 0 | 1
.br
.fi
.br
.RS
.LP
\fIgl:isShader/1\fR\& returns \fI?GL_TRUE\fR\& if \fIShader\fR\& is the name of a shader object previously created with \fIgl:createShader/1\fR\& and not yet deleted with \fIgl:deleteShader/1\fR\&\&. If \fIShader\fR\& is zero or a non-zero value that is not the name of a shader object, or if an error occurs, \fIglIsShader \fR\& returns \fI?GL_FALSE\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
isSync(Sync :: i()) -> 0 | 1
.br
.fi
.br
.RS
.LP
\fIgl:isSync/1\fR\& returns \fI?GL_TRUE\fR\& if \fISync\fR\& is currently the name of a sync object\&. If \fISync\fR\& is not the name of a sync object, or if an error occurs, \fIgl:isSync/1\fR\& returns \fI?GL_FALSE\fR\&\&. Note that zero is not the name of a sync object\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
isTexture(Texture :: i()) -> 0 | 1
.br
.fi
.br
.RS
.LP
\fIgl:isTexture/1\fR\& returns \fI?GL_TRUE\fR\& if \fITexture\fR\& is currently the name of a texture\&. If \fITexture\fR\& is zero, or is a non-zero value that is not currently the name of a texture, or if an error occurs, \fIgl:isTexture/1\fR\& returns \fI?GL_FALSE\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
isTransformFeedback(Id :: i()) -> 0 | 1
.br
.fi
.br
.RS
.LP
\fIgl:isTransformFeedback/1\fR\& returns \fI?GL_TRUE\fR\& if \fIId\fR\& is currently the name of a transform feedback object\&. If \fIId\fR\& is zero, or if \fI?id\fR\& is not the name of a transform feedback object, or if an error occurs, \fIgl:isTransformFeedback/1\fR\& returns \fI?GL_FALSE\fR\&\&. If \fIId\fR\& is a name returned by \fIgl:genTransformFeedbacks/1\fR\&, but that has not yet been bound through a call to \fIgl:bindTransformFeedback/2\fR\&, then the name is not a transform feedback object and \fIgl:isTransformFeedback/1\fR\& returns \fI?GL_FALSE\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
isVertexArray(Array :: i()) -> 0 | 1
.br
.fi
.br
.RS
.LP
\fIgl:isVertexArray/1\fR\& returns \fI?GL_TRUE\fR\& if \fIArray\fR\& is currently the name of a vertex array object\&. If \fIArray\fR\& is zero, or if \fIArray\fR\& is not the name of a vertex array object, or if an error occurs, \fIgl:isVertexArray/1\fR\& returns \fI?GL_FALSE\fR\&\&. If \fIArray\fR\& is a name returned by \fIgl:genVertexArrays/1\fR\&, by that has not yet been bound through a call to \fIgl:bindVertexArray/1\fR\&, then the name is not a vertex array object and \fIgl:isVertexArray/1\fR\& returns \fI?GL_FALSE\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
lightf(Light :: enum(), Pname :: enum(), Param :: f()) -> ok
.br
.fi
.br
.nf

.B
lightfv(Light :: enum(), Pname :: enum(), Params :: tuple()) -> ok
.br
.fi
.br
.nf

.B
lighti(Light :: enum(), Pname :: enum(), Param :: i()) -> ok
.br
.fi
.br
.nf

.B
lightiv(Light :: enum(), Pname :: enum(), Params :: tuple()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:light()\fR\& sets the values of individual light source parameters\&. \fILight\fR\& names the light and is a symbolic name of the form \fI?GL_LIGHT\fR\& i, where i ranges from 0 to the value of \fI?GL_MAX_LIGHTS\fR\& - 1\&. \fIPname\fR\& specifies one of ten light source parameters, again by symbolic name\&. \fIParams\fR\& is either a single value or a pointer to an array that contains the new values\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
lightModelf(Pname :: enum(), Param :: f()) -> ok
.br
.fi
.br
.nf

.B
lightModelfv(Pname :: enum(), Params :: tuple()) -> ok
.br
.fi
.br
.nf

.B
lightModeli(Pname :: enum(), Param :: i()) -> ok
.br
.fi
.br
.nf

.B
lightModeliv(Pname :: enum(), Params :: tuple()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:lightModel()\fR\& sets the lighting model parameter\&. \fIPname\fR\& names a parameter and \fIParams\fR\& gives the new value\&. There are three lighting model parameters:
.LP
External documentation\&.
.RE
.LP
.nf

.B
lineStipple(Factor :: i(), Pattern :: i()) -> ok
.br
.fi
.br
.RS
.LP
Line stippling masks out certain fragments produced by rasterization; those fragments will not be drawn\&. The masking is achieved by using three parameters: the 16-bit line stipple pattern \fIPattern\fR\&, the repeat count \fIFactor\fR\&, and an integer stipple counter s\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
lineWidth(Width :: f()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:lineWidth/1\fR\& specifies the rasterized width of both aliased and antialiased lines\&. Using a line width other than 1 has different effects, depending on whether line antialiasing is enabled\&. To enable and disable line antialiasing, call \fIgl:enable/1\fR\& and \fIgl:disable/1\fR\& with argument \fI?GL_LINE_SMOOTH\fR\&\&. Line antialiasing is initially disabled\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
linkProgram(Program :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:linkProgram/1\fR\& links the program object specified by \fIProgram\fR\&\&. If any shader objects of type \fI?GL_VERTEX_SHADER\fR\& are attached to \fIProgram\fR\&, they will be used to create an executable that will run on the programmable vertex processor\&. If any shader objects of type \fI?GL_GEOMETRY_SHADER\fR\& are attached to \fIProgram\fR\&, they will be used to create an executable that will run on the programmable geometry processor\&. If any shader objects of type \fI?GL_FRAGMENT_SHADER\fR\& are attached to \fIProgram\fR\&, they will be used to create an executable that will run on the programmable fragment processor\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
listBase(Base :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:callLists/1\fR\& specifies an array of offsets\&. Display-list names are generated by adding \fIBase\fR\& to each offset\&. Names that reference valid display lists are executed; the others are ignored\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
loadIdentity() -> ok
.br
.fi
.br
.RS
.LP
\fIgl:loadIdentity/0\fR\& replaces the current matrix with the identity matrix\&. It is semantically equivalent to calling \fIgl:loadMatrix()\fR\& with the identity matrix
.LP
External documentation\&.
.RE
.LP
.nf

.B
loadMatrixd(M :: matrix()) -> ok
.br
.fi
.br
.nf

.B
loadMatrixf(M :: matrix()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:loadMatrix()\fR\& replaces the current matrix with the one whose elements are specified by \fIM\fR\&\&. The current matrix is the projection matrix, modelview matrix, or texture matrix, depending on the current matrix mode (see \fIgl:matrixMode/1\fR\&)\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
loadName(Name :: i()) -> ok
.br
.fi
.br
.RS
.LP
The name stack is used during selection mode to allow sets of rendering commands to be uniquely identified\&. It consists of an ordered set of unsigned integers and is initially empty\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
loadTransposeMatrixd(M :: matrix()) -> ok
.br
.fi
.br
.nf

.B
loadTransposeMatrixf(M :: matrix()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:loadTransposeMatrix()\fR\& replaces the current matrix with the one whose elements are specified by \fIM\fR\&\&. The current matrix is the projection matrix, modelview matrix, or texture matrix, depending on the current matrix mode (see \fIgl:matrixMode/1\fR\&)\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
logicOp(Opcode :: enum()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:logicOp/1\fR\& specifies a logical operation that, when enabled, is applied between the incoming RGBA color and the RGBA color at the corresponding location in the frame buffer\&. To enable or disable the logical operation, call \fIgl:enable/1\fR\& and \fIgl:disable/1\fR\& using the symbolic constant \fI?GL_COLOR_LOGIC_OP\fR\&\&. The initial value is disabled\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
map1d(Target :: enum(),
.B
      U1 :: f(),
.B
      U2 :: f(),
.B
      Stride :: i(),
.B
      Order :: i(),
.B
      Points :: binary()) ->
.B
         ok
.br
.fi
.br
.nf

.B
map1f(Target :: enum(),
.B
      U1 :: f(),
.B
      U2 :: f(),
.B
      Stride :: i(),
.B
      Order :: i(),
.B
      Points :: binary()) ->
.B
         ok
.br
.fi
.br
.RS
.LP
Evaluators provide a way to use polynomial or rational polynomial mapping to produce vertices, normals, texture coordinates, and colors\&. The values produced by an evaluator are sent to further stages of GL processing just as if they had been presented using \fIgl:vertex()\fR\&, \fIgl:normal()\fR\&, \fIgl:texCoord()\fR\&, and \fIgl:color()\fR\& commands, except that the generated values do not update the current normal, texture coordinates, or color\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
map2d(Target, U1, U2, Ustride, Uorder, V1, V2, Vstride, Vorder,
.B
      Points) ->
.B
         ok
.br
.fi
.br
.nf

.B
map2f(Target, U1, U2, Ustride, Uorder, V1, V2, Vstride, Vorder,
.B
      Points) ->
.B
         ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Target = enum()
.br
U1 = U2 = f()
.br
Ustride = Uorder = i()
.br
V1 = V2 = f()
.br
Vstride = Vorder = i()
.br
Points = binary()
.br
.RE
.RE
.RS
.LP
Evaluators provide a way to use polynomial or rational polynomial mapping to produce vertices, normals, texture coordinates, and colors\&. The values produced by an evaluator are sent on to further stages of GL processing just as if they had been presented using \fIgl:vertex()\fR\&, \fIgl:normal()\fR\&, \fIgl:texCoord()\fR\&, and \fIgl:color()\fR\& commands, except that the generated values do not update the current normal, texture coordinates, or color\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
mapGrid1d(Un :: i(), U1 :: f(), U2 :: f()) -> ok
.br
.fi
.br
.nf

.B
mapGrid1f(Un :: i(), U1 :: f(), U2 :: f()) -> ok
.br
.fi
.br
.nf

.B
mapGrid2d(Un :: i(),
.B
          U1 :: f(),
.B
          U2 :: f(),
.B
          Vn :: i(),
.B
          V1 :: f(),
.B
          V2 :: f()) ->
.B
             ok
.br
.fi
.br
.nf

.B
mapGrid2f(Un :: i(),
.B
          U1 :: f(),
.B
          U2 :: f(),
.B
          Vn :: i(),
.B
          V1 :: f(),
.B
          V2 :: f()) ->
.B
             ok
.br
.fi
.br
.RS
.LP
\fIgl:mapGrid()\fR\& and \fIgl:evalMesh()\fR\& are used together to efficiently generate and evaluate a series of evenly-spaced map domain values\&. \fIgl:evalMesh()\fR\& steps through the integer domain of a one- or two-dimensional grid, whose range is the domain of the evaluation maps specified by \fIglMap1\fR\& and \fIglMap2\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
materialf(Face :: enum(), Pname :: enum(), Param :: f()) -> ok
.br
.fi
.br
.nf

.B
materialfv(Face :: enum(), Pname :: enum(), Params :: tuple()) ->
.B
              ok
.br
.fi
.br
.nf

.B
materiali(Face :: enum(), Pname :: enum(), Param :: i()) -> ok
.br
.fi
.br
.nf

.B
materialiv(Face :: enum(), Pname :: enum(), Params :: tuple()) ->
.B
              ok
.br
.fi
.br
.RS
.LP
\fIgl:material()\fR\& assigns values to material parameters\&. There are two matched sets of material parameters\&. One, the \fIfront-facing\fR\& set, is used to shade points, lines, bitmaps, and all polygons (when two-sided lighting is disabled), or just front-facing polygons (when two-sided lighting is enabled)\&. The other set, \fIback-facing\fR\&, is used to shade back-facing polygons only when two-sided lighting is enabled\&. Refer to the \fIgl:lightModel()\fR\& reference page for details concerning one- and two-sided lighting calculations\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
matrixMode(Mode :: enum()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:matrixMode/1\fR\& sets the current matrix mode\&. \fIMode\fR\& can assume one of four values:
.LP
External documentation\&.
.RE
.LP
.nf

.B
memoryBarrier(Barriers :: i()) -> ok
.br
.fi
.br
.nf

.B
memoryBarrierByRegion(Barriers :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:memoryBarrier/1\fR\& defines a barrier ordering the memory transactions issued prior to the command relative to those issued after the barrier\&. For the purposes of this ordering, memory transactions performed by shaders are considered to be issued by the rendering command that triggered the execution of the shader\&. \fIBarriers\fR\& is a bitfield indicating the set of operations that are synchronized with shader stores; the bits used in \fIBarriers\fR\& are as follows:
.LP
External documentation\&.
.RE
.LP
.nf

.B
minSampleShading(Value :: f()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:minSampleShading/1\fR\& specifies the rate at which samples are shaded within a covered pixel\&. Sample-rate shading is enabled by calling \fIgl:enable/1\fR\& with the parameter \fI?GL_SAMPLE_SHADING\fR\&\&. If \fI?GL_MULTISAMPLE\fR\& or \fI?GL_SAMPLE_SHADING\fR\& is disabled, sample shading has no effect\&. Otherwise, an implementation must provide at least as many unique color values for each covered fragment as specified by \fIValue\fR\& times \fISamples\fR\& where \fISamples\fR\& is the value of \fI?GL_SAMPLES\fR\& for the current framebuffer\&. At least 1 sample for each covered fragment is generated\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
minmax(Target :: enum(), Internalformat :: enum(), Sink :: 0 | 1) ->
.B
          ok
.br
.fi
.br
.RS
.LP
When \fI?GL_MINMAX\fR\& is enabled, the RGBA components of incoming pixels are compared to the minimum and maximum values for each component, which are stored in the two-element minmax table\&. (The first element stores the minima, and the second element stores the maxima\&.) If a pixel component is greater than the corresponding component in the maximum element, then the maximum element is updated with the pixel component value\&. If a pixel component is less than the corresponding component in the minimum element, then the minimum element is updated with the pixel component value\&. (In both cases, if the internal format of the minmax table includes luminance, then the R color component of incoming pixels is used for comparison\&.) The contents of the minmax table may be retrieved at a later time by calling \fIgl:getMinmax/5\fR\&\&. The minmax operation is enabled or disabled by calling \fIgl:enable/1\fR\& or \fIgl:disable/1\fR\&, respectively, with an argument of \fI?GL_MINMAX\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
multMatrixd(M :: matrix()) -> ok
.br
.fi
.br
.nf

.B
multMatrixf(M :: matrix()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:multMatrix()\fR\& multiplies the current matrix with the one specified using \fIM\fR\&, and replaces the current matrix with the product\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
multTransposeMatrixd(M :: matrix()) -> ok
.br
.fi
.br
.nf

.B
multTransposeMatrixf(M :: matrix()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:multTransposeMatrix()\fR\& multiplies the current matrix with the one specified using \fIM\fR\&, and replaces the current matrix with the product\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
multiDrawArrays(Mode :: enum(),
.B
                First :: [integer()] | mem(),
.B
                Count :: [integer()] | mem()) ->
.B
                   ok
.br
.fi
.br
.RS
.LP
\fIgl:multiDrawArrays/3\fR\& specifies multiple sets of geometric primitives with very few subroutine calls\&. Instead of calling a GL procedure to pass each individual vertex, normal, texture coordinate, edge flag, or color, you can prespecify separate arrays of vertices, normals, and colors and use them to construct a sequence of primitives with a single call to \fIgl:multiDrawArrays/3\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
multiDrawArraysIndirect(Mode :: enum(),
.B
                        Indirect :: offset() | mem(),
.B
                        Drawcount :: i(),
.B
                        Stride :: i()) ->
.B
                           ok
.br
.fi
.br
.RS
.LP
\fIgl:multiDrawArraysIndirect/4\fR\& specifies multiple geometric primitives with very few subroutine calls\&. \fIgl:multiDrawArraysIndirect/4\fR\& behaves similarly to a multitude of calls to \fIgl:drawArraysInstancedBaseInstance/5\fR\&, execept that the parameters to each call to \fIgl:drawArraysInstancedBaseInstance/5\fR\& are stored in an array in memory at the address given by \fIIndirect\fR\&, separated by the stride, in basic machine units, specified by \fIStride\fR\&\&. If \fIStride\fR\& is zero, then the array is assumed to be tightly packed in memory\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
multiDrawArraysIndirectCount(Mode, Indirect, Drawcount,
.B
                             Maxdrawcount, Stride) ->
.B
                                ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Mode = enum()
.br
Indirect = offset() | mem()
.br
Drawcount = Maxdrawcount = Stride = i()
.br
.RE
.RE
.RS
.LP
No documentation available\&.
.RE
.LP
.nf

.B
multiTexCoord1d(Target :: enum(), S :: f()) -> ok
.br
.fi
.br
.nf

.B
multiTexCoord1dv(Target :: enum(), X2 :: {S :: f()}) -> ok
.br
.fi
.br
.nf

.B
multiTexCoord1f(Target :: enum(), S :: f()) -> ok
.br
.fi
.br
.nf

.B
multiTexCoord1fv(Target :: enum(), X2 :: {S :: f()}) -> ok
.br
.fi
.br
.nf

.B
multiTexCoord1i(Target :: enum(), S :: i()) -> ok
.br
.fi
.br
.nf

.B
multiTexCoord1iv(Target :: enum(), X2 :: {S :: i()}) -> ok
.br
.fi
.br
.nf

.B
multiTexCoord1s(Target :: enum(), S :: i()) -> ok
.br
.fi
.br
.nf

.B
multiTexCoord1sv(Target :: enum(), X2 :: {S :: i()}) -> ok
.br
.fi
.br
.nf

.B
multiTexCoord2d(Target :: enum(), S :: f(), T :: f()) -> ok
.br
.fi
.br
.nf

.B
multiTexCoord2dv(Target :: enum(), X2 :: {S :: f(), T :: f()}) ->
.B
                    ok
.br
.fi
.br
.nf

.B
multiTexCoord2f(Target :: enum(), S :: f(), T :: f()) -> ok
.br
.fi
.br
.nf

.B
multiTexCoord2fv(Target :: enum(), X2 :: {S :: f(), T :: f()}) ->
.B
                    ok
.br
.fi
.br
.nf

.B
multiTexCoord2i(Target :: enum(), S :: i(), T :: i()) -> ok
.br
.fi
.br
.nf

.B
multiTexCoord2iv(Target :: enum(), X2 :: {S :: i(), T :: i()}) ->
.B
                    ok
.br
.fi
.br
.nf

.B
multiTexCoord2s(Target :: enum(), S :: i(), T :: i()) -> ok
.br
.fi
.br
.nf

.B
multiTexCoord2sv(Target :: enum(), X2 :: {S :: i(), T :: i()}) ->
.B
                    ok
.br
.fi
.br
.nf

.B
multiTexCoord3d(Target :: enum(), S :: f(), T :: f(), R :: f()) ->
.B
                   ok
.br
.fi
.br
.nf

.B
multiTexCoord3dv(Target :: enum(),
.B
                 X2 :: {S :: f(), T :: f(), R :: f()}) ->
.B
                    ok
.br
.fi
.br
.nf

.B
multiTexCoord3f(Target :: enum(), S :: f(), T :: f(), R :: f()) ->
.B
                   ok
.br
.fi
.br
.nf

.B
multiTexCoord3fv(Target :: enum(),
.B
                 X2 :: {S :: f(), T :: f(), R :: f()}) ->
.B
                    ok
.br
.fi
.br
.nf

.B
multiTexCoord3i(Target :: enum(), S :: i(), T :: i(), R :: i()) ->
.B
                   ok
.br
.fi
.br
.nf

.B
multiTexCoord3iv(Target :: enum(),
.B
                 X2 :: {S :: i(), T :: i(), R :: i()}) ->
.B
                    ok
.br
.fi
.br
.nf

.B
multiTexCoord3s(Target :: enum(), S :: i(), T :: i(), R :: i()) ->
.B
                   ok
.br
.fi
.br
.nf

.B
multiTexCoord3sv(Target :: enum(),
.B
                 X2 :: {S :: i(), T :: i(), R :: i()}) ->
.B
                    ok
.br
.fi
.br
.nf

.B
multiTexCoord4d(Target :: enum(),
.B
                S :: f(),
.B
                T :: f(),
.B
                R :: f(),
.B
                Q :: f()) ->
.B
                   ok
.br
.fi
.br
.nf

.B
multiTexCoord4dv(Target :: enum(),
.B
                 X2 :: {S :: f(), T :: f(), R :: f(), Q :: f()}) ->
.B
                    ok
.br
.fi
.br
.nf

.B
multiTexCoord4f(Target :: enum(),
.B
                S :: f(),
.B
                T :: f(),
.B
                R :: f(),
.B
                Q :: f()) ->
.B
                   ok
.br
.fi
.br
.nf

.B
multiTexCoord4fv(Target :: enum(),
.B
                 X2 :: {S :: f(), T :: f(), R :: f(), Q :: f()}) ->
.B
                    ok
.br
.fi
.br
.nf

.B
multiTexCoord4i(Target :: enum(),
.B
                S :: i(),
.B
                T :: i(),
.B
                R :: i(),
.B
                Q :: i()) ->
.B
                   ok
.br
.fi
.br
.nf

.B
multiTexCoord4iv(Target :: enum(),
.B
                 X2 :: {S :: i(), T :: i(), R :: i(), Q :: i()}) ->
.B
                    ok
.br
.fi
.br
.nf

.B
multiTexCoord4s(Target :: enum(),
.B
                S :: i(),
.B
                T :: i(),
.B
                R :: i(),
.B
                Q :: i()) ->
.B
                   ok
.br
.fi
.br
.nf

.B
multiTexCoord4sv(Target :: enum(),
.B
                 X2 :: {S :: i(), T :: i(), R :: i(), Q :: i()}) ->
.B
                    ok
.br
.fi
.br
.RS
.LP
\fIgl:multiTexCoord()\fR\& specifies texture coordinates in one, two, three, or four dimensions\&. \fIgl:multiTexCoord1()\fR\& sets the current texture coordinates to (s 0 0 1); a call to \fIgl:multiTexCoord2()\fR\& sets them to (s t 0 1)\&. Similarly, \fIgl:multiTexCoord3()\fR\& specifies the texture coordinates as (s t r 1), and \fIgl:multiTexCoord4()\fR\& defines all four components explicitly as (s t r q)\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
endList() -> ok
.br
.fi
.br
.nf

.B
newList(List :: i(), Mode :: enum()) -> ok
.br
.fi
.br
.RS
.LP
Display lists are groups of GL commands that have been stored for subsequent execution\&. Display lists are created with \fIgl:newList/2\fR\&\&. All subsequent commands are placed in the display list, in the order issued, until \fIgl:endList/0\fR\& is called\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
normal3b(Nx :: i(), Ny :: i(), Nz :: i()) -> ok
.br
.fi
.br
.nf

.B
normal3bv(X1 :: {Nx :: i(), Ny :: i(), Nz :: i()}) -> ok
.br
.fi
.br
.nf

.B
normal3d(Nx :: f(), Ny :: f(), Nz :: f()) -> ok
.br
.fi
.br
.nf

.B
normal3dv(X1 :: {Nx :: f(), Ny :: f(), Nz :: f()}) -> ok
.br
.fi
.br
.nf

.B
normal3f(Nx :: f(), Ny :: f(), Nz :: f()) -> ok
.br
.fi
.br
.nf

.B
normal3fv(X1 :: {Nx :: f(), Ny :: f(), Nz :: f()}) -> ok
.br
.fi
.br
.nf

.B
normal3i(Nx :: i(), Ny :: i(), Nz :: i()) -> ok
.br
.fi
.br
.nf

.B
normal3iv(X1 :: {Nx :: i(), Ny :: i(), Nz :: i()}) -> ok
.br
.fi
.br
.nf

.B
normal3s(Nx :: i(), Ny :: i(), Nz :: i()) -> ok
.br
.fi
.br
.nf

.B
normal3sv(X1 :: {Nx :: i(), Ny :: i(), Nz :: i()}) -> ok
.br
.fi
.br
.RS
.LP
The current normal is set to the given coordinates whenever \fIgl:normal()\fR\& is issued\&. Byte, short, or integer arguments are converted to floating-point format with a linear mapping that maps the most positive representable integer value to 1\&.0 and the most negative representable integer value to -1\&.0\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
normalPointer(Type :: enum(),
.B
              Stride :: i(),
.B
              Ptr :: offset() | mem()) ->
.B
                 ok
.br
.fi
.br
.RS
.LP
\fIgl:normalPointer/3\fR\& specifies the location and data format of an array of normals to use when rendering\&. \fIType\fR\& specifies the data type of each normal coordinate, and \fIStride\fR\& specifies the byte stride from one normal to the next, allowing vertices and attributes to be packed into a single array or stored in separate arrays\&. (Single-array storage may be more efficient on some implementations; see \fIgl:interleavedArrays/3\fR\&\&.)
.LP
External documentation\&.
.RE
.LP
.nf

.B
objectPtrLabel(Ptr :: offset() | mem(),
.B
               Length :: i(),
.B
               Label :: string()) ->
.B
                  ok
.br
.fi
.br
.RS
.LP
\fIgl:objectPtrLabel/3\fR\& labels the sync object identified by \fIPtr\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
ortho(Left :: f(),
.B
      Right :: f(),
.B
      Bottom :: f(),
.B
      Top :: f(),
.B
      Near_val :: f(),
.B
      Far_val :: f()) ->
.B
         ok
.br
.fi
.br
.RS
.LP
\fIgl:ortho/6\fR\& describes a transformation that produces a parallel projection\&. The current matrix (see \fIgl:matrixMode/1\fR\&) is multiplied by this matrix and the result replaces the current matrix, as if \fIgl:multMatrix()\fR\& were called with the following matrix as its argument:
.LP
External documentation\&.
.RE
.LP
.nf

.B
passThrough(Token :: f()) -> ok
.br
.fi
.br
.RS
.LP

.LP
External documentation\&.
.RE
.LP
.nf

.B
patchParameterfv(Pname :: enum(), Values :: [f()]) -> ok
.br
.fi
.br
.nf

.B
patchParameteri(Pname :: enum(), Value :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:patchParameter()\fR\& specifies the parameters that will be used for patch primitives\&. \fIPname\fR\& specifies the parameter to modify and must be either \fI?GL_PATCH_VERTICES\fR\&, \fI?GL_PATCH_DEFAULT_OUTER_LEVEL\fR\& or \fI?GL_PATCH_DEFAULT_INNER_LEVEL\fR\&\&. For \fIgl:patchParameteri/2\fR\&, \fIValue\fR\& specifies the new value for the parameter specified by \fIPname\fR\&\&. For \fIgl:patchParameterfv/2\fR\&, \fIValues\fR\& specifies the address of an array containing the new values for the parameter specified by \fIPname\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
pauseTransformFeedback() -> ok
.br
.fi
.br
.RS
.LP
\fIgl:pauseTransformFeedback/0\fR\& pauses transform feedback operations on the currently active transform feedback object\&. When transform feedback operations are paused, transform feedback is still considered active and changing most transform feedback state related to the object results in an error\&. However, a new transform feedback object may be bound while transform feedback is paused\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
pixelMapfv(Map :: enum(), Mapsize :: i(), Values :: binary()) ->
.B
              ok
.br
.fi
.br
.nf

.B
pixelMapuiv(Map :: enum(), Mapsize :: i(), Values :: binary()) ->
.B
               ok
.br
.fi
.br
.nf

.B
pixelMapusv(Map :: enum(), Mapsize :: i(), Values :: binary()) ->
.B
               ok
.br
.fi
.br
.RS
.LP
\fIgl:pixelMap()\fR\& sets up translation tables, or \fImaps\fR\&, used by \fIgl:copyPixels/5\fR\&, \fIgl:copyTexImage1D/7\fR\&, \fIgl:copyTexImage2D/8\fR\&, \fIgl:copyTexSubImage1D/6\fR\&, \fIgl:copyTexSubImage2D/8\fR\&, \fIgl:copyTexSubImage3D/9\fR\&, \fIgl:drawPixels/5\fR\&, \fIgl:readPixels/7\fR\&, \fIgl:texImage1D/8\fR\&, \fIgl:texImage2D/9\fR\&, \fIgl:texImage3D/10\fR\&, \fIgl:texSubImage1D/7\fR\&, \fIgl:texSubImage2D/9\fR\&, and \fIgl:texSubImage3D/11\fR\&\&. Additionally, if the ARB_imaging subset is supported, the routines \fIgl:colorTable/6\fR\&, \fIgl:colorSubTable/6\fR\&, \fIgl:convolutionFilter1D/6\fR\&, \fIgl:convolutionFilter2D/7\fR\&, \fIgl:histogram/4\fR\&, \fIgl:minmax/3\fR\&, and \fIgl:separableFilter2D/8\fR\&\&. Use of these maps is described completely in the \fIgl:pixelTransfer()\fR\& reference page, and partly in the reference pages for the pixel and texture image commands\&. Only the specification of the maps is described in this reference page\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
pixelStoref(Pname :: enum(), Param :: f()) -> ok
.br
.fi
.br
.nf

.B
pixelStorei(Pname :: enum(), Param :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:pixelStore()\fR\& sets pixel storage modes that affect the operation of subsequent \fIgl:readPixels/7\fR\& as well as the unpacking of texture patterns (see \fIgl:texImage1D/8\fR\&, \fIgl:texImage2D/9\fR\&, \fIgl:texImage3D/10\fR\&, \fIgl:texSubImage1D/7\fR\&, \fIgl:texSubImage2D/9\fR\&, \fIgl:texSubImage3D/11\fR\&), \fIgl:compressedTexImage1D/7\fR\&, \fIgl:compressedTexImage2D/8\fR\&, \fIgl:compressedTexImage3D/9\fR\&, \fIgl:compressedTexSubImage1D/7\fR\&, \fIgl:compressedTexSubImage2D/9\fR\& or \fIgl:compressedTexSubImage1D/7\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
pixelTransferf(Pname :: enum(), Param :: f()) -> ok
.br
.fi
.br
.nf

.B
pixelTransferi(Pname :: enum(), Param :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:pixelTransfer()\fR\& sets pixel transfer modes that affect the operation of subsequent \fIgl:copyPixels/5\fR\&, \fIgl:copyTexImage1D/7\fR\&, \fIgl:copyTexImage2D/8\fR\&, \fIgl:copyTexSubImage1D/6\fR\&, \fIgl:copyTexSubImage2D/8\fR\&, \fIgl:copyTexSubImage3D/9\fR\&, \fIgl:drawPixels/5\fR\&, \fIgl:readPixels/7\fR\&, \fIgl:texImage1D/8\fR\&, \fIgl:texImage2D/9\fR\&, \fIgl:texImage3D/10\fR\&, \fIgl:texSubImage1D/7\fR\&, \fIgl:texSubImage2D/9\fR\&, and \fIgl:texSubImage3D/11\fR\& commands\&. Additionally, if the ARB_imaging subset is supported, the routines \fIgl:colorTable/6\fR\&, \fIgl:colorSubTable/6\fR\&, \fIgl:convolutionFilter1D/6\fR\&, \fIgl:convolutionFilter2D/7\fR\&, \fIgl:histogram/4\fR\&, \fIgl:minmax/3\fR\&, and \fIgl:separableFilter2D/8\fR\& are also affected\&. The algorithms that are specified by pixel transfer modes operate on pixels after they are read from the frame buffer (\fIgl:copyPixels/5\fR\&\fIgl:copyTexImage1D/7\fR\&, \fIgl:copyTexImage2D/8\fR\&, \fIgl:copyTexSubImage1D/6\fR\&, \fIgl:copyTexSubImage2D/8\fR\&, \fIgl:copyTexSubImage3D/9\fR\&, and \fIgl:readPixels/7\fR\&), or unpacked from client memory (\fIgl:drawPixels/5\fR\&, \fIgl:texImage1D/8\fR\&, \fIgl:texImage2D/9\fR\&, \fIgl:texImage3D/10\fR\&, \fIgl:texSubImage1D/7\fR\&, \fIgl:texSubImage2D/9\fR\&, and \fIgl:texSubImage3D/11\fR\&)\&. Pixel transfer operations happen in the same order, and in the same manner, regardless of the command that resulted in the pixel operation\&. Pixel storage modes (see \fIgl:pixelStore()\fR\&) control the unpacking of pixels being read from client memory and the packing of pixels being written back into client memory\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
pixelZoom(Xfactor :: f(), Yfactor :: f()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:pixelZoom/2\fR\& specifies values for the x and y zoom factors\&. During the execution of \fIgl:drawPixels/5\fR\& or \fIgl:copyPixels/5\fR\&, if ( xr, yr) is the current raster position, and a given element is in the mth row and nth column of the pixel rectangle, then pixels whose centers are in the rectangle with corners at
.LP
External documentation\&.
.RE
.LP
.nf

.B
pointParameterf(Pname :: enum(), Param :: f()) -> ok
.br
.fi
.br
.nf

.B
pointParameterfv(Pname :: enum(), Params :: tuple()) -> ok
.br
.fi
.br
.nf

.B
pointParameteri(Pname :: enum(), Param :: i()) -> ok
.br
.fi
.br
.nf

.B
pointParameteriv(Pname :: enum(), Params :: tuple()) -> ok
.br
.fi
.br
.RS
.LP
The following values are accepted for \fIPname\fR\&:
.LP
External documentation\&.
.RE
.LP
.nf

.B
pointSize(Size :: f()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:pointSize/1\fR\& specifies the rasterized diameter of points\&. If point size mode is disabled (see \fIgl:enable/1\fR\& with parameter \fI?GL_PROGRAM_POINT_SIZE\fR\&), this value will be used to rasterize points\&. Otherwise, the value written to the shading language built-in variable gl_PointSize will be used\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
polygonMode(Face :: enum(), Mode :: enum()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:polygonMode/2\fR\& controls the interpretation of polygons for rasterization\&. \fIFace\fR\& describes which polygons \fIMode\fR\& applies to: both front and back-facing polygons (\fI?GL_FRONT_AND_BACK\fR\&)\&. The polygon mode affects only the final rasterization of polygons\&. In particular, a polygon\&'s vertices are lit and the polygon is clipped and possibly culled before these modes are applied\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
polygonOffset(Factor :: f(), Units :: f()) -> ok
.br
.fi
.br
.RS
.LP
When \fI?GL_POLYGON_OFFSET_FILL\fR\&, \fI?GL_POLYGON_OFFSET_LINE\fR\&, or \fI?GL_POLYGON_OFFSET_POINT\fR\& is enabled, each fragment\&'s \fIdepth\fR\& value will be offset after it is interpolated from the \fIdepth\fR\& values of the appropriate vertices\&. The value of the offset is factor×DZ+r×units, where DZ is a measurement of the change in depth relative to the screen area of the polygon, and r is the smallest value that is guaranteed to produce a resolvable offset for a given implementation\&. The offset is added before the depth test is performed and before the value is written into the depth buffer\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
polygonOffsetClamp(Factor :: f(), Units :: f(), Clamp :: f()) ->
.B
                      ok
.br
.fi
.br
.RS
.LP
No documentation available\&.
.RE
.LP
.nf

.B
polygonStipple(Mask :: binary()) -> ok
.br
.fi
.br
.RS
.LP
Polygon stippling, like line stippling (see \fIgl:lineStipple/2\fR\&), masks out certain fragments produced by rasterization, creating a pattern\&. Stippling is independent of polygon antialiasing\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
primitiveRestartIndex(Index :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:primitiveRestartIndex/1\fR\& specifies a vertex array element that is treated specially when primitive restarting is enabled\&. This is known as the primitive restart index\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
prioritizeTextures(Textures :: [i()], Priorities :: [clamp()]) ->
.B
                      ok
.br
.fi
.br
.RS
.LP
\fIgl:prioritizeTextures/2\fR\& assigns the \fIN\fR\& texture priorities given in \fIPriorities\fR\& to the \fIN\fR\& textures named in \fITextures\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
programBinary(Program :: i(),
.B
              BinaryFormat :: enum(),
.B
              Binary :: binary()) ->
.B
                 ok
.br
.fi
.br
.RS
.LP
\fIgl:programBinary/3\fR\& loads a program object with a program binary previously returned from \fIgl:getProgramBinary/2\fR\&\&. \fIBinaryFormat\fR\& and \fIBinary\fR\& must be those returned by a previous call to \fIgl:getProgramBinary/2\fR\&, and \fILength\fR\& must be the length returned by \fIgl:getProgramBinary/2\fR\&, or by \fIgl:getProgram()\fR\& when called with \fIPname\fR\& set to \fI?GL_PROGRAM_BINARY_LENGTH\fR\&\&. If these conditions are not met, loading the program binary will fail and \fIProgram\fR\&\&'s \fI?GL_LINK_STATUS\fR\& will be set to \fI?GL_FALSE\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
programParameteri(Program :: i(), Pname :: enum(), Value :: i()) ->
.B
                     ok
.br
.fi
.br
.RS
.LP
\fIgl:programParameter()\fR\& specifies a new value for the parameter nameed by \fIPname\fR\& for the program object \fIProgram\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
programUniform1d(Program :: i(), Location :: i(), V0 :: f()) -> ok
.br
.fi
.br
.nf

.B
programUniform1dv(Program :: i(), Location :: i(), Value :: [f()]) ->
.B
                     ok
.br
.fi
.br
.nf

.B
programUniform1f(Program :: i(), Location :: i(), V0 :: f()) -> ok
.br
.fi
.br
.nf

.B
programUniform1fv(Program :: i(), Location :: i(), Value :: [f()]) ->
.B
                     ok
.br
.fi
.br
.nf

.B
programUniform1i(Program :: i(), Location :: i(), V0 :: i()) -> ok
.br
.fi
.br
.nf

.B
programUniform1iv(Program :: i(), Location :: i(), Value :: [i()]) ->
.B
                     ok
.br
.fi
.br
.nf

.B
programUniform1ui(Program :: i(), Location :: i(), V0 :: i()) ->
.B
                     ok
.br
.fi
.br
.nf

.B
programUniform1uiv(Program :: i(),
.B
                   Location :: i(),
.B
                   Value :: [i()]) ->
.B
                      ok
.br
.fi
.br
.nf

.B
programUniform2d(Program :: i(),
.B
                 Location :: i(),
.B
                 V0 :: f(),
.B
                 V1 :: f()) ->
.B
                    ok
.br
.fi
.br
.nf

.B
programUniform2dv(Program :: i(),
.B
                  Location :: i(),
.B
                  Value :: [{f(), f()}]) ->
.B
                     ok
.br
.fi
.br
.nf

.B
programUniform2f(Program :: i(),
.B
                 Location :: i(),
.B
                 V0 :: f(),
.B
                 V1 :: f()) ->
.B
                    ok
.br
.fi
.br
.nf

.B
programUniform2fv(Program :: i(),
.B
                  Location :: i(),
.B
                  Value :: [{f(), f()}]) ->
.B
                     ok
.br
.fi
.br
.nf

.B
programUniform2i(Program :: i(),
.B
                 Location :: i(),
.B
                 V0 :: i(),
.B
                 V1 :: i()) ->
.B
                    ok
.br
.fi
.br
.nf

.B
programUniform2iv(Program :: i(),
.B
                  Location :: i(),
.B
                  Value :: [{i(), i()}]) ->
.B
                     ok
.br
.fi
.br
.nf

.B
programUniform2ui(Program :: i(),
.B
                  Location :: i(),
.B
                  V0 :: i(),
.B
                  V1 :: i()) ->
.B
                     ok
.br
.fi
.br
.nf

.B
programUniform2uiv(Program :: i(),
.B
                   Location :: i(),
.B
                   Value :: [{i(), i()}]) ->
.B
                      ok
.br
.fi
.br
.nf

.B
programUniform3d(Program :: i(),
.B
                 Location :: i(),
.B
                 V0 :: f(),
.B
                 V1 :: f(),
.B
                 V2 :: f()) ->
.B
                    ok
.br
.fi
.br
.nf

.B
programUniform3dv(Program :: i(),
.B
                  Location :: i(),
.B
                  Value :: [{f(), f(), f()}]) ->
.B
                     ok
.br
.fi
.br
.nf

.B
programUniform3f(Program :: i(),
.B
                 Location :: i(),
.B
                 V0 :: f(),
.B
                 V1 :: f(),
.B
                 V2 :: f()) ->
.B
                    ok
.br
.fi
.br
.nf

.B
programUniform3fv(Program :: i(),
.B
                  Location :: i(),
.B
                  Value :: [{f(), f(), f()}]) ->
.B
                     ok
.br
.fi
.br
.nf

.B
programUniform3i(Program :: i(),
.B
                 Location :: i(),
.B
                 V0 :: i(),
.B
                 V1 :: i(),
.B
                 V2 :: i()) ->
.B
                    ok
.br
.fi
.br
.nf

.B
programUniform3iv(Program :: i(),
.B
                  Location :: i(),
.B
                  Value :: [{i(), i(), i()}]) ->
.B
                     ok
.br
.fi
.br
.nf

.B
programUniform3ui(Program :: i(),
.B
                  Location :: i(),
.B
                  V0 :: i(),
.B
                  V1 :: i(),
.B
                  V2 :: i()) ->
.B
                     ok
.br
.fi
.br
.nf

.B
programUniform3uiv(Program :: i(),
.B
                   Location :: i(),
.B
                   Value :: [{i(), i(), i()}]) ->
.B
                      ok
.br
.fi
.br
.nf

.B
programUniform4d(Program :: i(),
.B
                 Location :: i(),
.B
                 V0 :: f(),
.B
                 V1 :: f(),
.B
                 V2 :: f(),
.B
                 V3 :: f()) ->
.B
                    ok
.br
.fi
.br
.nf

.B
programUniform4dv(Program :: i(),
.B
                  Location :: i(),
.B
                  Value :: [{f(), f(), f(), f()}]) ->
.B
                     ok
.br
.fi
.br
.nf

.B
programUniform4f(Program :: i(),
.B
                 Location :: i(),
.B
                 V0 :: f(),
.B
                 V1 :: f(),
.B
                 V2 :: f(),
.B
                 V3 :: f()) ->
.B
                    ok
.br
.fi
.br
.nf

.B
programUniform4fv(Program :: i(),
.B
                  Location :: i(),
.B
                  Value :: [{f(), f(), f(), f()}]) ->
.B
                     ok
.br
.fi
.br
.nf

.B
programUniform4i(Program :: i(),
.B
                 Location :: i(),
.B
                 V0 :: i(),
.B
                 V1 :: i(),
.B
                 V2 :: i(),
.B
                 V3 :: i()) ->
.B
                    ok
.br
.fi
.br
.nf

.B
programUniform4iv(Program :: i(),
.B
                  Location :: i(),
.B
                  Value :: [{i(), i(), i(), i()}]) ->
.B
                     ok
.br
.fi
.br
.nf

.B
programUniform4ui(Program :: i(),
.B
                  Location :: i(),
.B
                  V0 :: i(),
.B
                  V1 :: i(),
.B
                  V2 :: i(),
.B
                  V3 :: i()) ->
.B
                     ok
.br
.fi
.br
.nf

.B
programUniform4uiv(Program :: i(),
.B
                   Location :: i(),
.B
                   Value :: [{i(), i(), i(), i()}]) ->
.B
                      ok
.br
.fi
.br
.nf

.B
programUniformMatrix2dv(Program :: i(),
.B
                        Location :: i(),
.B
                        Transpose :: 0 | 1,
.B
                        Value :: [{f(), f(), f(), f()}]) ->
.B
                           ok
.br
.fi
.br
.nf

.B
programUniformMatrix2fv(Program :: i(),
.B
                        Location :: i(),
.B
                        Transpose :: 0 | 1,
.B
                        Value :: [{f(), f(), f(), f()}]) ->
.B
                           ok
.br
.fi
.br
.nf

.B
programUniformMatrix2x3dv(Program :: i(),
.B
                          Location :: i(),
.B
                          Transpose :: 0 | 1,
.B
                          Value ::
.B
                              [{f(), f(), f(), f(), f(), f()}]) ->
.B
                             ok
.br
.fi
.br
.nf

.B
programUniformMatrix2x3fv(Program :: i(),
.B
                          Location :: i(),
.B
                          Transpose :: 0 | 1,
.B
                          Value ::
.B
                              [{f(), f(), f(), f(), f(), f()}]) ->
.B
                             ok
.br
.fi
.br
.nf

.B
programUniformMatrix2x4dv(Program, Location, Transpose, Value) ->
.B
                             ok
.br
.fi
.br
.nf

.B
programUniformMatrix2x4fv(Program, Location, Transpose, Value) ->
.B
                             ok
.br
.fi
.br
.nf

.B
programUniformMatrix3dv(Program, Location, Transpose, Value) -> ok
.br
.fi
.br
.nf

.B
programUniformMatrix3fv(Program, Location, Transpose, Value) -> ok
.br
.fi
.br
.nf

.B
programUniformMatrix3x2dv(Program :: i(),
.B
                          Location :: i(),
.B
                          Transpose :: 0 | 1,
.B
                          Value ::
.B
                              [{f(), f(), f(), f(), f(), f()}]) ->
.B
                             ok
.br
.fi
.br
.nf

.B
programUniformMatrix3x2fv(Program :: i(),
.B
                          Location :: i(),
.B
                          Transpose :: 0 | 1,
.B
                          Value ::
.B
                              [{f(), f(), f(), f(), f(), f()}]) ->
.B
                             ok
.br
.fi
.br
.nf

.B
programUniformMatrix3x4dv(Program, Location, Transpose, Value) ->
.B
                             ok
.br
.fi
.br
.nf

.B
programUniformMatrix3x4fv(Program, Location, Transpose, Value) ->
.B
                             ok
.br
.fi
.br
.nf

.B
programUniformMatrix4dv(Program, Location, Transpose, Value) -> ok
.br
.fi
.br
.nf

.B
programUniformMatrix4fv(Program, Location, Transpose, Value) -> ok
.br
.fi
.br
.nf

.B
programUniformMatrix4x2dv(Program, Location, Transpose, Value) ->
.B
                             ok
.br
.fi
.br
.nf

.B
programUniformMatrix4x2fv(Program, Location, Transpose, Value) ->
.B
                             ok
.br
.fi
.br
.nf

.B
programUniformMatrix4x3dv(Program, Location, Transpose, Value) ->
.B
                             ok
.br
.fi
.br
.nf

.B
programUniformMatrix4x3fv(Program, Location, Transpose, Value) ->
.B
                             ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Program = Location = i()
.br
Transpose = 0 | 1
.br
Value = 
.br
    [{f(), f(), f(), f(), f(), f(), f(), f(), f(), f(), f(), f()}]
.br
.RE
.RE
.RS
.LP
\fIgl:programUniform()\fR\& modifies the value of a uniform variable or a uniform variable array\&. The location of the uniform variable to be modified is specified by \fILocation\fR\&, which should be a value returned by \fIgl:getUniformLocation/2\fR\&\&. \fIgl:programUniform()\fR\& operates on the program object specified by \fIProgram\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
provokingVertex(Mode :: enum()) -> ok
.br
.fi
.br
.RS
.LP
\fIFlatshading\fR\& a vertex shader varying output means to assign all vetices of the primitive the same value for that output\&. The vertex from which these values is derived is known as the \fIprovoking vertex\fR\& and \fIgl:provokingVertex/1\fR\& specifies which vertex is to be used as the source of data for flat shaded varyings\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
popAttrib() -> ok
.br
.fi
.br
.nf

.B
pushAttrib(Mask :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:pushAttrib/1\fR\& takes one argument, a mask that indicates which groups of state variables to save on the attribute stack\&. Symbolic constants are used to set bits in the mask\&. \fIMask\fR\& is typically constructed by specifying the bitwise-or of several of these constants together\&. The special mask \fI?GL_ALL_ATTRIB_BITS\fR\& can be used to save all stackable states\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
popClientAttrib() -> ok
.br
.fi
.br
.nf

.B
pushClientAttrib(Mask :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:pushClientAttrib/1\fR\& takes one argument, a mask that indicates which groups of client-state variables to save on the client attribute stack\&. Symbolic constants are used to set bits in the mask\&. \fIMask\fR\& is typically constructed by specifying the bitwise-or of several of these constants together\&. The special mask \fI?GL_CLIENT_ALL_ATTRIB_BITS\fR\& can be used to save all stackable client state\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
popDebugGroup() -> ok
.br
.fi
.br
.nf

.B
pushDebugGroup(Source :: enum(),
.B
               Id :: i(),
.B
               Length :: i(),
.B
               Message :: string()) ->
.B
                  ok
.br
.fi
.br
.RS
.LP
\fIgl:pushDebugGroup/4\fR\& pushes a debug group described by the string \fIMessage\fR\& into the command stream\&. The value of \fIId\fR\& specifies the ID of messages generated\&. The parameter \fILength\fR\& contains the number of characters in \fIMessage\fR\&\&. If \fILength\fR\& is negative, it is implied that \fIMessage\fR\& contains a null terminated string\&. The message has the specified \fISource\fR\& and \fIId\fR\&, the \fIType\fR\&\fI?GL_DEBUG_TYPE_PUSH_GROUP\fR\&, and \fISeverity\fR\&\fI?GL_DEBUG_SEVERITY_NOTIFICATION\fR\&\&. The GL will put a new debug group on top of the debug group stack which inherits the control of the volume of debug output of the debug group previously residing on the top of the debug group stack\&. Because debug groups are strictly hierarchical, any additional control of the debug output volume will only apply within the active debug group and the debug groups pushed on top of the active debug group\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
popMatrix() -> ok
.br
.fi
.br
.nf

.B
pushMatrix() -> ok
.br
.fi
.br
.RS
.LP
There is a stack of matrices for each of the matrix modes\&. In \fI?GL_MODELVIEW\fR\& mode, the stack depth is at least 32\&. In the other modes, \fI?GL_COLOR\fR\&, \fI?GL_PROJECTION\fR\&, and \fI?GL_TEXTURE\fR\&, the depth is at least 2\&. The current matrix in any mode is the matrix on the top of the stack for that mode\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
popName() -> ok
.br
.fi
.br
.nf

.B
pushName(Name :: i()) -> ok
.br
.fi
.br
.RS
.LP
The name stack is used during selection mode to allow sets of rendering commands to be uniquely identified\&. It consists of an ordered set of unsigned integers and is initially empty\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
queryCounter(Id :: i(), Target :: enum()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:queryCounter/2\fR\& causes the GL to record the current time into the query object named \fIId\fR\&\&. \fITarget\fR\& must be \fI?GL_TIMESTAMP\fR\&\&. The time is recorded after all previous commands on the GL client and server state and the framebuffer have been fully realized\&. When the time is recorded, the query result for that object is marked available\&. \fIgl:queryCounter/2\fR\& timer queries can be used within a \fIgl:beginQuery/2\fR\& / \fIgl:endQuery/1\fR\& block where the target is \fI?GL_TIME_ELAPSED\fR\& and it does not affect the result of that query object\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
rasterPos2d(X :: f(), Y :: f()) -> ok
.br
.fi
.br
.nf

.B
rasterPos2dv(X1 :: {X :: f(), Y :: f()}) -> ok
.br
.fi
.br
.nf

.B
rasterPos2f(X :: f(), Y :: f()) -> ok
.br
.fi
.br
.nf

.B
rasterPos2fv(X1 :: {X :: f(), Y :: f()}) -> ok
.br
.fi
.br
.nf

.B
rasterPos2i(X :: i(), Y :: i()) -> ok
.br
.fi
.br
.nf

.B
rasterPos2iv(X1 :: {X :: i(), Y :: i()}) -> ok
.br
.fi
.br
.nf

.B
rasterPos2s(X :: i(), Y :: i()) -> ok
.br
.fi
.br
.nf

.B
rasterPos2sv(X1 :: {X :: i(), Y :: i()}) -> ok
.br
.fi
.br
.nf

.B
rasterPos3d(X :: f(), Y :: f(), Z :: f()) -> ok
.br
.fi
.br
.nf

.B
rasterPos3dv(X1 :: {X :: f(), Y :: f(), Z :: f()}) -> ok
.br
.fi
.br
.nf

.B
rasterPos3f(X :: f(), Y :: f(), Z :: f()) -> ok
.br
.fi
.br
.nf

.B
rasterPos3fv(X1 :: {X :: f(), Y :: f(), Z :: f()}) -> ok
.br
.fi
.br
.nf

.B
rasterPos3i(X :: i(), Y :: i(), Z :: i()) -> ok
.br
.fi
.br
.nf

.B
rasterPos3iv(X1 :: {X :: i(), Y :: i(), Z :: i()}) -> ok
.br
.fi
.br
.nf

.B
rasterPos3s(X :: i(), Y :: i(), Z :: i()) -> ok
.br
.fi
.br
.nf

.B
rasterPos3sv(X1 :: {X :: i(), Y :: i(), Z :: i()}) -> ok
.br
.fi
.br
.nf

.B
rasterPos4d(X :: f(), Y :: f(), Z :: f(), W :: f()) -> ok
.br
.fi
.br
.nf

.B
rasterPos4dv(X1 :: {X :: f(), Y :: f(), Z :: f(), W :: f()}) -> ok
.br
.fi
.br
.nf

.B
rasterPos4f(X :: f(), Y :: f(), Z :: f(), W :: f()) -> ok
.br
.fi
.br
.nf

.B
rasterPos4fv(X1 :: {X :: f(), Y :: f(), Z :: f(), W :: f()}) -> ok
.br
.fi
.br
.nf

.B
rasterPos4i(X :: i(), Y :: i(), Z :: i(), W :: i()) -> ok
.br
.fi
.br
.nf

.B
rasterPos4iv(X1 :: {X :: i(), Y :: i(), Z :: i(), W :: i()}) -> ok
.br
.fi
.br
.nf

.B
rasterPos4s(X :: i(), Y :: i(), Z :: i(), W :: i()) -> ok
.br
.fi
.br
.nf

.B
rasterPos4sv(X1 :: {X :: i(), Y :: i(), Z :: i(), W :: i()}) -> ok
.br
.fi
.br
.RS
.LP
The GL maintains a 3D position in window coordinates\&. This position, called the raster position, is used to position pixel and bitmap write operations\&. It is maintained with subpixel accuracy\&. See \fIgl:bitmap/7\fR\&, \fIgl:drawPixels/5\fR\&, and \fIgl:copyPixels/5\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
readBuffer(Mode :: enum()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:readBuffer/1\fR\& specifies a color buffer as the source for subsequent \fIgl:readPixels/7\fR\&, \fIgl:copyTexImage1D/7\fR\&, \fIgl:copyTexImage2D/8\fR\&, \fIgl:copyTexSubImage1D/6\fR\&, \fIgl:copyTexSubImage2D/8\fR\&, and \fIgl:copyTexSubImage3D/9\fR\& commands\&. \fIMode\fR\& accepts one of twelve or more predefined values\&. In a fully configured system, \fI?GL_FRONT\fR\&, \fI?GL_LEFT\fR\&, and \fI?GL_FRONT_LEFT\fR\& all name the front left buffer, \fI?GL_FRONT_RIGHT\fR\& and \fI?GL_RIGHT\fR\& name the front right buffer, and \fI?GL_BACK_LEFT\fR\& and \fI?GL_BACK\fR\& name the back left buffer\&. Further more, the constants \fI?GL_COLOR_ATTACHMENT\fR\&\fIi\fR\& may be used to indicate the \fIi\fR\&th color attachment where \fIi\fR\& ranges from zero to the value of \fI?GL_MAX_COLOR_ATTACHMENTS\fR\& minus one\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
readPixels(X, Y, Width, Height, Format, Type, Pixels) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
X = Y = Width = Height = i()
.br
Format = Type = enum()
.br
Pixels = mem()
.br
.RE
.RE
.RS
.LP
\fIgl:readPixels/7\fR\& and \fIglReadnPixels\fR\& return pixel data from the frame buffer, starting with the pixel whose lower left corner is at location (\fIX\fR\&, \fIY\fR\&), into client memory starting at location \fIData\fR\&\&. Several parameters control the processing of the pixel data before it is placed into client memory\&. These parameters are set with \fIgl:pixelStore()\fR\&\&. This reference page describes the effects on \fIgl:readPixels/7\fR\& and \fIglReadnPixels\fR\& of most, but not all of the parameters specified by these three commands\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
rectd(X1 :: f(), Y1 :: f(), X2 :: f(), Y2 :: f()) -> ok
.br
.fi
.br
.nf

.B
rectdv(V1 :: {f(), f()}, V2 :: {f(), f()}) -> ok
.br
.fi
.br
.nf

.B
rectf(X1 :: f(), Y1 :: f(), X2 :: f(), Y2 :: f()) -> ok
.br
.fi
.br
.nf

.B
rectfv(V1 :: {f(), f()}, V2 :: {f(), f()}) -> ok
.br
.fi
.br
.nf

.B
recti(X1 :: i(), Y1 :: i(), X2 :: i(), Y2 :: i()) -> ok
.br
.fi
.br
.nf

.B
rectiv(V1 :: {i(), i()}, V2 :: {i(), i()}) -> ok
.br
.fi
.br
.nf

.B
rects(X1 :: i(), Y1 :: i(), X2 :: i(), Y2 :: i()) -> ok
.br
.fi
.br
.nf

.B
rectsv(V1 :: {i(), i()}, V2 :: {i(), i()}) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:rect()\fR\& supports efficient specification of rectangles as two corner points\&. Each rectangle command takes four arguments, organized either as two consecutive pairs of (x y) coordinates or as two pointers to arrays, each containing an (x y) pair\&. The resulting rectangle is defined in the z=0 plane\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
releaseShaderCompiler() -> ok
.br
.fi
.br
.RS
.LP
\fIgl:releaseShaderCompiler/0\fR\& provides a hint to the implementation that it may free internal resources associated with its shader compiler\&. \fIgl:compileShader/1\fR\& may subsequently be called and the implementation may at that time reallocate resources previously freed by the call to \fIgl:releaseShaderCompiler/0\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
renderMode(Mode :: enum()) -> i()
.br
.fi
.br
.RS
.LP
\fIgl:renderMode/1\fR\& sets the rasterization mode\&. It takes one argument, \fIMode\fR\&, which can assume one of three predefined values:
.LP
External documentation\&.
.RE
.LP
.nf

.B
renderbufferStorage(Target :: enum(),
.B
                    Internalformat :: enum(),
.B
                    Width :: i(),
.B
                    Height :: i()) ->
.B
                       ok
.br
.fi
.br
.RS
.LP
\fIgl:renderbufferStorage/4\fR\& is equivalent to calling \fIgl:renderbufferStorageMultisample/5\fR\& with the \fISamples\fR\& set to zero, and \fIglNamedRenderbufferStorage\fR\& is equivalent to calling \fIglNamedRenderbufferStorageMultisample\fR\& with the samples set to zero\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
renderbufferStorageMultisample(Target :: enum(),
.B
                               Samples :: i(),
.B
                               Internalformat :: enum(),
.B
                               Width :: i(),
.B
                               Height :: i()) ->
.B
                                  ok
.br
.fi
.br
.RS
.LP
\fIgl:renderbufferStorageMultisample/5\fR\& and \fIglNamedRenderbufferStorageMultisample\fR\& establish the data storage, format, dimensions and number of samples of a renderbuffer object\&'s image\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
resetHistogram(Target :: enum()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:resetHistogram/1\fR\& resets all the elements of the current histogram table to zero\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
resetMinmax(Target :: enum()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:resetMinmax/1\fR\& resets the elements of the current minmax table to their initial values: the ``maximum\&'\&' element receives the minimum possible component values, and the ``minimum\&'\&' element receives the maximum possible component values\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
resumeTransformFeedback() -> ok
.br
.fi
.br
.RS
.LP
\fIgl:resumeTransformFeedback/0\fR\& resumes transform feedback operations on the currently active transform feedback object\&. When transform feedback operations are paused, transform feedback is still considered active and changing most transform feedback state related to the object results in an error\&. However, a new transform feedback object may be bound while transform feedback is paused\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
rotated(Angle :: f(), X :: f(), Y :: f(), Z :: f()) -> ok
.br
.fi
.br
.nf

.B
rotatef(Angle :: f(), X :: f(), Y :: f(), Z :: f()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:rotate()\fR\& produces a rotation of \fIAngle\fR\& degrees around the vector (x y z)\&. The current matrix (see \fIgl:matrixMode/1\fR\&) is multiplied by a rotation matrix with the product replacing the current matrix, as if \fIgl:multMatrix()\fR\& were called with the following matrix as its argument:
.LP
External documentation\&.
.RE
.LP
.nf

.B
sampleCoverage(Value :: clamp(), Invert :: 0 | 1) -> ok
.br
.fi
.br
.RS
.LP
Multisampling samples a pixel multiple times at various implementation-dependent subpixel locations to generate antialiasing effects\&. Multisampling transparently antialiases points, lines, polygons, and images if it is enabled\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
sampleMaski(MaskNumber :: i(), Mask :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:sampleMaski/2\fR\& sets one 32-bit sub-word of the multi-word sample mask, \fI?GL_SAMPLE_MASK_VALUE\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
samplerParameterIiv(Sampler :: i(),
.B
                    Pname :: enum(),
.B
                    Param :: [i()]) ->
.B
                       ok
.br
.fi
.br
.nf

.B
samplerParameterIuiv(Sampler :: i(),
.B
                     Pname :: enum(),
.B
                     Param :: [i()]) ->
.B
                        ok
.br
.fi
.br
.nf

.B
samplerParameterf(Sampler :: i(), Pname :: enum(), Param :: f()) ->
.B
                     ok
.br
.fi
.br
.nf

.B
samplerParameterfv(Sampler :: i(),
.B
                   Pname :: enum(),
.B
                   Param :: [f()]) ->
.B
                      ok
.br
.fi
.br
.nf

.B
samplerParameteri(Sampler :: i(), Pname :: enum(), Param :: i()) ->
.B
                     ok
.br
.fi
.br
.nf

.B
samplerParameteriv(Sampler :: i(),
.B
                   Pname :: enum(),
.B
                   Param :: [i()]) ->
.B
                      ok
.br
.fi
.br
.RS
.LP
\fIgl:samplerParameter()\fR\& assigns the value or values in \fIParams\fR\& to the sampler parameter specified as \fIPname\fR\&\&. \fISampler\fR\& specifies the sampler object to be modified, and must be the name of a sampler object previously returned from a call to \fIgl:genSamplers/1\fR\&\&. The following symbols are accepted in \fIPname\fR\&:
.LP
External documentation\&.
.RE
.LP
.nf

.B
scaled(X :: f(), Y :: f(), Z :: f()) -> ok
.br
.fi
.br
.nf

.B
scalef(X :: f(), Y :: f(), Z :: f()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:scale()\fR\& produces a nonuniform scaling along the \fIx\fR\&, \fIy\fR\&, and \fIz\fR\& axes\&. The three parameters indicate the desired scale factor along each of the three axes\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
scissor(X :: i(), Y :: i(), Width :: i(), Height :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:scissor/4\fR\& defines a rectangle, called the scissor box, in window coordinates\&. The first two arguments, \fIX\fR\& and \fIY\fR\&, specify the lower left corner of the box\&. \fIWidth\fR\& and \fIHeight\fR\& specify the width and height of the box\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
scissorArrayv(First :: i(), V :: [{i(), i(), i(), i()}]) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:scissorArrayv/2\fR\& defines rectangles, called scissor boxes, in window coordinates for each viewport\&. \fIFirst\fR\& specifies the index of the first scissor box to modify and \fICount\fR\& specifies the number of scissor boxes to modify\&. \fIFirst\fR\& must be less than the value of \fI?GL_MAX_VIEWPORTS\fR\&, and \fIFirst\fR\& + \fICount\fR\& must be less than or equal to the value of \fI?GL_MAX_VIEWPORTS\fR\&\&. \fIV\fR\& specifies the address of an array containing integers specifying the lower left corner of the scissor boxes, and the width and height of the scissor boxes, in that order\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
scissorIndexed(Index :: i(),
.B
               Left :: i(),
.B
               Bottom :: i(),
.B
               Width :: i(),
.B
               Height :: i()) ->
.B
                  ok
.br
.fi
.br
.nf

.B
scissorIndexedv(Index :: i(), V :: {i(), i(), i(), i()}) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:scissorIndexed/5\fR\& defines the scissor box for a specified viewport\&. \fIIndex\fR\& specifies the index of scissor box to modify\&. \fIIndex\fR\& must be less than the value of \fI?GL_MAX_VIEWPORTS\fR\&\&. For \fIgl:scissorIndexed/5\fR\&, \fILeft\fR\&, \fIBottom\fR\&, \fIWidth\fR\& and \fIHeight\fR\& specify the left, bottom, width and height of the scissor box, in pixels, respectively\&. For \fIgl:scissorIndexedv/2\fR\&, \fIV\fR\& specifies the address of an array containing integers specifying the lower left corner of the scissor box, and the width and height of the scissor box, in that order\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
secondaryColor3b(Red :: i(), Green :: i(), Blue :: i()) -> ok
.br
.fi
.br
.nf

.B
secondaryColor3bv(X1 :: {Red :: i(), Green :: i(), Blue :: i()}) ->
.B
                     ok
.br
.fi
.br
.nf

.B
secondaryColor3d(Red :: f(), Green :: f(), Blue :: f()) -> ok
.br
.fi
.br
.nf

.B
secondaryColor3dv(X1 :: {Red :: f(), Green :: f(), Blue :: f()}) ->
.B
                     ok
.br
.fi
.br
.nf

.B
secondaryColor3f(Red :: f(), Green :: f(), Blue :: f()) -> ok
.br
.fi
.br
.nf

.B
secondaryColor3fv(X1 :: {Red :: f(), Green :: f(), Blue :: f()}) ->
.B
                     ok
.br
.fi
.br
.nf

.B
secondaryColor3i(Red :: i(), Green :: i(), Blue :: i()) -> ok
.br
.fi
.br
.nf

.B
secondaryColor3iv(X1 :: {Red :: i(), Green :: i(), Blue :: i()}) ->
.B
                     ok
.br
.fi
.br
.nf

.B
secondaryColor3s(Red :: i(), Green :: i(), Blue :: i()) -> ok
.br
.fi
.br
.nf

.B
secondaryColor3sv(X1 :: {Red :: i(), Green :: i(), Blue :: i()}) ->
.B
                     ok
.br
.fi
.br
.nf

.B
secondaryColor3ub(Red :: i(), Green :: i(), Blue :: i()) -> ok
.br
.fi
.br
.nf

.B
secondaryColor3ubv(X1 :: {Red :: i(), Green :: i(), Blue :: i()}) ->
.B
                      ok
.br
.fi
.br
.nf

.B
secondaryColor3ui(Red :: i(), Green :: i(), Blue :: i()) -> ok
.br
.fi
.br
.nf

.B
secondaryColor3uiv(X1 :: {Red :: i(), Green :: i(), Blue :: i()}) ->
.B
                      ok
.br
.fi
.br
.nf

.B
secondaryColor3us(Red :: i(), Green :: i(), Blue :: i()) -> ok
.br
.fi
.br
.nf

.B
secondaryColor3usv(X1 :: {Red :: i(), Green :: i(), Blue :: i()}) ->
.B
                      ok
.br
.fi
.br
.RS
.LP
The GL stores both a primary four-valued RGBA color and a secondary four-valued RGBA color (where alpha is always set to 0\&.0) that is associated with every vertex\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
secondaryColorPointer(Size :: i(),
.B
                      Type :: enum(),
.B
                      Stride :: i(),
.B
                      Pointer :: offset() | mem()) ->
.B
                         ok
.br
.fi
.br
.RS
.LP
\fIgl:secondaryColorPointer/4\fR\& specifies the location and data format of an array of color components to use when rendering\&. \fISize\fR\& specifies the number of components per color, and must be 3\&. \fIType\fR\& specifies the data type of each color component, and \fIStride\fR\& specifies the byte stride from one color to the next, allowing vertices and attributes to be packed into a single array or stored in separate arrays\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
selectBuffer(Size :: i(), Buffer :: mem()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:selectBuffer/2\fR\& has two arguments: \fIBuffer\fR\& is a pointer to an array of unsigned integers, and \fISize\fR\& indicates the size of the array\&. \fIBuffer\fR\& returns values from the name stack (see \fIgl:initNames/0\fR\&, \fIgl:loadName/1\fR\&, \fIgl:pushName/1\fR\&) when the rendering mode is \fI?GL_SELECT\fR\& (see \fIgl:renderMode/1\fR\&)\&. \fIgl:selectBuffer/2\fR\& must be issued before selection mode is enabled, and it must not be issued while the rendering mode is \fI?GL_SELECT\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
separableFilter2D(Target, Internalformat, Width, Height, Format,
.B
                  Type, Row, Column) ->
.B
                     ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Target = Internalformat = enum()
.br
Width = Height = i()
.br
Format = Type = enum()
.br
Row = Column = offset() | mem()
.br
.RE
.RE
.RS
.LP
\fIgl:separableFilter2D/8\fR\& builds a two-dimensional separable convolution filter kernel from two arrays of pixels\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
shadeModel(Mode :: enum()) -> ok
.br
.fi
.br
.RS
.LP
GL primitives can have either flat or smooth shading\&. Smooth shading, the default, causes the computed colors of vertices to be interpolated as the primitive is rasterized, typically assigning different colors to each resulting pixel fragment\&. Flat shading selects the computed color of just one vertex and assigns it to all the pixel fragments generated by rasterizing a single primitive\&. In either case, the computed color of a vertex is the result of lighting if lighting is enabled, or it is the current color at the time the vertex was specified if lighting is disabled\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
shaderBinary(Shaders :: [i()],
.B
             Binaryformat :: enum(),
.B
             Binary :: binary()) ->
.B
                ok
.br
.fi
.br
.RS
.LP
\fIgl:shaderBinary/3\fR\& loads pre-compiled shader binary code into the \fICount\fR\& shader objects whose handles are given in \fIShaders\fR\&\&. \fIBinary\fR\& points to \fILength\fR\& bytes of binary shader code stored in client memory\&. \fIBinaryFormat\fR\& specifies the format of the pre-compiled code\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
shaderSource(Shader :: i(), String :: [unicode:chardata()]) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:shaderSource/2\fR\& sets the source code in \fIShader\fR\& to the source code in the array of strings specified by \fIString\fR\&\&. Any source code previously stored in the shader object is completely replaced\&. The number of strings in the array is specified by \fICount\fR\&\&. If \fILength\fR\& is \fI?NULL\fR\&, each string is assumed to be null terminated\&. If \fILength\fR\& is a value other than \fI?NULL\fR\&, it points to an array containing a string length for each of the corresponding elements of \fIString\fR\&\&. Each element in the \fILength\fR\& array may contain the length of the corresponding string (the null character is not counted as part of the string length) or a value less than 0 to indicate that the string is null terminated\&. The source code strings are not scanned or parsed at this time; they are simply copied into the specified shader object\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
shaderStorageBlockBinding(Program :: i(),
.B
                          StorageBlockIndex :: i(),
.B
                          StorageBlockBinding :: i()) ->
.B
                             ok
.br
.fi
.br
.RS
.LP
\fIgl:shaderStorageBlockBinding/3\fR\&, changes the active shader storage block with an assigned index of \fIStorageBlockIndex\fR\& in program object \fIProgram\fR\&\&. \fIStorageBlockIndex\fR\& must be an active shader storage block index in \fIProgram\fR\&\&. \fIStorageBlockBinding\fR\& must be less than the value of \fI?GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS\fR\&\&. If successful, \fIgl:shaderStorageBlockBinding/3\fR\& specifies that \fIProgram\fR\& will use the data store of the buffer object bound to the binding point \fIStorageBlockBinding\fR\& to read and write the values of the buffer variables in the shader storage block identified by \fIStorageBlockIndex\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
stencilFunc(Func :: enum(), Ref :: i(), Mask :: i()) -> ok
.br
.fi
.br
.RS
.LP
Stenciling, like depth-buffering, enables and disables drawing on a per-pixel basis\&. Stencil planes are first drawn into using GL drawing primitives, then geometry and images are rendered using the stencil planes to mask out portions of the screen\&. Stenciling is typically used in multipass rendering algorithms to achieve special effects, such as decals, outlining, and constructive solid geometry rendering\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
stencilFuncSeparate(Face :: enum(),
.B
                    Func :: enum(),
.B
                    Ref :: i(),
.B
                    Mask :: i()) ->
.B
                       ok
.br
.fi
.br
.RS
.LP
Stenciling, like depth-buffering, enables and disables drawing on a per-pixel basis\&. You draw into the stencil planes using GL drawing primitives, then render geometry and images, using the stencil planes to mask out portions of the screen\&. Stenciling is typically used in multipass rendering algorithms to achieve special effects, such as decals, outlining, and constructive solid geometry rendering\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
stencilMask(Mask :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:stencilMask/1\fR\& controls the writing of individual bits in the stencil planes\&. The least significant n bits of \fIMask\fR\&, where n is the number of bits in the stencil buffer, specify a mask\&. Where a 1 appears in the mask, it\&'s possible to write to the corresponding bit in the stencil buffer\&. Where a 0 appears, the corresponding bit is write-protected\&. Initially, all bits are enabled for writing\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
stencilMaskSeparate(Face :: enum(), Mask :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:stencilMaskSeparate/2\fR\& controls the writing of individual bits in the stencil planes\&. The least significant n bits of \fIMask\fR\&, where n is the number of bits in the stencil buffer, specify a mask\&. Where a 1 appears in the mask, it\&'s possible to write to the corresponding bit in the stencil buffer\&. Where a 0 appears, the corresponding bit is write-protected\&. Initially, all bits are enabled for writing\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
stencilOp(Fail :: enum(), Zfail :: enum(), Zpass :: enum()) -> ok
.br
.fi
.br
.RS
.LP
Stenciling, like depth-buffering, enables and disables drawing on a per-pixel basis\&. You draw into the stencil planes using GL drawing primitives, then render geometry and images, using the stencil planes to mask out portions of the screen\&. Stenciling is typically used in multipass rendering algorithms to achieve special effects, such as decals, outlining, and constructive solid geometry rendering\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
stencilOpSeparate(Face :: enum(),
.B
                  Sfail :: enum(),
.B
                  Dpfail :: enum(),
.B
                  Dppass :: enum()) ->
.B
                     ok
.br
.fi
.br
.RS
.LP
Stenciling, like depth-buffering, enables and disables drawing on a per-pixel basis\&. You draw into the stencil planes using GL drawing primitives, then render geometry and images, using the stencil planes to mask out portions of the screen\&. Stenciling is typically used in multipass rendering algorithms to achieve special effects, such as decals, outlining, and constructive solid geometry rendering\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
texBuffer(Target :: enum(),
.B
          Internalformat :: enum(),
.B
          Buffer :: i()) ->
.B
             ok
.br
.fi
.br
.nf

.B
textureBuffer(Texture :: i(),
.B
              Internalformat :: enum(),
.B
              Buffer :: i()) ->
.B
                 ok
.br
.fi
.br
.RS
.LP
\fIgl:texBuffer/3\fR\& and \fIgl:textureBuffer/3\fR\& attaches the data store of a specified buffer object to a specified texture object, and specify the storage format for the texture image found in the buffer object\&. The texture object must be a buffer texture\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
texBufferRange(Target :: enum(),
.B
               Internalformat :: enum(),
.B
               Buffer :: i(),
.B
               Offset :: i(),
.B
               Size :: i()) ->
.B
                  ok
.br
.fi
.br
.nf

.B
textureBufferRange(Texture :: i(),
.B
                   Internalformat :: enum(),
.B
                   Buffer :: i(),
.B
                   Offset :: i(),
.B
                   Size :: i()) ->
.B
                      ok
.br
.fi
.br
.RS
.LP
\fIgl:texBufferRange/5\fR\& and \fIgl:textureBufferRange/5\fR\& attach a range of the data store of a specified buffer object to a specified texture object, and specify the storage format for the texture image found in the buffer object\&. The texture object must be a buffer texture\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
texCoord1d(S :: f()) -> ok
.br
.fi
.br
.nf

.B
texCoord1dv(X1 :: {S :: f()}) -> ok
.br
.fi
.br
.nf

.B
texCoord1f(S :: f()) -> ok
.br
.fi
.br
.nf

.B
texCoord1fv(X1 :: {S :: f()}) -> ok
.br
.fi
.br
.nf

.B
texCoord1i(S :: i()) -> ok
.br
.fi
.br
.nf

.B
texCoord1iv(X1 :: {S :: i()}) -> ok
.br
.fi
.br
.nf

.B
texCoord1s(S :: i()) -> ok
.br
.fi
.br
.nf

.B
texCoord1sv(X1 :: {S :: i()}) -> ok
.br
.fi
.br
.nf

.B
texCoord2d(S :: f(), T :: f()) -> ok
.br
.fi
.br
.nf

.B
texCoord2dv(X1 :: {S :: f(), T :: f()}) -> ok
.br
.fi
.br
.nf

.B
texCoord2f(S :: f(), T :: f()) -> ok
.br
.fi
.br
.nf

.B
texCoord2fv(X1 :: {S :: f(), T :: f()}) -> ok
.br
.fi
.br
.nf

.B
texCoord2i(S :: i(), T :: i()) -> ok
.br
.fi
.br
.nf

.B
texCoord2iv(X1 :: {S :: i(), T :: i()}) -> ok
.br
.fi
.br
.nf

.B
texCoord2s(S :: i(), T :: i()) -> ok
.br
.fi
.br
.nf

.B
texCoord2sv(X1 :: {S :: i(), T :: i()}) -> ok
.br
.fi
.br
.nf

.B
texCoord3d(S :: f(), T :: f(), R :: f()) -> ok
.br
.fi
.br
.nf

.B
texCoord3dv(X1 :: {S :: f(), T :: f(), R :: f()}) -> ok
.br
.fi
.br
.nf

.B
texCoord3f(S :: f(), T :: f(), R :: f()) -> ok
.br
.fi
.br
.nf

.B
texCoord3fv(X1 :: {S :: f(), T :: f(), R :: f()}) -> ok
.br
.fi
.br
.nf

.B
texCoord3i(S :: i(), T :: i(), R :: i()) -> ok
.br
.fi
.br
.nf

.B
texCoord3iv(X1 :: {S :: i(), T :: i(), R :: i()}) -> ok
.br
.fi
.br
.nf

.B
texCoord3s(S :: i(), T :: i(), R :: i()) -> ok
.br
.fi
.br
.nf

.B
texCoord3sv(X1 :: {S :: i(), T :: i(), R :: i()}) -> ok
.br
.fi
.br
.nf

.B
texCoord4d(S :: f(), T :: f(), R :: f(), Q :: f()) -> ok
.br
.fi
.br
.nf

.B
texCoord4dv(X1 :: {S :: f(), T :: f(), R :: f(), Q :: f()}) -> ok
.br
.fi
.br
.nf

.B
texCoord4f(S :: f(), T :: f(), R :: f(), Q :: f()) -> ok
.br
.fi
.br
.nf

.B
texCoord4fv(X1 :: {S :: f(), T :: f(), R :: f(), Q :: f()}) -> ok
.br
.fi
.br
.nf

.B
texCoord4i(S :: i(), T :: i(), R :: i(), Q :: i()) -> ok
.br
.fi
.br
.nf

.B
texCoord4iv(X1 :: {S :: i(), T :: i(), R :: i(), Q :: i()}) -> ok
.br
.fi
.br
.nf

.B
texCoord4s(S :: i(), T :: i(), R :: i(), Q :: i()) -> ok
.br
.fi
.br
.nf

.B
texCoord4sv(X1 :: {S :: i(), T :: i(), R :: i(), Q :: i()}) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:texCoord()\fR\& specifies texture coordinates in one, two, three, or four dimensions\&. \fIgl:texCoord1()\fR\& sets the current texture coordinates to (s 0 0 1); a call to \fIgl:texCoord2()\fR\& sets them to (s t 0 1)\&. Similarly, \fIgl:texCoord3()\fR\& specifies the texture coordinates as (s t r 1), and \fIgl:texCoord4()\fR\& defines all four components explicitly as (s t r q)\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
texCoordPointer(Size :: i(),
.B
                Type :: enum(),
.B
                Stride :: i(),
.B
                Ptr :: offset() | mem()) ->
.B
                   ok
.br
.fi
.br
.RS
.LP
\fIgl:texCoordPointer/4\fR\& specifies the location and data format of an array of texture coordinates to use when rendering\&. \fISize\fR\& specifies the number of coordinates per texture coordinate set, and must be 1, 2, 3, or 4\&. \fIType\fR\& specifies the data type of each texture coordinate, and \fIStride\fR\& specifies the byte stride from one texture coordinate set to the next, allowing vertices and attributes to be packed into a single array or stored in separate arrays\&. (Single-array storage may be more efficient on some implementations; see \fIgl:interleavedArrays/3\fR\&\&.)
.LP
External documentation\&.
.RE
.LP
.nf

.B
texEnvf(Target :: enum(), Pname :: enum(), Param :: f()) -> ok
.br
.fi
.br
.nf

.B
texEnvfv(Target :: enum(), Pname :: enum(), Params :: tuple()) ->
.B
            ok
.br
.fi
.br
.nf

.B
texEnvi(Target :: enum(), Pname :: enum(), Param :: i()) -> ok
.br
.fi
.br
.nf

.B
texEnviv(Target :: enum(), Pname :: enum(), Params :: tuple()) ->
.B
            ok
.br
.fi
.br
.RS
.LP
A texture environment specifies how texture values are interpreted when a fragment is textured\&. When \fITarget\fR\& is \fI?GL_TEXTURE_FILTER_CONTROL\fR\&, \fIPname\fR\& must be \fI?GL_TEXTURE_LOD_BIAS\fR\&\&. When \fITarget\fR\& is \fI?GL_TEXTURE_ENV\fR\&, \fIPname\fR\& can be \fI?GL_TEXTURE_ENV_MODE\fR\&, \fI?GL_TEXTURE_ENV_COLOR\fR\&, \fI?GL_COMBINE_RGB\fR\&, \fI?GL_COMBINE_ALPHA\fR\&, \fI?GL_RGB_SCALE\fR\&, \fI?GL_ALPHA_SCALE\fR\&, \fI?GL_SRC0_RGB\fR\&, \fI?GL_SRC1_RGB\fR\&, \fI?GL_SRC2_RGB\fR\&, \fI?GL_SRC0_ALPHA\fR\&, \fI?GL_SRC1_ALPHA\fR\&, or \fI?GL_SRC2_ALPHA\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
texGend(Coord :: enum(), Pname :: enum(), Param :: f()) -> ok
.br
.fi
.br
.nf

.B
texGendv(Coord :: enum(), Pname :: enum(), Params :: tuple()) ->
.B
            ok
.br
.fi
.br
.nf

.B
texGenf(Coord :: enum(), Pname :: enum(), Param :: f()) -> ok
.br
.fi
.br
.nf

.B
texGenfv(Coord :: enum(), Pname :: enum(), Params :: tuple()) ->
.B
            ok
.br
.fi
.br
.nf

.B
texGeni(Coord :: enum(), Pname :: enum(), Param :: i()) -> ok
.br
.fi
.br
.nf

.B
texGeniv(Coord :: enum(), Pname :: enum(), Params :: tuple()) ->
.B
            ok
.br
.fi
.br
.RS
.LP
\fIgl:texGen()\fR\& selects a texture-coordinate generation function or supplies coefficients for one of the functions\&. \fICoord\fR\& names one of the (\fIs\fR\&, \fIt\fR\&, \fIr\fR\&, \fIq\fR\&) texture coordinates; it must be one of the symbols \fI?GL_S\fR\&, \fI?GL_T\fR\&, \fI?GL_R\fR\&, or \fI?GL_Q\fR\&\&. \fIPname\fR\& must be one of three symbolic constants: \fI?GL_TEXTURE_GEN_MODE\fR\&, \fI?GL_OBJECT_PLANE\fR\&, or \fI?GL_EYE_PLANE\fR\&\&. If \fIPname\fR\& is \fI?GL_TEXTURE_GEN_MODE\fR\&, then \fIParams\fR\& chooses a mode, one of \fI?GL_OBJECT_LINEAR\fR\&, \fI?GL_EYE_LINEAR\fR\&, \fI?GL_SPHERE_MAP\fR\&, \fI?GL_NORMAL_MAP\fR\&, or \fI?GL_REFLECTION_MAP\fR\&\&. If \fIPname\fR\& is either \fI?GL_OBJECT_PLANE\fR\& or \fI?GL_EYE_PLANE\fR\&, \fIParams\fR\& contains coefficients for the corresponding texture generation function\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
texImage1D(Target, Level, InternalFormat, Width, Border, Format,
.B
           Type, Pixels) ->
.B
              ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Target = enum()
.br
Level = InternalFormat = Width = Border = i()
.br
Format = Type = enum()
.br
Pixels = offset() | mem()
.br
.RE
.RE
.RS
.LP
Texturing maps a portion of a specified texture image onto each graphical primitive for which texturing is enabled\&. To enable and disable one-dimensional texturing, call \fIgl:enable/1\fR\& and \fIgl:disable/1\fR\& with argument \fI?GL_TEXTURE_1D\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
texImage2D(Target, Level, InternalFormat, Width, Height, Border,
.B
           Format, Type, Pixels) ->
.B
              ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Target = enum()
.br
Level = InternalFormat = Width = Height = Border = i()
.br
Format = Type = enum()
.br
Pixels = offset() | mem()
.br
.RE
.RE
.RS
.LP
Texturing allows elements of an image array to be read by shaders\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
texImage2DMultisample(Target, Samples, Internalformat, Width,
.B
                      Height, Fixedsamplelocations) ->
.B
                         ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Target = enum()
.br
Samples = i()
.br
Internalformat = enum()
.br
Width = Height = i()
.br
Fixedsamplelocations = 0 | 1
.br
.RE
.RE
.RS
.LP
\fIgl:texImage2DMultisample/6\fR\& establishes the data storage, format, dimensions and number of samples of a multisample texture\&'s image\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
texImage3D(Target, Level, InternalFormat, Width, Height, Depth,
.B
           Border, Format, Type, Pixels) ->
.B
              ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Target = enum()
.br
Level = InternalFormat = Width = Height = Depth = Border = i()
.br
Format = Type = enum()
.br
Pixels = offset() | mem()
.br
.RE
.RE
.RS
.LP
Texturing maps a portion of a specified texture image onto each graphical primitive for which texturing is enabled\&. To enable and disable three-dimensional texturing, call \fIgl:enable/1\fR\& and \fIgl:disable/1\fR\& with argument \fI?GL_TEXTURE_3D\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
texImage3DMultisample(Target, Samples, Internalformat, Width,
.B
                      Height, Depth, Fixedsamplelocations) ->
.B
                         ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Target = enum()
.br
Samples = i()
.br
Internalformat = enum()
.br
Width = Height = Depth = i()
.br
Fixedsamplelocations = 0 | 1
.br
.RE
.RE
.RS
.LP
\fIgl:texImage3DMultisample/7\fR\& establishes the data storage, format, dimensions and number of samples of a multisample texture\&'s image\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
texParameterIiv(Target :: enum(),
.B
                Pname :: enum(),
.B
                Params :: tuple()) ->
.B
                   ok
.br
.fi
.br
.nf

.B
texParameterIuiv(Target :: enum(),
.B
                 Pname :: enum(),
.B
                 Params :: tuple()) ->
.B
                    ok
.br
.fi
.br
.nf

.B
texParameterf(Target :: enum(), Pname :: enum(), Param :: f()) ->
.B
                 ok
.br
.fi
.br
.nf

.B
texParameterfv(Target :: enum(),
.B
               Pname :: enum(),
.B
               Params :: tuple()) ->
.B
                  ok
.br
.fi
.br
.nf

.B
texParameteri(Target :: enum(), Pname :: enum(), Param :: i()) ->
.B
                 ok
.br
.fi
.br
.nf

.B
texParameteriv(Target :: enum(),
.B
               Pname :: enum(),
.B
               Params :: tuple()) ->
.B
                  ok
.br
.fi
.br
.RS
.LP
\fIgl:texParameter()\fR\& and \fIgl:textureParameter()\fR\& assign the value or values in \fIParams\fR\& to the texture parameter specified as \fIPname\fR\&\&. For \fIgl:texParameter()\fR\&, \fITarget\fR\& defines the target texture, either \fI?GL_TEXTURE_1D\fR\&, \fI?GL_TEXTURE_1D_ARRAY\fR\&, \fI?GL_TEXTURE_2D\fR\&, \fI?GL_TEXTURE_2D_ARRAY\fR\&, \fI?GL_TEXTURE_2D_MULTISAMPLE\fR\&, \fI?GL_TEXTURE_2D_MULTISAMPLE_ARRAY\fR\&, \fI?GL_TEXTURE_3D\fR\&, \fI?GL_TEXTURE_CUBE_MAP\fR\&, \fI?GL_TEXTURE_CUBE_MAP_ARRAY\fR\&, or \fI?GL_TEXTURE_RECTANGLE\fR\&\&. The following symbols are accepted in \fIPname\fR\&:
.LP
External documentation\&.
.RE
.LP
.nf

.B
texStorage1D(Target :: enum(),
.B
             Levels :: i(),
.B
             Internalformat :: enum(),
.B
             Width :: i()) ->
.B
                ok
.br
.fi
.br
.RS
.LP
\fIgl:texStorage1D/4\fR\& and \fIgl:textureStorage1D()\fR\& specify the storage requirements for all levels of a one-dimensional texture simultaneously\&. Once a texture is specified with this command, the format and dimensions of all levels become immutable unless it is a proxy texture\&. The contents of the image may still be modified, however, its storage requirements may not change\&. Such a texture is referred to as an \fIimmutable-format\fR\& texture\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
texStorage2D(Target :: enum(),
.B
             Levels :: i(),
.B
             Internalformat :: enum(),
.B
             Width :: i(),
.B
             Height :: i()) ->
.B
                ok
.br
.fi
.br
.RS
.LP
\fIgl:texStorage2D/5\fR\& and \fIgl:textureStorage2D()\fR\& specify the storage requirements for all levels of a two-dimensional texture or one-dimensional texture array simultaneously\&. Once a texture is specified with this command, the format and dimensions of all levels become immutable unless it is a proxy texture\&. The contents of the image may still be modified, however, its storage requirements may not change\&. Such a texture is referred to as an \fIimmutable-format\fR\& texture\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
texStorage2DMultisample(Target, Samples, Internalformat, Width,
.B
                        Height, Fixedsamplelocations) ->
.B
                           ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Target = enum()
.br
Samples = i()
.br
Internalformat = enum()
.br
Width = Height = i()
.br
Fixedsamplelocations = 0 | 1
.br
.RE
.RE
.RS
.LP
\fIgl:texStorage2DMultisample/6\fR\& and \fIgl:textureStorage2DMultisample()\fR\& specify the storage requirements for a two-dimensional multisample texture\&. Once a texture is specified with this command, its format and dimensions become immutable unless it is a proxy texture\&. The contents of the image may still be modified, however, its storage requirements may not change\&. Such a texture is referred to as an \fIimmutable-format\fR\& texture\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
texStorage3D(Target, Levels, Internalformat, Width, Height, Depth) ->
.B
                ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Target = enum()
.br
Levels = i()
.br
Internalformat = enum()
.br
Width = Height = Depth = i()
.br
.RE
.RE
.RS
.LP
\fIgl:texStorage3D/6\fR\& and \fIgl:textureStorage3D()\fR\& specify the storage requirements for all levels of a three-dimensional, two-dimensional array or cube-map array texture simultaneously\&. Once a texture is specified with this command, the format and dimensions of all levels become immutable unless it is a proxy texture\&. The contents of the image may still be modified, however, its storage requirements may not change\&. Such a texture is referred to as an \fIimmutable-format\fR\& texture\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
texStorage3DMultisample(Target, Samples, Internalformat, Width,
.B
                        Height, Depth, Fixedsamplelocations) ->
.B
                           ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Target = enum()
.br
Samples = i()
.br
Internalformat = enum()
.br
Width = Height = Depth = i()
.br
Fixedsamplelocations = 0 | 1
.br
.RE
.RE
.RS
.LP
\fIgl:texStorage3DMultisample/7\fR\& and \fIgl:textureStorage3DMultisample()\fR\& specify the storage requirements for a two-dimensional multisample array texture\&. Once a texture is specified with this command, its format and dimensions become immutable unless it is a proxy texture\&. The contents of the image may still be modified, however, its storage requirements may not change\&. Such a texture is referred to as an \fIimmutable-format\fR\& texture\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
texSubImage1D(Target, Level, Xoffset, Width, Format, Type, Pixels) ->
.B
                 ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Target = enum()
.br
Level = Xoffset = Width = i()
.br
Format = Type = enum()
.br
Pixels = offset() | mem()
.br
.RE
.RE
.RS
.LP
Texturing maps a portion of a specified texture image onto each graphical primitive for which texturing is enabled\&. To enable or disable one-dimensional texturing, call \fIgl:enable/1\fR\& and \fIgl:disable/1\fR\& with argument \fI?GL_TEXTURE_1D\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
texSubImage2D(Target, Level, Xoffset, Yoffset, Width, Height,
.B
              Format, Type, Pixels) ->
.B
                 ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Target = enum()
.br
Level = Xoffset = Yoffset = Width = Height = i()
.br
Format = Type = enum()
.br
Pixels = offset() | mem()
.br
.RE
.RE
.RS
.LP
Texturing maps a portion of a specified texture image onto each graphical primitive for which texturing is enabled\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
texSubImage3D(Target, Level, Xoffset, Yoffset, Zoffset, Width,
.B
              Height, Depth, Format, Type, Pixels) ->
.B
                 ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Target = enum()
.br
Level = Xoffset = Yoffset = Zoffset = Width = Height = Depth = i()
.br
Format = Type = enum()
.br
Pixels = offset() | mem()
.br
.RE
.RE
.RS
.LP
Texturing maps a portion of a specified texture image onto each graphical primitive for which texturing is enabled\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
textureBarrier() -> ok
.br
.fi
.br
.RS
.LP
The values of rendered fragments are undefined when a shader stage fetches texels and the same texels are written via fragment shader outputs, even if the reads and writes are not in the same drawing command\&. To safely read the result of a written texel via a texel fetch in a subsequent drawing command, call \fIgl:textureBarrier/0\fR\& between the two drawing commands to guarantee that writes have completed and caches have been invalidated before subsequent drawing commands are executed\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
textureView(Texture, Target, Origtexture, Internalformat,
.B
            Minlevel, Numlevels, Minlayer, Numlayers) ->
.B
               ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Texture = i()
.br
Target = enum()
.br
Origtexture = i()
.br
Internalformat = enum()
.br
Minlevel = Numlevels = Minlayer = Numlayers = i()
.br
.RE
.RE
.RS
.LP
\fIgl:textureView/8\fR\& initializes a texture object as an alias, or view of another texture object, sharing some or all of the parent texture\&'s data store with the initialized texture\&. \fITexture\fR\& specifies a name previously reserved by a successful call to \fIgl:genTextures/1\fR\& but that has not yet been bound or given a target\&. \fITarget\fR\& specifies the target for the newly initialized texture and must be compatible with the target of the parent texture, given in \fIOrigtexture\fR\& as specified in the following table:
.LP
External documentation\&.
.RE
.LP
.nf

.B
transformFeedbackBufferBase(Xfb :: i(),
.B
                            Index :: i(),
.B
                            Buffer :: i()) ->
.B
                               ok
.br
.fi
.br
.RS
.LP
\fIgl:transformFeedbackBufferBase/3\fR\& binds the buffer object \fIBuffer\fR\& to the binding point at index \fIIndex\fR\& of the transform feedback object \fIXfb\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
transformFeedbackBufferRange(Xfb :: i(),
.B
                             Index :: i(),
.B
                             Buffer :: i(),
.B
                             Offset :: i(),
.B
                             Size :: i()) ->
.B
                                ok
.br
.fi
.br
.RS
.LP
\fIgl:transformFeedbackBufferRange/5\fR\& binds a range of the buffer object \fIBuffer\fR\& represented by \fIOffset\fR\& and \fISize\fR\& to the binding point at index \fIIndex\fR\& of the transform feedback object \fIXfb\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
transformFeedbackVaryings(Program :: i(),
.B
                          Varyings :: [unicode:chardata()],
.B
                          BufferMode :: enum()) ->
.B
                             ok
.br
.fi
.br
.RS
.LP
The names of the vertex or geometry shader outputs to be recorded in transform feedback mode are specified using \fIgl:transformFeedbackVaryings/3\fR\&\&. When a geometry shader is active, transform feedback records the values of selected geometry shader output variables from the emitted vertices\&. Otherwise, the values of the selected vertex shader outputs are recorded\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
translated(X :: f(), Y :: f(), Z :: f()) -> ok
.br
.fi
.br
.nf

.B
translatef(X :: f(), Y :: f(), Z :: f()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:translate()\fR\& produces a translation by (x y z)\&. The current matrix (see \fIgl:matrixMode/1\fR\&) is multiplied by this translation matrix, with the product replacing the current matrix, as if \fIgl:multMatrix()\fR\& were called with the following matrix for its argument:
.LP
External documentation\&.
.RE
.LP
.nf

.B
uniform1d(Location :: i(), X :: f()) -> ok
.br
.fi
.br
.nf

.B
uniform1dv(Location :: i(), Value :: [f()]) -> ok
.br
.fi
.br
.nf

.B
uniform1f(Location :: i(), V0 :: f()) -> ok
.br
.fi
.br
.nf

.B
uniform1fv(Location :: i(), Value :: [f()]) -> ok
.br
.fi
.br
.nf

.B
uniform1i(Location :: i(), V0 :: i()) -> ok
.br
.fi
.br
.nf

.B
uniform1iv(Location :: i(), Value :: [i()]) -> ok
.br
.fi
.br
.nf

.B
uniform1ui(Location :: i(), V0 :: i()) -> ok
.br
.fi
.br
.nf

.B
uniform1uiv(Location :: i(), Value :: [i()]) -> ok
.br
.fi
.br
.nf

.B
uniform2d(Location :: i(), X :: f(), Y :: f()) -> ok
.br
.fi
.br
.nf

.B
uniform2dv(Location :: i(), Value :: [{f(), f()}]) -> ok
.br
.fi
.br
.nf

.B
uniform2f(Location :: i(), V0 :: f(), V1 :: f()) -> ok
.br
.fi
.br
.nf

.B
uniform2fv(Location :: i(), Value :: [{f(), f()}]) -> ok
.br
.fi
.br
.nf

.B
uniform2i(Location :: i(), V0 :: i(), V1 :: i()) -> ok
.br
.fi
.br
.nf

.B
uniform2iv(Location :: i(), Value :: [{i(), i()}]) -> ok
.br
.fi
.br
.nf

.B
uniform2ui(Location :: i(), V0 :: i(), V1 :: i()) -> ok
.br
.fi
.br
.nf

.B
uniform2uiv(Location :: i(), Value :: [{i(), i()}]) -> ok
.br
.fi
.br
.nf

.B
uniform3d(Location :: i(), X :: f(), Y :: f(), Z :: f()) -> ok
.br
.fi
.br
.nf

.B
uniform3dv(Location :: i(), Value :: [{f(), f(), f()}]) -> ok
.br
.fi
.br
.nf

.B
uniform3f(Location :: i(), V0 :: f(), V1 :: f(), V2 :: f()) -> ok
.br
.fi
.br
.nf

.B
uniform3fv(Location :: i(), Value :: [{f(), f(), f()}]) -> ok
.br
.fi
.br
.nf

.B
uniform3i(Location :: i(), V0 :: i(), V1 :: i(), V2 :: i()) -> ok
.br
.fi
.br
.nf

.B
uniform3iv(Location :: i(), Value :: [{i(), i(), i()}]) -> ok
.br
.fi
.br
.nf

.B
uniform3ui(Location :: i(), V0 :: i(), V1 :: i(), V2 :: i()) -> ok
.br
.fi
.br
.nf

.B
uniform3uiv(Location :: i(), Value :: [{i(), i(), i()}]) -> ok
.br
.fi
.br
.nf

.B
uniform4d(Location :: i(), X :: f(), Y :: f(), Z :: f(), W :: f()) ->
.B
             ok
.br
.fi
.br
.nf

.B
uniform4dv(Location :: i(), Value :: [{f(), f(), f(), f()}]) -> ok
.br
.fi
.br
.nf

.B
uniform4f(Location :: i(),
.B
          V0 :: f(),
.B
          V1 :: f(),
.B
          V2 :: f(),
.B
          V3 :: f()) ->
.B
             ok
.br
.fi
.br
.nf

.B
uniform4fv(Location :: i(), Value :: [{f(), f(), f(), f()}]) -> ok
.br
.fi
.br
.nf

.B
uniform4i(Location :: i(),
.B
          V0 :: i(),
.B
          V1 :: i(),
.B
          V2 :: i(),
.B
          V3 :: i()) ->
.B
             ok
.br
.fi
.br
.nf

.B
uniform4iv(Location :: i(), Value :: [{i(), i(), i(), i()}]) -> ok
.br
.fi
.br
.nf

.B
uniform4ui(Location :: i(),
.B
           V0 :: i(),
.B
           V1 :: i(),
.B
           V2 :: i(),
.B
           V3 :: i()) ->
.B
              ok
.br
.fi
.br
.nf

.B
uniform4uiv(Location :: i(), Value :: [{i(), i(), i(), i()}]) ->
.B
               ok
.br
.fi
.br
.nf

.B
uniformMatrix2dv(Location :: i(),
.B
                 Transpose :: 0 | 1,
.B
                 Value :: [{f(), f(), f(), f()}]) ->
.B
                    ok
.br
.fi
.br
.nf

.B
uniformMatrix2fv(Location :: i(),
.B
                 Transpose :: 0 | 1,
.B
                 Value :: [{f(), f(), f(), f()}]) ->
.B
                    ok
.br
.fi
.br
.nf

.B
uniformMatrix2x3dv(Location :: i(),
.B
                   Transpose :: 0 | 1,
.B
                   Value :: [{f(), f(), f(), f(), f(), f()}]) ->
.B
                      ok
.br
.fi
.br
.nf

.B
uniformMatrix2x3fv(Location :: i(),
.B
                   Transpose :: 0 | 1,
.B
                   Value :: [{f(), f(), f(), f(), f(), f()}]) ->
.B
                      ok
.br
.fi
.br
.nf

.B
uniformMatrix2x4dv(Location :: i(),
.B
                   Transpose :: 0 | 1,
.B
                   Value ::
.B
                       [{f(), f(), f(), f(), f(), f(), f(), f()}]) ->
.B
                      ok
.br
.fi
.br
.nf

.B
uniformMatrix2x4fv(Location :: i(),
.B
                   Transpose :: 0 | 1,
.B
                   Value ::
.B
                       [{f(), f(), f(), f(), f(), f(), f(), f()}]) ->
.B
                      ok
.br
.fi
.br
.nf

.B
uniformMatrix3dv(Location :: i(),
.B
                 Transpose :: 0 | 1,
.B
                 Value ::
.B
                     [{f(),
.B
                       f(),
.B
                       f(),
.B
                       f(),
.B
                       f(),
.B
                       f(),
.B
                       f(),
.B
                       f(),
.B
                       f()}]) ->
.B
                    ok
.br
.fi
.br
.nf

.B
uniformMatrix3fv(Location :: i(),
.B
                 Transpose :: 0 | 1,
.B
                 Value ::
.B
                     [{f(),
.B
                       f(),
.B
                       f(),
.B
                       f(),
.B
                       f(),
.B
                       f(),
.B
                       f(),
.B
                       f(),
.B
                       f()}]) ->
.B
                    ok
.br
.fi
.br
.nf

.B
uniformMatrix3x2dv(Location :: i(),
.B
                   Transpose :: 0 | 1,
.B
                   Value :: [{f(), f(), f(), f(), f(), f()}]) ->
.B
                      ok
.br
.fi
.br
.nf

.B
uniformMatrix3x2fv(Location :: i(),
.B
                   Transpose :: 0 | 1,
.B
                   Value :: [{f(), f(), f(), f(), f(), f()}]) ->
.B
                      ok
.br
.fi
.br
.nf

.B
uniformMatrix3x4dv(Location, Transpose, Value) -> ok
.br
.fi
.br
.nf

.B
uniformMatrix3x4fv(Location, Transpose, Value) -> ok
.br
.fi
.br
.nf

.B
uniformMatrix4dv(Location, Transpose, Value) -> ok
.br
.fi
.br
.nf

.B
uniformMatrix4fv(Location, Transpose, Value) -> ok
.br
.fi
.br
.nf

.B
uniformMatrix4x2dv(Location :: i(),
.B
                   Transpose :: 0 | 1,
.B
                   Value ::
.B
                       [{f(), f(), f(), f(), f(), f(), f(), f()}]) ->
.B
                      ok
.br
.fi
.br
.nf

.B
uniformMatrix4x2fv(Location :: i(),
.B
                   Transpose :: 0 | 1,
.B
                   Value ::
.B
                       [{f(), f(), f(), f(), f(), f(), f(), f()}]) ->
.B
                      ok
.br
.fi
.br
.nf

.B
uniformMatrix4x3dv(Location, Transpose, Value) -> ok
.br
.fi
.br
.nf

.B
uniformMatrix4x3fv(Location, Transpose, Value) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Location = i()
.br
Transpose = 0 | 1
.br
Value = 
.br
    [{f(), f(), f(), f(), f(), f(), f(), f(), f(), f(), f(), f()}]
.br
.RE
.RE
.RS
.LP
\fIgl:uniform()\fR\& modifies the value of a uniform variable or a uniform variable array\&. The location of the uniform variable to be modified is specified by \fILocation\fR\&, which should be a value returned by \fIgl:getUniformLocation/2\fR\&\&. \fIgl:uniform()\fR\& operates on the program object that was made part of current state by calling \fIgl:useProgram/1\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
uniformBlockBinding(Program :: i(),
.B
                    UniformBlockIndex :: i(),
.B
                    UniformBlockBinding :: i()) ->
.B
                       ok
.br
.fi
.br
.RS
.LP
Binding points for active uniform blocks are assigned using \fIgl:uniformBlockBinding/3\fR\&\&. Each of a program\&'s active uniform blocks has a corresponding uniform buffer binding point\&. \fIProgram\fR\& is the name of a program object for which the command \fIgl:linkProgram/1\fR\& has been issued in the past\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
uniformSubroutinesuiv(Shadertype :: enum(), Indices :: [i()]) ->
.B
                         ok
.br
.fi
.br
.RS
.LP
\fIgl:uniformSubroutines()\fR\& loads all active subroutine uniforms for shader stage \fIShadertype\fR\& of the current program with subroutine indices from \fIIndices\fR\&, storing \fIIndices[i]\fR\& into the uniform at location \fII\fR\&\&. \fICount\fR\& must be equal to the value of \fI?GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS\fR\& for the program currently in use at shader stage \fIShadertype\fR\&\&. Furthermore, all values in \fIIndices\fR\& must be less than the value of \fI?GL_ACTIVE_SUBROUTINES\fR\& for the shader stage\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
useProgram(Program :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:useProgram/1\fR\& installs the program object specified by \fIProgram\fR\& as part of current rendering state\&. One or more executables are created in a program object by successfully attaching shader objects to it with \fIgl:attachShader/2\fR\&, successfully compiling the shader objects with \fIgl:compileShader/1\fR\&, and successfully linking the program object with \fIgl:linkProgram/1\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
useProgramStages(Pipeline :: i(), Stages :: i(), Program :: i()) ->
.B
                    ok
.br
.fi
.br
.RS
.LP
\fIgl:useProgramStages/3\fR\& binds executables from a program object associated with a specified set of shader stages to the program pipeline object given by \fIPipeline\fR\&\&. \fIPipeline\fR\& specifies the program pipeline object to which to bind the executables\&. \fIStages\fR\& contains a logical combination of bits indicating the shader stages to use within \fIProgram\fR\& with the program pipeline object \fIPipeline\fR\&\&. \fIStages\fR\& must be a logical combination of \fI?GL_VERTEX_SHADER_BIT\fR\&, \fI?GL_TESS_CONTROL_SHADER_BIT\fR\&, \fI?GL_TESS_EVALUATION_SHADER_BIT\fR\&, \fI?GL_GEOMETRY_SHADER_BIT\fR\&, \fI?GL_FRAGMENT_SHADER_BIT\fR\& and \fI?GL_COMPUTE_SHADER_BIT\fR\&\&. Additionally, the special value \fI?GL_ALL_SHADER_BITS\fR\& may be specified to indicate that all executables contained in \fIProgram\fR\& should be installed in \fIPipeline\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
validateProgram(Program :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:validateProgram/1\fR\& checks to see whether the executables contained in \fIProgram\fR\& can execute given the current OpenGL state\&. The information generated by the validation process will be stored in \fIProgram\fR\&\&'s information log\&. The validation information may consist of an empty string, or it may be a string containing information about how the current program object interacts with the rest of current OpenGL state\&. This provides a way for OpenGL implementers to convey more information about why the current program is inefficient, suboptimal, failing to execute, and so on\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
validateProgramPipeline(Pipeline :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:validateProgramPipeline/1\fR\& instructs the implementation to validate the shader executables contained in \fIPipeline\fR\& against the current GL state\&. The implementation may use this as an opportunity to perform any internal shader modifications that may be required to ensure correct operation of the installed shaders given the current GL state\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
vertex2d(X :: f(), Y :: f()) -> ok
.br
.fi
.br
.nf

.B
vertex2dv(X1 :: {X :: f(), Y :: f()}) -> ok
.br
.fi
.br
.nf

.B
vertex2f(X :: f(), Y :: f()) -> ok
.br
.fi
.br
.nf

.B
vertex2fv(X1 :: {X :: f(), Y :: f()}) -> ok
.br
.fi
.br
.nf

.B
vertex2i(X :: i(), Y :: i()) -> ok
.br
.fi
.br
.nf

.B
vertex2iv(X1 :: {X :: i(), Y :: i()}) -> ok
.br
.fi
.br
.nf

.B
vertex2s(X :: i(), Y :: i()) -> ok
.br
.fi
.br
.nf

.B
vertex2sv(X1 :: {X :: i(), Y :: i()}) -> ok
.br
.fi
.br
.nf

.B
vertex3d(X :: f(), Y :: f(), Z :: f()) -> ok
.br
.fi
.br
.nf

.B
vertex3dv(X1 :: {X :: f(), Y :: f(), Z :: f()}) -> ok
.br
.fi
.br
.nf

.B
vertex3f(X :: f(), Y :: f(), Z :: f()) -> ok
.br
.fi
.br
.nf

.B
vertex3fv(X1 :: {X :: f(), Y :: f(), Z :: f()}) -> ok
.br
.fi
.br
.nf

.B
vertex3i(X :: i(), Y :: i(), Z :: i()) -> ok
.br
.fi
.br
.nf

.B
vertex3iv(X1 :: {X :: i(), Y :: i(), Z :: i()}) -> ok
.br
.fi
.br
.nf

.B
vertex3s(X :: i(), Y :: i(), Z :: i()) -> ok
.br
.fi
.br
.nf

.B
vertex3sv(X1 :: {X :: i(), Y :: i(), Z :: i()}) -> ok
.br
.fi
.br
.nf

.B
vertex4d(X :: f(), Y :: f(), Z :: f(), W :: f()) -> ok
.br
.fi
.br
.nf

.B
vertex4dv(X1 :: {X :: f(), Y :: f(), Z :: f(), W :: f()}) -> ok
.br
.fi
.br
.nf

.B
vertex4f(X :: f(), Y :: f(), Z :: f(), W :: f()) -> ok
.br
.fi
.br
.nf

.B
vertex4fv(X1 :: {X :: f(), Y :: f(), Z :: f(), W :: f()}) -> ok
.br
.fi
.br
.nf

.B
vertex4i(X :: i(), Y :: i(), Z :: i(), W :: i()) -> ok
.br
.fi
.br
.nf

.B
vertex4iv(X1 :: {X :: i(), Y :: i(), Z :: i(), W :: i()}) -> ok
.br
.fi
.br
.nf

.B
vertex4s(X :: i(), Y :: i(), Z :: i(), W :: i()) -> ok
.br
.fi
.br
.nf

.B
vertex4sv(X1 :: {X :: i(), Y :: i(), Z :: i(), W :: i()}) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:vertex()\fR\& commands are used within \fIgl:\&'begin\&'/1\fR\&/\fIgl:\&'end\&'/0\fR\& pairs to specify point, line, and polygon vertices\&. The current color, normal, texture coordinates, and fog coordinate are associated with the vertex when \fIgl:vertex()\fR\& is called\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
vertexArrayElementBuffer(Vaobj :: i(), Buffer :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:vertexArrayElementBuffer/2\fR\& binds a buffer object with id \fIBuffer\fR\& to the element array buffer bind point of a vertex array object with id \fIVaobj\fR\&\&. If \fIBuffer\fR\& is zero, any existing element array buffer binding to \fIVaobj\fR\& is removed\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
vertexAttrib1d(Index :: i(), X :: f()) -> ok
.br
.fi
.br
.nf

.B
vertexAttrib1dv(Index :: i(), X2 :: {X :: f()}) -> ok
.br
.fi
.br
.nf

.B
vertexAttrib1f(Index :: i(), X :: f()) -> ok
.br
.fi
.br
.nf

.B
vertexAttrib1fv(Index :: i(), X2 :: {X :: f()}) -> ok
.br
.fi
.br
.nf

.B
vertexAttrib1s(Index :: i(), X :: i()) -> ok
.br
.fi
.br
.nf

.B
vertexAttrib1sv(Index :: i(), X2 :: {X :: i()}) -> ok
.br
.fi
.br
.nf

.B
vertexAttrib2d(Index :: i(), X :: f(), Y :: f()) -> ok
.br
.fi
.br
.nf

.B
vertexAttrib2dv(Index :: i(), X2 :: {X :: f(), Y :: f()}) -> ok
.br
.fi
.br
.nf

.B
vertexAttrib2f(Index :: i(), X :: f(), Y :: f()) -> ok
.br
.fi
.br
.nf

.B
vertexAttrib2fv(Index :: i(), X2 :: {X :: f(), Y :: f()}) -> ok
.br
.fi
.br
.nf

.B
vertexAttrib2s(Index :: i(), X :: i(), Y :: i()) -> ok
.br
.fi
.br
.nf

.B
vertexAttrib2sv(Index :: i(), X2 :: {X :: i(), Y :: i()}) -> ok
.br
.fi
.br
.nf

.B
vertexAttrib3d(Index :: i(), X :: f(), Y :: f(), Z :: f()) -> ok
.br
.fi
.br
.nf

.B
vertexAttrib3dv(Index :: i(),
.B
                X2 :: {X :: f(), Y :: f(), Z :: f()}) ->
.B
                   ok
.br
.fi
.br
.nf

.B
vertexAttrib3f(Index :: i(), X :: f(), Y :: f(), Z :: f()) -> ok
.br
.fi
.br
.nf

.B
vertexAttrib3fv(Index :: i(),
.B
                X2 :: {X :: f(), Y :: f(), Z :: f()}) ->
.B
                   ok
.br
.fi
.br
.nf

.B
vertexAttrib3s(Index :: i(), X :: i(), Y :: i(), Z :: i()) -> ok
.br
.fi
.br
.nf

.B
vertexAttrib3sv(Index :: i(),
.B
                X2 :: {X :: i(), Y :: i(), Z :: i()}) ->
.B
                   ok
.br
.fi
.br
.nf

.B
vertexAttrib4Nbv(Index :: i(), V :: {i(), i(), i(), i()}) -> ok
.br
.fi
.br
.nf

.B
vertexAttrib4Niv(Index :: i(), V :: {i(), i(), i(), i()}) -> ok
.br
.fi
.br
.nf

.B
vertexAttrib4Nsv(Index :: i(), V :: {i(), i(), i(), i()}) -> ok
.br
.fi
.br
.nf

.B
vertexAttrib4Nub(Index :: i(),
.B
                 X :: i(),
.B
                 Y :: i(),
.B
                 Z :: i(),
.B
                 W :: i()) ->
.B
                    ok
.br
.fi
.br
.nf

.B
vertexAttrib4Nubv(Index :: i(),
.B
                  X2 :: {X :: i(), Y :: i(), Z :: i(), W :: i()}) ->
.B
                     ok
.br
.fi
.br
.nf

.B
vertexAttrib4Nuiv(Index :: i(), V :: {i(), i(), i(), i()}) -> ok
.br
.fi
.br
.nf

.B
vertexAttrib4Nusv(Index :: i(), V :: {i(), i(), i(), i()}) -> ok
.br
.fi
.br
.nf

.B
vertexAttrib4bv(Index :: i(), V :: {i(), i(), i(), i()}) -> ok
.br
.fi
.br
.nf

.B
vertexAttrib4d(Index :: i(),
.B
               X :: f(),
.B
               Y :: f(),
.B
               Z :: f(),
.B
               W :: f()) ->
.B
                  ok
.br
.fi
.br
.nf

.B
vertexAttrib4dv(Index :: i(),
.B
                X2 :: {X :: f(), Y :: f(), Z :: f(), W :: f()}) ->
.B
                   ok
.br
.fi
.br
.nf

.B
vertexAttrib4f(Index :: i(),
.B
               X :: f(),
.B
               Y :: f(),
.B
               Z :: f(),
.B
               W :: f()) ->
.B
                  ok
.br
.fi
.br
.nf

.B
vertexAttrib4fv(Index :: i(),
.B
                X2 :: {X :: f(), Y :: f(), Z :: f(), W :: f()}) ->
.B
                   ok
.br
.fi
.br
.nf

.B
vertexAttrib4iv(Index :: i(), V :: {i(), i(), i(), i()}) -> ok
.br
.fi
.br
.nf

.B
vertexAttrib4s(Index :: i(),
.B
               X :: i(),
.B
               Y :: i(),
.B
               Z :: i(),
.B
               W :: i()) ->
.B
                  ok
.br
.fi
.br
.nf

.B
vertexAttrib4sv(Index :: i(),
.B
                X2 :: {X :: i(), Y :: i(), Z :: i(), W :: i()}) ->
.B
                   ok
.br
.fi
.br
.nf

.B
vertexAttrib4ubv(Index :: i(), V :: {i(), i(), i(), i()}) -> ok
.br
.fi
.br
.nf

.B
vertexAttrib4uiv(Index :: i(), V :: {i(), i(), i(), i()}) -> ok
.br
.fi
.br
.nf

.B
vertexAttrib4usv(Index :: i(), V :: {i(), i(), i(), i()}) -> ok
.br
.fi
.br
.nf

.B
vertexAttribI1i(Index :: i(), X :: i()) -> ok
.br
.fi
.br
.nf

.B
vertexAttribI1iv(Index :: i(), X2 :: {X :: i()}) -> ok
.br
.fi
.br
.nf

.B
vertexAttribI1ui(Index :: i(), X :: i()) -> ok
.br
.fi
.br
.nf

.B
vertexAttribI1uiv(Index :: i(), X2 :: {X :: i()}) -> ok
.br
.fi
.br
.nf

.B
vertexAttribI2i(Index :: i(), X :: i(), Y :: i()) -> ok
.br
.fi
.br
.nf

.B
vertexAttribI2iv(Index :: i(), X2 :: {X :: i(), Y :: i()}) -> ok
.br
.fi
.br
.nf

.B
vertexAttribI2ui(Index :: i(), X :: i(), Y :: i()) -> ok
.br
.fi
.br
.nf

.B
vertexAttribI2uiv(Index :: i(), X2 :: {X :: i(), Y :: i()}) -> ok
.br
.fi
.br
.nf

.B
vertexAttribI3i(Index :: i(), X :: i(), Y :: i(), Z :: i()) -> ok
.br
.fi
.br
.nf

.B
vertexAttribI3iv(Index :: i(),
.B
                 X2 :: {X :: i(), Y :: i(), Z :: i()}) ->
.B
                    ok
.br
.fi
.br
.nf

.B
vertexAttribI3ui(Index :: i(), X :: i(), Y :: i(), Z :: i()) -> ok
.br
.fi
.br
.nf

.B
vertexAttribI3uiv(Index :: i(),
.B
                  X2 :: {X :: i(), Y :: i(), Z :: i()}) ->
.B
                     ok
.br
.fi
.br
.nf

.B
vertexAttribI4bv(Index :: i(), V :: {i(), i(), i(), i()}) -> ok
.br
.fi
.br
.nf

.B
vertexAttribI4i(Index :: i(),
.B
                X :: i(),
.B
                Y :: i(),
.B
                Z :: i(),
.B
                W :: i()) ->
.B
                   ok
.br
.fi
.br
.nf

.B
vertexAttribI4iv(Index :: i(),
.B
                 X2 :: {X :: i(), Y :: i(), Z :: i(), W :: i()}) ->
.B
                    ok
.br
.fi
.br
.nf

.B
vertexAttribI4sv(Index :: i(), V :: {i(), i(), i(), i()}) -> ok
.br
.fi
.br
.nf

.B
vertexAttribI4ubv(Index :: i(), V :: {i(), i(), i(), i()}) -> ok
.br
.fi
.br
.nf

.B
vertexAttribI4ui(Index :: i(),
.B
                 X :: i(),
.B
                 Y :: i(),
.B
                 Z :: i(),
.B
                 W :: i()) ->
.B
                    ok
.br
.fi
.br
.nf

.B
vertexAttribI4uiv(Index :: i(),
.B
                  X2 :: {X :: i(), Y :: i(), Z :: i(), W :: i()}) ->
.B
                     ok
.br
.fi
.br
.nf

.B
vertexAttribI4usv(Index :: i(), V :: {i(), i(), i(), i()}) -> ok
.br
.fi
.br
.nf

.B
vertexAttribL1d(Index :: i(), X :: f()) -> ok
.br
.fi
.br
.nf

.B
vertexAttribL1dv(Index :: i(), X2 :: {X :: f()}) -> ok
.br
.fi
.br
.nf

.B
vertexAttribL2d(Index :: i(), X :: f(), Y :: f()) -> ok
.br
.fi
.br
.nf

.B
vertexAttribL2dv(Index :: i(), X2 :: {X :: f(), Y :: f()}) -> ok
.br
.fi
.br
.nf

.B
vertexAttribL3d(Index :: i(), X :: f(), Y :: f(), Z :: f()) -> ok
.br
.fi
.br
.nf

.B
vertexAttribL3dv(Index :: i(),
.B
                 X2 :: {X :: f(), Y :: f(), Z :: f()}) ->
.B
                    ok
.br
.fi
.br
.nf

.B
vertexAttribL4d(Index :: i(),
.B
                X :: f(),
.B
                Y :: f(),
.B
                Z :: f(),
.B
                W :: f()) ->
.B
                   ok
.br
.fi
.br
.nf

.B
vertexAttribL4dv(Index :: i(),
.B
                 X2 :: {X :: f(), Y :: f(), Z :: f(), W :: f()}) ->
.B
                    ok
.br
.fi
.br
.RS
.LP
The \fIgl:vertexAttrib()\fR\& family of entry points allows an application to pass generic vertex attributes in numbered locations\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
vertexArrayAttribBinding(Vaobj :: i(),
.B
                         Attribindex :: i(),
.B
                         Bindingindex :: i()) ->
.B
                            ok
.br
.fi
.br
.nf

.B
vertexAttribBinding(Attribindex :: i(), Bindingindex :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:vertexAttribBinding/2\fR\& and \fIgl:vertexArrayAttribBinding/3\fR\& establishes an association between the generic vertex attribute of a vertex array object whose index is given by \fIAttribindex\fR\&, and a vertex buffer binding whose index is given by \fIBindingindex\fR\&\&. For \fIgl:vertexAttribBinding/2\fR\&, the vertex array object affected is that currently bound\&. For \fIgl:vertexArrayAttribBinding/3\fR\&, \fIVaobj\fR\& is the name of the vertex array object\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
vertexAttribDivisor(Index :: i(), Divisor :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:vertexAttribDivisor/2\fR\& modifies the rate at which generic vertex attributes advance when rendering multiple instances of primitives in a single draw call\&. If \fIDivisor\fR\& is zero, the attribute at slot \fIIndex\fR\& advances once per vertex\&. If \fIDivisor\fR\& is non-zero, the attribute advances once per \fIDivisor\fR\& instances of the set(s) of vertices being rendered\&. An attribute is referred to as instanced if its \fI?GL_VERTEX_ATTRIB_ARRAY_DIVISOR\fR\& value is non-zero\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
vertexArrayAttribFormat(Vaobj, Attribindex, Size, Type,
.B
                        Normalized, Relativeoffset) ->
.B
                           ok
.br
.fi
.br
.nf

.B
vertexArrayAttribIFormat(Vaobj :: i(),
.B
                         Attribindex :: i(),
.B
                         Size :: i(),
.B
                         Type :: enum(),
.B
                         Relativeoffset :: i()) ->
.B
                            ok
.br
.fi
.br
.nf

.B
vertexArrayAttribLFormat(Vaobj :: i(),
.B
                         Attribindex :: i(),
.B
                         Size :: i(),
.B
                         Type :: enum(),
.B
                         Relativeoffset :: i()) ->
.B
                            ok
.br
.fi
.br
.nf

.B
vertexAttribFormat(Attribindex :: i(),
.B
                   Size :: i(),
.B
                   Type :: enum(),
.B
                   Normalized :: 0 | 1,
.B
                   Relativeoffset :: i()) ->
.B
                      ok
.br
.fi
.br
.nf

.B
vertexAttribIFormat(Attribindex :: i(),
.B
                    Size :: i(),
.B
                    Type :: enum(),
.B
                    Relativeoffset :: i()) ->
.B
                       ok
.br
.fi
.br
.nf

.B
vertexAttribIPointer(Index :: i(),
.B
                     Size :: i(),
.B
                     Type :: enum(),
.B
                     Stride :: i(),
.B
                     Pointer :: offset() | mem()) ->
.B
                        ok
.br
.fi
.br
.nf

.B
vertexAttribLFormat(Attribindex :: i(),
.B
                    Size :: i(),
.B
                    Type :: enum(),
.B
                    Relativeoffset :: i()) ->
.B
                       ok
.br
.fi
.br
.nf

.B
vertexAttribLPointer(Index :: i(),
.B
                     Size :: i(),
.B
                     Type :: enum(),
.B
                     Stride :: i(),
.B
                     Pointer :: offset() | mem()) ->
.B
                        ok
.br
.fi
.br
.RS
.LP
\fIgl:vertexAttribFormat/5\fR\&, \fIgl:vertexAttribIFormat/4\fR\& and \fIgl:vertexAttribLFormat/4\fR\&, as well as \fIgl:vertexArrayAttribFormat/6\fR\&, \fIgl:vertexArrayAttribIFormat/5\fR\& and \fIgl:vertexArrayAttribLFormat/5\fR\& specify the organization of data in vertex arrays\&. The first three calls operate on the bound vertex array object, whereas the last three ones modify the state of a vertex array object with ID \fIVaobj\fR\&\&. \fIAttribindex\fR\& specifies the index of the generic vertex attribute array whose data layout is being described, and must be less than the value of \fI?GL_MAX_VERTEX_ATTRIBS\fR\&\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
vertexAttribPointer(Index, Size, Type, Normalized, Stride,
.B
                    Pointer) ->
.B
                       ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Index = Size = i()
.br
Type = enum()
.br
Normalized = 0 | 1
.br
Stride = i()
.br
Pointer = offset() | mem()
.br
.RE
.RE
.RS
.LP
\fIgl:vertexAttribPointer/6\fR\&, \fIgl:vertexAttribIPointer/5\fR\& and \fIgl:vertexAttribLPointer/5\fR\& specify the location and data format of the array of generic vertex attributes at index \fIIndex\fR\& to use when rendering\&. \fISize\fR\& specifies the number of components per attribute and must be 1, 2, 3, 4, or \fI?GL_BGRA\fR\&\&. \fIType\fR\& specifies the data type of each component, and \fIStride\fR\& specifies the byte stride from one attribute to the next, allowing vertices and attributes to be packed into a single array or stored in separate arrays\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
vertexArrayBindingDivisor(Vaobj :: i(),
.B
                          Bindingindex :: i(),
.B
                          Divisor :: i()) ->
.B
                             ok
.br
.fi
.br
.nf

.B
vertexBindingDivisor(Bindingindex :: i(), Divisor :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:vertexBindingDivisor/2\fR\& and \fIgl:vertexArrayBindingDivisor/3\fR\& modify the rate at which generic vertex attributes advance when rendering multiple instances of primitives in a single draw command\&. If \fIDivisor\fR\& is zero, the attributes using the buffer bound to \fIBindingindex\fR\& advance once per vertex\&. If \fIDivisor\fR\& is non-zero, the attributes advance once per \fIDivisor\fR\& instances of the set(s) of vertices being rendered\&. An attribute is referred to as \fIinstanced\fR\& if the corresponding \fIDivisor\fR\& value is non-zero\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
vertexPointer(Size :: i(),
.B
              Type :: enum(),
.B
              Stride :: i(),
.B
              Ptr :: offset() | mem()) ->
.B
                 ok
.br
.fi
.br
.RS
.LP
\fIgl:vertexPointer/4\fR\& specifies the location and data format of an array of vertex coordinates to use when rendering\&. \fISize\fR\& specifies the number of coordinates per vertex, and must be 2, 3, or 4\&. \fIType\fR\& specifies the data type of each coordinate, and \fIStride\fR\& specifies the byte stride from one vertex to the next, allowing vertices and attributes to be packed into a single array or stored in separate arrays\&. (Single-array storage may be more efficient on some implementations; see \fIgl:interleavedArrays/3\fR\&\&.)
.LP
External documentation\&.
.RE
.LP
.nf

.B
viewport(X :: i(), Y :: i(), Width :: i(), Height :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:viewport/4\fR\& specifies the affine transformation of x and y from normalized device coordinates to window coordinates\&. Let (x nd y nd) be normalized device coordinates\&. Then the window coordinates (x w y w) are computed as follows:
.LP
External documentation\&.
.RE
.LP
.nf

.B
viewportArrayv(First :: i(), V :: [{f(), f(), f(), f()}]) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:viewportArrayv/2\fR\& specifies the parameters for multiple viewports simulataneously\&. \fIFirst\fR\& specifies the index of the first viewport to modify and \fICount\fR\& specifies the number of viewports to modify\&. \fIFirst\fR\& must be less than the value of \fI?GL_MAX_VIEWPORTS\fR\&, and \fIFirst\fR\& + \fICount\fR\& must be less than or equal to the value of \fI?GL_MAX_VIEWPORTS\fR\&\&. Viewports whose indices lie outside the range [\fIFirst\fR\&, \fIFirst\fR\& + \fICount\fR\&) are not modified\&. \fIV\fR\& contains the address of an array of floating point values specifying the left ( x), bottom ( y), width ( w), and height ( h) of each viewport, in that order\&. x and y give the location of the viewport\&'s lower left corner, and w and h give the width and height of the viewport, respectively\&. The viewport specifies the affine transformation of x and y from normalized device coordinates to window coordinates\&. Let (x nd y nd) be normalized device coordinates\&. Then the window coordinates (x w y w) are computed as follows:
.LP
External documentation\&.
.RE
.LP
.nf

.B
viewportIndexedf(Index :: i(),
.B
                 X :: f(),
.B
                 Y :: f(),
.B
                 W :: f(),
.B
                 H :: f()) ->
.B
                    ok
.br
.fi
.br
.nf

.B
viewportIndexedfv(Index :: i(), V :: {f(), f(), f(), f()}) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:viewportIndexedf/5\fR\& and \fIgl:viewportIndexedfv/2\fR\& specify the parameters for a single viewport\&. \fIIndex\fR\& specifies the index of the viewport to modify\&. \fIIndex\fR\& must be less than the value of \fI?GL_MAX_VIEWPORTS\fR\&\&. For \fIgl:viewportIndexedf/5\fR\&, \fIX\fR\&, \fIY\fR\&, \fIW\fR\&, and \fIH\fR\& specify the left, bottom, width and height of the viewport in pixels, respectively\&. For \fIgl:viewportIndexedfv/2\fR\&, \fIV\fR\& contains the address of an array of floating point values specifying the left ( x), bottom ( y), width ( w), and height ( h) of each viewport, in that order\&. x and y give the location of the viewport\&'s lower left corner, and w and h give the width and height of the viewport, respectively\&. The viewport specifies the affine transformation of x and y from normalized device coordinates to window coordinates\&. Let (x nd y nd) be normalized device coordinates\&. Then the window coordinates (x w y w) are computed as follows:
.LP
External documentation\&.
.RE
.LP
.nf

.B
waitSync(Sync :: i(), Flags :: i(), Timeout :: i()) -> ok
.br
.fi
.br
.RS
.LP
\fIgl:waitSync/3\fR\& causes the GL server to block and wait until \fISync\fR\& becomes signaled\&. \fISync\fR\& is the name of an existing sync object upon which to wait\&. \fIFlags\fR\& and \fITimeout\fR\& are currently not used and must be set to zero and the special value \fI?GL_TIMEOUT_IGNORED\fR\&, respectively
.LP
\fIFlags\fR\& and \fITimeout\fR\& are placeholders for anticipated future extensions of sync object capabilities\&. They must have these reserved values in order that existing code calling \fIgl:waitSync/3\fR\& operate properly in the presence of such extensions\&.
.LP
External documentation\&.
.RE
.LP
.nf

.B
windowPos2d(X :: f(), Y :: f()) -> ok
.br
.fi
.br
.nf

.B
windowPos2dv(X1 :: {X :: f(), Y :: f()}) -> ok
.br
.fi
.br
.nf

.B
windowPos2f(X :: f(), Y :: f()) -> ok
.br
.fi
.br
.nf

.B
windowPos2fv(X1 :: {X :: f(), Y :: f()}) -> ok
.br
.fi
.br
.nf

.B
windowPos2i(X :: i(), Y :: i()) -> ok
.br
.fi
.br
.nf

.B
windowPos2iv(X1 :: {X :: i(), Y :: i()}) -> ok
.br
.fi
.br
.nf

.B
windowPos2s(X :: i(), Y :: i()) -> ok
.br
.fi
.br
.nf

.B
windowPos2sv(X1 :: {X :: i(), Y :: i()}) -> ok
.br
.fi
.br
.nf

.B
windowPos3d(X :: f(), Y :: f(), Z :: f()) -> ok
.br
.fi
.br
.nf

.B
windowPos3dv(X1 :: {X :: f(), Y :: f(), Z :: f()}) -> ok
.br
.fi
.br
.nf

.B
windowPos3f(X :: f(), Y :: f(), Z :: f()) -> ok
.br
.fi
.br
.nf

.B
windowPos3fv(X1 :: {X :: f(), Y :: f(), Z :: f()}) -> ok
.br
.fi
.br
.nf

.B
windowPos3i(X :: i(), Y :: i(), Z :: i()) -> ok
.br
.fi
.br
.nf

.B
windowPos3iv(X1 :: {X :: i(), Y :: i(), Z :: i()}) -> ok
.br
.fi
.br
.nf

.B
windowPos3s(X :: i(), Y :: i(), Z :: i()) -> ok
.br
.fi
.br
.nf

.B
windowPos3sv(X1 :: {X :: i(), Y :: i(), Z :: i()}) -> ok
.br
.fi
.br
.RS
.LP
The GL maintains a 3D position in window coordinates\&. This position, called the raster position, is used to position pixel and bitmap write operations\&. It is maintained with subpixel accuracy\&. See \fIgl:bitmap/7\fR\&, \fIgl:drawPixels/5\fR\&, and \fIgl:copyPixels/5\fR\&\&.
.LP
External documentation\&.
.RE